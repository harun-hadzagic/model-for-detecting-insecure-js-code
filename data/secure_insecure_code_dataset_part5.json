[
  {
    "id": 4092,
    "code": "const h4092=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4093,
    "code": "const h4092=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4094,
    "code": "app.get('/proxy4094',async(req,res)=>{ const r=await fetch(req.query.url4094); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4095,
    "code": "const {URL}=require('url'); app.get('/proxy4094',async(req,res)=>{ try{ const u=new URL(String(req.query.url4094||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4096,
    "code": "const token4096=jwt.sign({'id':u.id},'secret4096');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4097,
    "code": "const token4096=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4098,
    "code": "app.get('/open4098',(req,res)=>{ res.redirect(req.query.to4098); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4099,
    "code": "app.get('/open4098',(req,res)=>{ const t=String(req.query.to4098||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4100,
    "code": "router.get('/u4100', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4100); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4101,
    "code": "router.get('/u4100', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4100]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4102,
    "code": "app.post('/run4102',(req,res)=>{ require('child_process').exec('cat '+req.body.f4102,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4103,
    "code": "app.post('/run4102',(req,res)=>{ const f=String(req.body.f4102||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4104,
    "code": "app.get('/r4104',(req,res)=>{ res.redirect(req.query.to4104); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4105,
    "code": "app.get('/r4104',(req,res)=>{ const t=String(req.query.to4104||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4106,
    "code": "app.post('/cfg4106',(req,res)=>{ const c=eval('('+req.body.cfg4106+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4107,
    "code": "app.post('/cfg4106',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4106||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4108,
    "code": "app.post('/up4108',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4109,
    "code": "const pathu4108=require('path');app.post('/up4108',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4108.basename(f.name); f.mv(pathu4108.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4110,
    "code": "app.post('/vote4110',(req,res)=>{ save(req.body.choice4110); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4111,
    "code": "app.post('/vote4110',(req,res)=>{ const c=String(req.body.choice4110||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4112,
    "code": "const h4112=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4113,
    "code": "const h4112=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4114,
    "code": "app.get('/proxy4114',async(req,res)=>{ const r=await fetch(req.query.url4114); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4115,
    "code": "const {URL}=require('url'); app.get('/proxy4114',async(req,res)=>{ try{ const u=new URL(String(req.query.url4114||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4116,
    "code": "const token4116=jwt.sign({'id':u.id},'secret4116');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4117,
    "code": "const token4116=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4118,
    "code": "app.get('/open4118',(req,res)=>{ res.redirect(req.query.to4118); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4119,
    "code": "app.get('/open4118',(req,res)=>{ const t=String(req.query.to4118||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4120,
    "code": "router.get('/u4120', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4120); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4121,
    "code": "router.get('/u4120', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4120]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4122,
    "code": "app.post('/run4122',(req,res)=>{ require('child_process').exec('cat '+req.body.f4122,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4123,
    "code": "app.post('/run4122',(req,res)=>{ const f=String(req.body.f4122||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4124,
    "code": "app.get('/r4124',(req,res)=>{ res.redirect(req.query.to4124); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4125,
    "code": "app.get('/r4124',(req,res)=>{ const t=String(req.query.to4124||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4126,
    "code": "app.post('/cfg4126',(req,res)=>{ const c=eval('('+req.body.cfg4126+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4127,
    "code": "app.post('/cfg4126',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4126||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4128,
    "code": "app.post('/up4128',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4129,
    "code": "const pathu4128=require('path');app.post('/up4128',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4128.basename(f.name); f.mv(pathu4128.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4130,
    "code": "app.post('/vote4130',(req,res)=>{ save(req.body.choice4130); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4131,
    "code": "app.post('/vote4130',(req,res)=>{ const c=String(req.body.choice4130||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4132,
    "code": "const h4132=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4133,
    "code": "const h4132=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4134,
    "code": "app.get('/proxy4134',async(req,res)=>{ const r=await fetch(req.query.url4134); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4135,
    "code": "const {URL}=require('url'); app.get('/proxy4134',async(req,res)=>{ try{ const u=new URL(String(req.query.url4134||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4136,
    "code": "const token4136=jwt.sign({'id':u.id},'secret4136');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4137,
    "code": "const token4136=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4138,
    "code": "app.get('/open4138',(req,res)=>{ res.redirect(req.query.to4138); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4139,
    "code": "app.get('/open4138',(req,res)=>{ const t=String(req.query.to4138||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4140,
    "code": "router.get('/u4140', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4140); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4141,
    "code": "router.get('/u4140', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4140]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4142,
    "code": "app.post('/run4142',(req,res)=>{ require('child_process').exec('cat '+req.body.f4142,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4143,
    "code": "app.post('/run4142',(req,res)=>{ const f=String(req.body.f4142||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4144,
    "code": "app.get('/r4144',(req,res)=>{ res.redirect(req.query.to4144); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4145,
    "code": "app.get('/r4144',(req,res)=>{ const t=String(req.query.to4144||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4146,
    "code": "app.post('/cfg4146',(req,res)=>{ const c=eval('('+req.body.cfg4146+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4147,
    "code": "app.post('/cfg4146',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4146||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4148,
    "code": "app.post('/up4148',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4149,
    "code": "const pathu4148=require('path');app.post('/up4148',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4148.basename(f.name); f.mv(pathu4148.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4150,
    "code": "app.post('/vote4150',(req,res)=>{ save(req.body.choice4150); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4151,
    "code": "app.post('/vote4150',(req,res)=>{ const c=String(req.body.choice4150||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4152,
    "code": "const h4152=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4153,
    "code": "const h4152=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4154,
    "code": "app.get('/proxy4154',async(req,res)=>{ const r=await fetch(req.query.url4154); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4155,
    "code": "const {URL}=require('url'); app.get('/proxy4154',async(req,res)=>{ try{ const u=new URL(String(req.query.url4154||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4156,
    "code": "const token4156=jwt.sign({'id':u.id},'secret4156');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4157,
    "code": "const token4156=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4158,
    "code": "app.get('/open4158',(req,res)=>{ res.redirect(req.query.to4158); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4159,
    "code": "app.get('/open4158',(req,res)=>{ const t=String(req.query.to4158||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4160,
    "code": "router.get('/u4160', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4160); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4161,
    "code": "router.get('/u4160', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4160]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4162,
    "code": "app.post('/run4162',(req,res)=>{ require('child_process').exec('cat '+req.body.f4162,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4163,
    "code": "app.post('/run4162',(req,res)=>{ const f=String(req.body.f4162||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4164,
    "code": "app.get('/r4164',(req,res)=>{ res.redirect(req.query.to4164); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4165,
    "code": "app.get('/r4164',(req,res)=>{ const t=String(req.query.to4164||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4166,
    "code": "app.post('/cfg4166',(req,res)=>{ const c=eval('('+req.body.cfg4166+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4167,
    "code": "app.post('/cfg4166',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4166||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4168,
    "code": "app.post('/up4168',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4169,
    "code": "const pathu4168=require('path');app.post('/up4168',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4168.basename(f.name); f.mv(pathu4168.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4170,
    "code": "app.post('/vote4170',(req,res)=>{ save(req.body.choice4170); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4171,
    "code": "app.post('/vote4170',(req,res)=>{ const c=String(req.body.choice4170||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4172,
    "code": "const h4172=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4173,
    "code": "const h4172=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4174,
    "code": "app.get('/proxy4174',async(req,res)=>{ const r=await fetch(req.query.url4174); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4175,
    "code": "const {URL}=require('url'); app.get('/proxy4174',async(req,res)=>{ try{ const u=new URL(String(req.query.url4174||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4176,
    "code": "const token4176=jwt.sign({'id':u.id},'secret4176');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4177,
    "code": "const token4176=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4178,
    "code": "app.get('/open4178',(req,res)=>{ res.redirect(req.query.to4178); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4179,
    "code": "app.get('/open4178',(req,res)=>{ const t=String(req.query.to4178||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4180,
    "code": "router.get('/u4180', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4180); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4181,
    "code": "router.get('/u4180', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4180]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4182,
    "code": "app.post('/run4182',(req,res)=>{ require('child_process').exec('cat '+req.body.f4182,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4183,
    "code": "app.post('/run4182',(req,res)=>{ const f=String(req.body.f4182||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4184,
    "code": "app.get('/r4184',(req,res)=>{ res.redirect(req.query.to4184); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4185,
    "code": "app.get('/r4184',(req,res)=>{ const t=String(req.query.to4184||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4186,
    "code": "app.post('/cfg4186',(req,res)=>{ const c=eval('('+req.body.cfg4186+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4187,
    "code": "app.post('/cfg4186',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4186||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4188,
    "code": "app.post('/up4188',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4189,
    "code": "const pathu4188=require('path');app.post('/up4188',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4188.basename(f.name); f.mv(pathu4188.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4190,
    "code": "app.post('/vote4190',(req,res)=>{ save(req.body.choice4190); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4191,
    "code": "app.post('/vote4190',(req,res)=>{ const c=String(req.body.choice4190||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4192,
    "code": "const h4192=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4193,
    "code": "const h4192=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4194,
    "code": "app.get('/proxy4194',async(req,res)=>{ const r=await fetch(req.query.url4194); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4195,
    "code": "const {URL}=require('url'); app.get('/proxy4194',async(req,res)=>{ try{ const u=new URL(String(req.query.url4194||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4196,
    "code": "const token4196=jwt.sign({'id':u.id},'secret4196');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4197,
    "code": "const token4196=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4198,
    "code": "app.get('/open4198',(req,res)=>{ res.redirect(req.query.to4198); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4199,
    "code": "app.get('/open4198',(req,res)=>{ const t=String(req.query.to4198||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4200,
    "code": "router.get('/u4200', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4200); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4201,
    "code": "router.get('/u4200', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4200]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4202,
    "code": "app.post('/run4202',(req,res)=>{ require('child_process').exec('cat '+req.body.f4202,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4203,
    "code": "app.post('/run4202',(req,res)=>{ const f=String(req.body.f4202||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4204,
    "code": "app.get('/r4204',(req,res)=>{ res.redirect(req.query.to4204); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4205,
    "code": "app.get('/r4204',(req,res)=>{ const t=String(req.query.to4204||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4206,
    "code": "app.post('/cfg4206',(req,res)=>{ const c=eval('('+req.body.cfg4206+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4207,
    "code": "app.post('/cfg4206',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4206||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4208,
    "code": "app.post('/up4208',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4209,
    "code": "const pathu4208=require('path');app.post('/up4208',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4208.basename(f.name); f.mv(pathu4208.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4210,
    "code": "app.post('/vote4210',(req,res)=>{ save(req.body.choice4210); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4211,
    "code": "app.post('/vote4210',(req,res)=>{ const c=String(req.body.choice4210||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4212,
    "code": "const h4212=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4213,
    "code": "const h4212=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4214,
    "code": "app.get('/proxy4214',async(req,res)=>{ const r=await fetch(req.query.url4214); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4215,
    "code": "const {URL}=require('url'); app.get('/proxy4214',async(req,res)=>{ try{ const u=new URL(String(req.query.url4214||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4216,
    "code": "const token4216=jwt.sign({'id':u.id},'secret4216');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4217,
    "code": "const token4216=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4218,
    "code": "app.get('/open4218',(req,res)=>{ res.redirect(req.query.to4218); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4219,
    "code": "app.get('/open4218',(req,res)=>{ const t=String(req.query.to4218||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4220,
    "code": "router.get('/u4220', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4220); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4221,
    "code": "router.get('/u4220', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4220]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4222,
    "code": "app.post('/run4222',(req,res)=>{ require('child_process').exec('cat '+req.body.f4222,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4223,
    "code": "app.post('/run4222',(req,res)=>{ const f=String(req.body.f4222||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4224,
    "code": "app.get('/r4224',(req,res)=>{ res.redirect(req.query.to4224); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4225,
    "code": "app.get('/r4224',(req,res)=>{ const t=String(req.query.to4224||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4226,
    "code": "app.post('/cfg4226',(req,res)=>{ const c=eval('('+req.body.cfg4226+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4227,
    "code": "app.post('/cfg4226',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4226||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4228,
    "code": "app.post('/up4228',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4229,
    "code": "const pathu4228=require('path');app.post('/up4228',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4228.basename(f.name); f.mv(pathu4228.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4230,
    "code": "app.post('/vote4230',(req,res)=>{ save(req.body.choice4230); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4231,
    "code": "app.post('/vote4230',(req,res)=>{ const c=String(req.body.choice4230||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4232,
    "code": "const h4232=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4233,
    "code": "const h4232=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4234,
    "code": "app.get('/proxy4234',async(req,res)=>{ const r=await fetch(req.query.url4234); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4235,
    "code": "const {URL}=require('url'); app.get('/proxy4234',async(req,res)=>{ try{ const u=new URL(String(req.query.url4234||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4236,
    "code": "const token4236=jwt.sign({'id':u.id},'secret4236');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4237,
    "code": "const token4236=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4238,
    "code": "app.get('/open4238',(req,res)=>{ res.redirect(req.query.to4238); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4239,
    "code": "app.get('/open4238',(req,res)=>{ const t=String(req.query.to4238||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4240,
    "code": "router.get('/u4240', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4240); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4241,
    "code": "router.get('/u4240', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4240]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4242,
    "code": "app.post('/run4242',(req,res)=>{ require('child_process').exec('cat '+req.body.f4242,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4243,
    "code": "app.post('/run4242',(req,res)=>{ const f=String(req.body.f4242||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4244,
    "code": "app.get('/r4244',(req,res)=>{ res.redirect(req.query.to4244); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4245,
    "code": "app.get('/r4244',(req,res)=>{ const t=String(req.query.to4244||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4246,
    "code": "app.post('/cfg4246',(req,res)=>{ const c=eval('('+req.body.cfg4246+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4247,
    "code": "app.post('/cfg4246',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4246||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4248,
    "code": "app.post('/up4248',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4249,
    "code": "const pathu4248=require('path');app.post('/up4248',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4248.basename(f.name); f.mv(pathu4248.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4250,
    "code": "app.post('/vote4250',(req,res)=>{ save(req.body.choice4250); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4251,
    "code": "app.post('/vote4250',(req,res)=>{ const c=String(req.body.choice4250||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4252,
    "code": "const h4252=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4253,
    "code": "const h4252=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4254,
    "code": "app.get('/proxy4254',async(req,res)=>{ const r=await fetch(req.query.url4254); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4255,
    "code": "const {URL}=require('url'); app.get('/proxy4254',async(req,res)=>{ try{ const u=new URL(String(req.query.url4254||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4256,
    "code": "const token4256=jwt.sign({'id':u.id},'secret4256');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4257,
    "code": "const token4256=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4258,
    "code": "app.get('/open4258',(req,res)=>{ res.redirect(req.query.to4258); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4259,
    "code": "app.get('/open4258',(req,res)=>{ const t=String(req.query.to4258||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4260,
    "code": "router.get('/u4260', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4260); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4261,
    "code": "router.get('/u4260', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4260]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4262,
    "code": "app.post('/run4262',(req,res)=>{ require('child_process').exec('cat '+req.body.f4262,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4263,
    "code": "app.post('/run4262',(req,res)=>{ const f=String(req.body.f4262||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4264,
    "code": "app.get('/r4264',(req,res)=>{ res.redirect(req.query.to4264); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4265,
    "code": "app.get('/r4264',(req,res)=>{ const t=String(req.query.to4264||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4266,
    "code": "app.post('/cfg4266',(req,res)=>{ const c=eval('('+req.body.cfg4266+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4267,
    "code": "app.post('/cfg4266',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4266||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4268,
    "code": "app.post('/up4268',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4269,
    "code": "const pathu4268=require('path');app.post('/up4268',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4268.basename(f.name); f.mv(pathu4268.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4270,
    "code": "app.post('/vote4270',(req,res)=>{ save(req.body.choice4270); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4271,
    "code": "app.post('/vote4270',(req,res)=>{ const c=String(req.body.choice4270||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4272,
    "code": "const h4272=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4273,
    "code": "const h4272=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4274,
    "code": "app.get('/proxy4274',async(req,res)=>{ const r=await fetch(req.query.url4274); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4275,
    "code": "const {URL}=require('url'); app.get('/proxy4274',async(req,res)=>{ try{ const u=new URL(String(req.query.url4274||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4276,
    "code": "const token4276=jwt.sign({'id':u.id},'secret4276');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4277,
    "code": "const token4276=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4278,
    "code": "app.get('/open4278',(req,res)=>{ res.redirect(req.query.to4278); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4279,
    "code": "app.get('/open4278',(req,res)=>{ const t=String(req.query.to4278||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4280,
    "code": "router.get('/u4280', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4280); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4281,
    "code": "router.get('/u4280', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4280]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4282,
    "code": "app.post('/run4282',(req,res)=>{ require('child_process').exec('cat '+req.body.f4282,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4283,
    "code": "app.post('/run4282',(req,res)=>{ const f=String(req.body.f4282||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4284,
    "code": "app.get('/r4284',(req,res)=>{ res.redirect(req.query.to4284); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4285,
    "code": "app.get('/r4284',(req,res)=>{ const t=String(req.query.to4284||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4286,
    "code": "app.post('/cfg4286',(req,res)=>{ const c=eval('('+req.body.cfg4286+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4287,
    "code": "app.post('/cfg4286',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4286||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4288,
    "code": "app.post('/up4288',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4289,
    "code": "const pathu4288=require('path');app.post('/up4288',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4288.basename(f.name); f.mv(pathu4288.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4290,
    "code": "app.post('/vote4290',(req,res)=>{ save(req.body.choice4290); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4291,
    "code": "app.post('/vote4290',(req,res)=>{ const c=String(req.body.choice4290||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4292,
    "code": "const h4292=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4293,
    "code": "const h4292=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4294,
    "code": "app.get('/proxy4294',async(req,res)=>{ const r=await fetch(req.query.url4294); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4295,
    "code": "const {URL}=require('url'); app.get('/proxy4294',async(req,res)=>{ try{ const u=new URL(String(req.query.url4294||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4296,
    "code": "const token4296=jwt.sign({'id':u.id},'secret4296');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4297,
    "code": "const token4296=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4298,
    "code": "app.get('/open4298',(req,res)=>{ res.redirect(req.query.to4298); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4299,
    "code": "app.get('/open4298',(req,res)=>{ const t=String(req.query.to4298||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4300,
    "code": "router.get('/u4300', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4300); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4301,
    "code": "router.get('/u4300', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4300]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4302,
    "code": "app.post('/run4302',(req,res)=>{ require('child_process').exec('cat '+req.body.f4302,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4303,
    "code": "app.post('/run4302',(req,res)=>{ const f=String(req.body.f4302||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4304,
    "code": "app.get('/r4304',(req,res)=>{ res.redirect(req.query.to4304); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4305,
    "code": "app.get('/r4304',(req,res)=>{ const t=String(req.query.to4304||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4306,
    "code": "app.post('/cfg4306',(req,res)=>{ const c=eval('('+req.body.cfg4306+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4307,
    "code": "app.post('/cfg4306',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4306||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4308,
    "code": "app.post('/up4308',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4309,
    "code": "const pathu4308=require('path');app.post('/up4308',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4308.basename(f.name); f.mv(pathu4308.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4310,
    "code": "app.post('/vote4310',(req,res)=>{ save(req.body.choice4310); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4311,
    "code": "app.post('/vote4310',(req,res)=>{ const c=String(req.body.choice4310||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4312,
    "code": "const h4312=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4313,
    "code": "const h4312=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4314,
    "code": "app.get('/proxy4314',async(req,res)=>{ const r=await fetch(req.query.url4314); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4315,
    "code": "const {URL}=require('url'); app.get('/proxy4314',async(req,res)=>{ try{ const u=new URL(String(req.query.url4314||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4316,
    "code": "const token4316=jwt.sign({'id':u.id},'secret4316');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4317,
    "code": "const token4316=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4318,
    "code": "app.get('/open4318',(req,res)=>{ res.redirect(req.query.to4318); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4319,
    "code": "app.get('/open4318',(req,res)=>{ const t=String(req.query.to4318||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4320,
    "code": "router.get('/u4320', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4320); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4321,
    "code": "router.get('/u4320', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4320]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4322,
    "code": "app.post('/run4322',(req,res)=>{ require('child_process').exec('cat '+req.body.f4322,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4323,
    "code": "app.post('/run4322',(req,res)=>{ const f=String(req.body.f4322||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4324,
    "code": "app.get('/r4324',(req,res)=>{ res.redirect(req.query.to4324); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4325,
    "code": "app.get('/r4324',(req,res)=>{ const t=String(req.query.to4324||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4326,
    "code": "app.post('/cfg4326',(req,res)=>{ const c=eval('('+req.body.cfg4326+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4327,
    "code": "app.post('/cfg4326',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4326||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4328,
    "code": "app.post('/up4328',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4329,
    "code": "const pathu4328=require('path');app.post('/up4328',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4328.basename(f.name); f.mv(pathu4328.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4330,
    "code": "app.post('/vote4330',(req,res)=>{ save(req.body.choice4330); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4331,
    "code": "app.post('/vote4330',(req,res)=>{ const c=String(req.body.choice4330||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4332,
    "code": "const h4332=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4333,
    "code": "const h4332=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4334,
    "code": "app.get('/proxy4334',async(req,res)=>{ const r=await fetch(req.query.url4334); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4335,
    "code": "const {URL}=require('url'); app.get('/proxy4334',async(req,res)=>{ try{ const u=new URL(String(req.query.url4334||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4336,
    "code": "const token4336=jwt.sign({'id':u.id},'secret4336');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4337,
    "code": "const token4336=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4338,
    "code": "app.get('/open4338',(req,res)=>{ res.redirect(req.query.to4338); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4339,
    "code": "app.get('/open4338',(req,res)=>{ const t=String(req.query.to4338||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4340,
    "code": "router.get('/u4340', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4340); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4341,
    "code": "router.get('/u4340', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4340]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4342,
    "code": "app.post('/run4342',(req,res)=>{ require('child_process').exec('cat '+req.body.f4342,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4343,
    "code": "app.post('/run4342',(req,res)=>{ const f=String(req.body.f4342||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4344,
    "code": "app.get('/r4344',(req,res)=>{ res.redirect(req.query.to4344); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4345,
    "code": "app.get('/r4344',(req,res)=>{ const t=String(req.query.to4344||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4346,
    "code": "app.post('/cfg4346',(req,res)=>{ const c=eval('('+req.body.cfg4346+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4347,
    "code": "app.post('/cfg4346',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4346||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4348,
    "code": "app.post('/up4348',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4349,
    "code": "const pathu4348=require('path');app.post('/up4348',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4348.basename(f.name); f.mv(pathu4348.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4350,
    "code": "app.post('/vote4350',(req,res)=>{ save(req.body.choice4350); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4351,
    "code": "app.post('/vote4350',(req,res)=>{ const c=String(req.body.choice4350||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4352,
    "code": "const h4352=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4353,
    "code": "const h4352=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4354,
    "code": "app.get('/proxy4354',async(req,res)=>{ const r=await fetch(req.query.url4354); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4355,
    "code": "const {URL}=require('url'); app.get('/proxy4354',async(req,res)=>{ try{ const u=new URL(String(req.query.url4354||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4356,
    "code": "const token4356=jwt.sign({'id':u.id},'secret4356');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4357,
    "code": "const token4356=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4358,
    "code": "app.get('/open4358',(req,res)=>{ res.redirect(req.query.to4358); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4359,
    "code": "app.get('/open4358',(req,res)=>{ const t=String(req.query.to4358||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4360,
    "code": "router.get('/u4360', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4360); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4361,
    "code": "router.get('/u4360', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4360]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4362,
    "code": "app.post('/run4362',(req,res)=>{ require('child_process').exec('cat '+req.body.f4362,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4363,
    "code": "app.post('/run4362',(req,res)=>{ const f=String(req.body.f4362||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4364,
    "code": "app.get('/r4364',(req,res)=>{ res.redirect(req.query.to4364); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4365,
    "code": "app.get('/r4364',(req,res)=>{ const t=String(req.query.to4364||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4366,
    "code": "app.post('/cfg4366',(req,res)=>{ const c=eval('('+req.body.cfg4366+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4367,
    "code": "app.post('/cfg4366',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4366||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4368,
    "code": "app.post('/up4368',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4369,
    "code": "const pathu4368=require('path');app.post('/up4368',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4368.basename(f.name); f.mv(pathu4368.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4370,
    "code": "app.post('/vote4370',(req,res)=>{ save(req.body.choice4370); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4371,
    "code": "app.post('/vote4370',(req,res)=>{ const c=String(req.body.choice4370||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4372,
    "code": "const h4372=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4373,
    "code": "const h4372=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4374,
    "code": "app.get('/proxy4374',async(req,res)=>{ const r=await fetch(req.query.url4374); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4375,
    "code": "const {URL}=require('url'); app.get('/proxy4374',async(req,res)=>{ try{ const u=new URL(String(req.query.url4374||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4376,
    "code": "const token4376=jwt.sign({'id':u.id},'secret4376');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4377,
    "code": "const token4376=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4378,
    "code": "app.get('/open4378',(req,res)=>{ res.redirect(req.query.to4378); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4379,
    "code": "app.get('/open4378',(req,res)=>{ const t=String(req.query.to4378||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4380,
    "code": "router.get('/u4380', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4380); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4381,
    "code": "router.get('/u4380', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4380]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4382,
    "code": "app.post('/run4382',(req,res)=>{ require('child_process').exec('cat '+req.body.f4382,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4383,
    "code": "app.post('/run4382',(req,res)=>{ const f=String(req.body.f4382||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4384,
    "code": "app.get('/r4384',(req,res)=>{ res.redirect(req.query.to4384); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4385,
    "code": "app.get('/r4384',(req,res)=>{ const t=String(req.query.to4384||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4386,
    "code": "app.post('/cfg4386',(req,res)=>{ const c=eval('('+req.body.cfg4386+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4387,
    "code": "app.post('/cfg4386',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4386||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4388,
    "code": "app.post('/up4388',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4389,
    "code": "const pathu4388=require('path');app.post('/up4388',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4388.basename(f.name); f.mv(pathu4388.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4390,
    "code": "app.post('/vote4390',(req,res)=>{ save(req.body.choice4390); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4391,
    "code": "app.post('/vote4390',(req,res)=>{ const c=String(req.body.choice4390||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4392,
    "code": "const h4392=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4393,
    "code": "const h4392=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4394,
    "code": "app.get('/proxy4394',async(req,res)=>{ const r=await fetch(req.query.url4394); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4395,
    "code": "const {URL}=require('url'); app.get('/proxy4394',async(req,res)=>{ try{ const u=new URL(String(req.query.url4394||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4396,
    "code": "const token4396=jwt.sign({'id':u.id},'secret4396');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4397,
    "code": "const token4396=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4398,
    "code": "app.get('/open4398',(req,res)=>{ res.redirect(req.query.to4398); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4399,
    "code": "app.get('/open4398',(req,res)=>{ const t=String(req.query.to4398||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4400,
    "code": "router.get('/u4400', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4400); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4401,
    "code": "router.get('/u4400', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4400]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4402,
    "code": "app.post('/run4402',(req,res)=>{ require('child_process').exec('cat '+req.body.f4402,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4403,
    "code": "app.post('/run4402',(req,res)=>{ const f=String(req.body.f4402||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4404,
    "code": "app.get('/r4404',(req,res)=>{ res.redirect(req.query.to4404); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4405,
    "code": "app.get('/r4404',(req,res)=>{ const t=String(req.query.to4404||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4406,
    "code": "app.post('/cfg4406',(req,res)=>{ const c=eval('('+req.body.cfg4406+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4407,
    "code": "app.post('/cfg4406',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4406||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4408,
    "code": "app.post('/up4408',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4409,
    "code": "const pathu4408=require('path');app.post('/up4408',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4408.basename(f.name); f.mv(pathu4408.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4410,
    "code": "app.post('/vote4410',(req,res)=>{ save(req.body.choice4410); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4411,
    "code": "app.post('/vote4410',(req,res)=>{ const c=String(req.body.choice4410||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4412,
    "code": "const h4412=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4413,
    "code": "const h4412=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4414,
    "code": "app.get('/proxy4414',async(req,res)=>{ const r=await fetch(req.query.url4414); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4415,
    "code": "const {URL}=require('url'); app.get('/proxy4414',async(req,res)=>{ try{ const u=new URL(String(req.query.url4414||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4416,
    "code": "const token4416=jwt.sign({'id':u.id},'secret4416');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4417,
    "code": "const token4416=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4418,
    "code": "app.get('/open4418',(req,res)=>{ res.redirect(req.query.to4418); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4419,
    "code": "app.get('/open4418',(req,res)=>{ const t=String(req.query.to4418||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4420,
    "code": "router.get('/u4420', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4420); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4421,
    "code": "router.get('/u4420', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4420]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4422,
    "code": "app.post('/run4422',(req,res)=>{ require('child_process').exec('cat '+req.body.f4422,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4423,
    "code": "app.post('/run4422',(req,res)=>{ const f=String(req.body.f4422||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4424,
    "code": "app.get('/r4424',(req,res)=>{ res.redirect(req.query.to4424); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4425,
    "code": "app.get('/r4424',(req,res)=>{ const t=String(req.query.to4424||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4426,
    "code": "app.post('/cfg4426',(req,res)=>{ const c=eval('('+req.body.cfg4426+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4427,
    "code": "app.post('/cfg4426',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4426||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4428,
    "code": "app.post('/up4428',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4429,
    "code": "const pathu4428=require('path');app.post('/up4428',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4428.basename(f.name); f.mv(pathu4428.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4430,
    "code": "app.post('/vote4430',(req,res)=>{ save(req.body.choice4430); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4431,
    "code": "app.post('/vote4430',(req,res)=>{ const c=String(req.body.choice4430||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4432,
    "code": "const h4432=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4433,
    "code": "const h4432=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4434,
    "code": "app.get('/proxy4434',async(req,res)=>{ const r=await fetch(req.query.url4434); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4435,
    "code": "const {URL}=require('url'); app.get('/proxy4434',async(req,res)=>{ try{ const u=new URL(String(req.query.url4434||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4436,
    "code": "const token4436=jwt.sign({'id':u.id},'secret4436');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4437,
    "code": "const token4436=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4438,
    "code": "app.get('/open4438',(req,res)=>{ res.redirect(req.query.to4438); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4439,
    "code": "app.get('/open4438',(req,res)=>{ const t=String(req.query.to4438||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4440,
    "code": "router.get('/u4440', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4440); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4441,
    "code": "router.get('/u4440', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4440]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4442,
    "code": "app.post('/run4442',(req,res)=>{ require('child_process').exec('cat '+req.body.f4442,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4443,
    "code": "app.post('/run4442',(req,res)=>{ const f=String(req.body.f4442||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4444,
    "code": "app.get('/r4444',(req,res)=>{ res.redirect(req.query.to4444); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4445,
    "code": "app.get('/r4444',(req,res)=>{ const t=String(req.query.to4444||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4446,
    "code": "app.post('/cfg4446',(req,res)=>{ const c=eval('('+req.body.cfg4446+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4447,
    "code": "app.post('/cfg4446',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4446||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4448,
    "code": "app.post('/up4448',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4449,
    "code": "const pathu4448=require('path');app.post('/up4448',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4448.basename(f.name); f.mv(pathu4448.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4450,
    "code": "app.post('/vote4450',(req,res)=>{ save(req.body.choice4450); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4451,
    "code": "app.post('/vote4450',(req,res)=>{ const c=String(req.body.choice4450||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4452,
    "code": "const h4452=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4453,
    "code": "const h4452=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4454,
    "code": "app.get('/proxy4454',async(req,res)=>{ const r=await fetch(req.query.url4454); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4455,
    "code": "const {URL}=require('url'); app.get('/proxy4454',async(req,res)=>{ try{ const u=new URL(String(req.query.url4454||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4456,
    "code": "const token4456=jwt.sign({'id':u.id},'secret4456');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4457,
    "code": "const token4456=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4458,
    "code": "app.get('/open4458',(req,res)=>{ res.redirect(req.query.to4458); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4459,
    "code": "app.get('/open4458',(req,res)=>{ const t=String(req.query.to4458||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4460,
    "code": "router.get('/u4460', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4460); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4461,
    "code": "router.get('/u4460', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4460]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4462,
    "code": "app.post('/run4462',(req,res)=>{ require('child_process').exec('cat '+req.body.f4462,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4463,
    "code": "app.post('/run4462',(req,res)=>{ const f=String(req.body.f4462||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4464,
    "code": "app.get('/r4464',(req,res)=>{ res.redirect(req.query.to4464); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4465,
    "code": "app.get('/r4464',(req,res)=>{ const t=String(req.query.to4464||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4466,
    "code": "app.post('/cfg4466',(req,res)=>{ const c=eval('('+req.body.cfg4466+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4467,
    "code": "app.post('/cfg4466',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4466||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4468,
    "code": "app.post('/up4468',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4469,
    "code": "const pathu4468=require('path');app.post('/up4468',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4468.basename(f.name); f.mv(pathu4468.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4470,
    "code": "app.post('/vote4470',(req,res)=>{ save(req.body.choice4470); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4471,
    "code": "app.post('/vote4470',(req,res)=>{ const c=String(req.body.choice4470||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4472,
    "code": "const h4472=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4473,
    "code": "const h4472=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4474,
    "code": "app.get('/proxy4474',async(req,res)=>{ const r=await fetch(req.query.url4474); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4475,
    "code": "const {URL}=require('url'); app.get('/proxy4474',async(req,res)=>{ try{ const u=new URL(String(req.query.url4474||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4476,
    "code": "const token4476=jwt.sign({'id':u.id},'secret4476');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4477,
    "code": "const token4476=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4478,
    "code": "app.get('/open4478',(req,res)=>{ res.redirect(req.query.to4478); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4479,
    "code": "app.get('/open4478',(req,res)=>{ const t=String(req.query.to4478||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4480,
    "code": "router.get('/u4480', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4480); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4481,
    "code": "router.get('/u4480', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4480]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4482,
    "code": "app.post('/run4482',(req,res)=>{ require('child_process').exec('cat '+req.body.f4482,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4483,
    "code": "app.post('/run4482',(req,res)=>{ const f=String(req.body.f4482||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4484,
    "code": "app.get('/r4484',(req,res)=>{ res.redirect(req.query.to4484); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4485,
    "code": "app.get('/r4484',(req,res)=>{ const t=String(req.query.to4484||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4486,
    "code": "app.post('/cfg4486',(req,res)=>{ const c=eval('('+req.body.cfg4486+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4487,
    "code": "app.post('/cfg4486',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4486||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4488,
    "code": "app.post('/up4488',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4489,
    "code": "const pathu4488=require('path');app.post('/up4488',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4488.basename(f.name); f.mv(pathu4488.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4490,
    "code": "app.post('/vote4490',(req,res)=>{ save(req.body.choice4490); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4491,
    "code": "app.post('/vote4490',(req,res)=>{ const c=String(req.body.choice4490||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4492,
    "code": "const h4492=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4493,
    "code": "const h4492=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4494,
    "code": "app.get('/proxy4494',async(req,res)=>{ const r=await fetch(req.query.url4494); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4495,
    "code": "const {URL}=require('url'); app.get('/proxy4494',async(req,res)=>{ try{ const u=new URL(String(req.query.url4494||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4496,
    "code": "const token4496=jwt.sign({'id':u.id},'secret4496');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4497,
    "code": "const token4496=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4498,
    "code": "app.get('/open4498',(req,res)=>{ res.redirect(req.query.to4498); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4499,
    "code": "app.get('/open4498',(req,res)=>{ const t=String(req.query.to4498||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4500,
    "code": "router.get('/u4500', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4500); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4501,
    "code": "router.get('/u4500', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4500]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4502,
    "code": "app.post('/run4502',(req,res)=>{ require('child_process').exec('cat '+req.body.f4502,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4503,
    "code": "app.post('/run4502',(req,res)=>{ const f=String(req.body.f4502||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4504,
    "code": "app.get('/r4504',(req,res)=>{ res.redirect(req.query.to4504); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4505,
    "code": "app.get('/r4504',(req,res)=>{ const t=String(req.query.to4504||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4506,
    "code": "app.post('/cfg4506',(req,res)=>{ const c=eval('('+req.body.cfg4506+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4507,
    "code": "app.post('/cfg4506',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4506||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4508,
    "code": "app.post('/up4508',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4509,
    "code": "const pathu4508=require('path');app.post('/up4508',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4508.basename(f.name); f.mv(pathu4508.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4510,
    "code": "app.post('/vote4510',(req,res)=>{ save(req.body.choice4510); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4511,
    "code": "app.post('/vote4510',(req,res)=>{ const c=String(req.body.choice4510||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4512,
    "code": "const h4512=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4513,
    "code": "const h4512=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4514,
    "code": "app.get('/proxy4514',async(req,res)=>{ const r=await fetch(req.query.url4514); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4515,
    "code": "const {URL}=require('url'); app.get('/proxy4514',async(req,res)=>{ try{ const u=new URL(String(req.query.url4514||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4516,
    "code": "const token4516=jwt.sign({'id':u.id},'secret4516');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4517,
    "code": "const token4516=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4518,
    "code": "app.get('/open4518',(req,res)=>{ res.redirect(req.query.to4518); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4519,
    "code": "app.get('/open4518',(req,res)=>{ const t=String(req.query.to4518||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4520,
    "code": "router.get('/u4520', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4520); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4521,
    "code": "router.get('/u4520', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4520]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4522,
    "code": "app.post('/run4522',(req,res)=>{ require('child_process').exec('cat '+req.body.f4522,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4523,
    "code": "app.post('/run4522',(req,res)=>{ const f=String(req.body.f4522||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4524,
    "code": "app.get('/r4524',(req,res)=>{ res.redirect(req.query.to4524); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4525,
    "code": "app.get('/r4524',(req,res)=>{ const t=String(req.query.to4524||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4526,
    "code": "app.post('/cfg4526',(req,res)=>{ const c=eval('('+req.body.cfg4526+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4527,
    "code": "app.post('/cfg4526',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4526||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4528,
    "code": "app.post('/up4528',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4529,
    "code": "const pathu4528=require('path');app.post('/up4528',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4528.basename(f.name); f.mv(pathu4528.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4530,
    "code": "app.post('/vote4530',(req,res)=>{ save(req.body.choice4530); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4531,
    "code": "app.post('/vote4530',(req,res)=>{ const c=String(req.body.choice4530||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4532,
    "code": "const h4532=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4533,
    "code": "const h4532=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4534,
    "code": "app.get('/proxy4534',async(req,res)=>{ const r=await fetch(req.query.url4534); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4535,
    "code": "const {URL}=require('url'); app.get('/proxy4534',async(req,res)=>{ try{ const u=new URL(String(req.query.url4534||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4536,
    "code": "const token4536=jwt.sign({'id':u.id},'secret4536');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4537,
    "code": "const token4536=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4538,
    "code": "app.get('/open4538',(req,res)=>{ res.redirect(req.query.to4538); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4539,
    "code": "app.get('/open4538',(req,res)=>{ const t=String(req.query.to4538||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4540,
    "code": "router.get('/u4540', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4540); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4541,
    "code": "router.get('/u4540', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4540]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4542,
    "code": "app.post('/run4542',(req,res)=>{ require('child_process').exec('cat '+req.body.f4542,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4543,
    "code": "app.post('/run4542',(req,res)=>{ const f=String(req.body.f4542||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4544,
    "code": "app.get('/r4544',(req,res)=>{ res.redirect(req.query.to4544); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4545,
    "code": "app.get('/r4544',(req,res)=>{ const t=String(req.query.to4544||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4546,
    "code": "app.post('/cfg4546',(req,res)=>{ const c=eval('('+req.body.cfg4546+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4547,
    "code": "app.post('/cfg4546',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4546||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4548,
    "code": "app.post('/up4548',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4549,
    "code": "const pathu4548=require('path');app.post('/up4548',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4548.basename(f.name); f.mv(pathu4548.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4550,
    "code": "app.post('/vote4550',(req,res)=>{ save(req.body.choice4550); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4551,
    "code": "app.post('/vote4550',(req,res)=>{ const c=String(req.body.choice4550||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4552,
    "code": "const h4552=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4553,
    "code": "const h4552=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4554,
    "code": "app.get('/proxy4554',async(req,res)=>{ const r=await fetch(req.query.url4554); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4555,
    "code": "const {URL}=require('url'); app.get('/proxy4554',async(req,res)=>{ try{ const u=new URL(String(req.query.url4554||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4556,
    "code": "const token4556=jwt.sign({'id':u.id},'secret4556');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4557,
    "code": "const token4556=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4558,
    "code": "app.get('/open4558',(req,res)=>{ res.redirect(req.query.to4558); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4559,
    "code": "app.get('/open4558',(req,res)=>{ const t=String(req.query.to4558||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4560,
    "code": "router.get('/u4560', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4560); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4561,
    "code": "router.get('/u4560', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4560]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4562,
    "code": "app.post('/run4562',(req,res)=>{ require('child_process').exec('cat '+req.body.f4562,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4563,
    "code": "app.post('/run4562',(req,res)=>{ const f=String(req.body.f4562||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4564,
    "code": "app.get('/r4564',(req,res)=>{ res.redirect(req.query.to4564); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4565,
    "code": "app.get('/r4564',(req,res)=>{ const t=String(req.query.to4564||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4566,
    "code": "app.post('/cfg4566',(req,res)=>{ const c=eval('('+req.body.cfg4566+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4567,
    "code": "app.post('/cfg4566',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4566||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4568,
    "code": "app.post('/up4568',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4569,
    "code": "const pathu4568=require('path');app.post('/up4568',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4568.basename(f.name); f.mv(pathu4568.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4570,
    "code": "app.post('/vote4570',(req,res)=>{ save(req.body.choice4570); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4571,
    "code": "app.post('/vote4570',(req,res)=>{ const c=String(req.body.choice4570||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4572,
    "code": "const h4572=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4573,
    "code": "const h4572=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4574,
    "code": "app.get('/proxy4574',async(req,res)=>{ const r=await fetch(req.query.url4574); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4575,
    "code": "const {URL}=require('url'); app.get('/proxy4574',async(req,res)=>{ try{ const u=new URL(String(req.query.url4574||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4576,
    "code": "const token4576=jwt.sign({'id':u.id},'secret4576');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4577,
    "code": "const token4576=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4578,
    "code": "app.get('/open4578',(req,res)=>{ res.redirect(req.query.to4578); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4579,
    "code": "app.get('/open4578',(req,res)=>{ const t=String(req.query.to4578||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4580,
    "code": "router.get('/u4580', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4580); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4581,
    "code": "router.get('/u4580', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4580]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4582,
    "code": "app.post('/run4582',(req,res)=>{ require('child_process').exec('cat '+req.body.f4582,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4583,
    "code": "app.post('/run4582',(req,res)=>{ const f=String(req.body.f4582||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4584,
    "code": "app.get('/r4584',(req,res)=>{ res.redirect(req.query.to4584); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4585,
    "code": "app.get('/r4584',(req,res)=>{ const t=String(req.query.to4584||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4586,
    "code": "app.post('/cfg4586',(req,res)=>{ const c=eval('('+req.body.cfg4586+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4587,
    "code": "app.post('/cfg4586',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4586||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4588,
    "code": "app.post('/up4588',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4589,
    "code": "const pathu4588=require('path');app.post('/up4588',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4588.basename(f.name); f.mv(pathu4588.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4590,
    "code": "app.post('/vote4590',(req,res)=>{ save(req.body.choice4590); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4591,
    "code": "app.post('/vote4590',(req,res)=>{ const c=String(req.body.choice4590||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4592,
    "code": "const h4592=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4593,
    "code": "const h4592=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4594,
    "code": "app.get('/proxy4594',async(req,res)=>{ const r=await fetch(req.query.url4594); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4595,
    "code": "const {URL}=require('url'); app.get('/proxy4594',async(req,res)=>{ try{ const u=new URL(String(req.query.url4594||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4596,
    "code": "const token4596=jwt.sign({'id':u.id},'secret4596');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4597,
    "code": "const token4596=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4598,
    "code": "app.get('/open4598',(req,res)=>{ res.redirect(req.query.to4598); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4599,
    "code": "app.get('/open4598',(req,res)=>{ const t=String(req.query.to4598||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4600,
    "code": "router.get('/u4600', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4600); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4601,
    "code": "router.get('/u4600', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4600]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4602,
    "code": "app.post('/run4602',(req,res)=>{ require('child_process').exec('cat '+req.body.f4602,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4603,
    "code": "app.post('/run4602',(req,res)=>{ const f=String(req.body.f4602||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4604,
    "code": "app.get('/r4604',(req,res)=>{ res.redirect(req.query.to4604); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4605,
    "code": "app.get('/r4604',(req,res)=>{ const t=String(req.query.to4604||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4606,
    "code": "app.post('/cfg4606',(req,res)=>{ const c=eval('('+req.body.cfg4606+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4607,
    "code": "app.post('/cfg4606',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4606||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4608,
    "code": "app.post('/up4608',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4609,
    "code": "const pathu4608=require('path');app.post('/up4608',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4608.basename(f.name); f.mv(pathu4608.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4610,
    "code": "app.post('/vote4610',(req,res)=>{ save(req.body.choice4610); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4611,
    "code": "app.post('/vote4610',(req,res)=>{ const c=String(req.body.choice4610||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4612,
    "code": "const h4612=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4613,
    "code": "const h4612=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4614,
    "code": "app.get('/proxy4614',async(req,res)=>{ const r=await fetch(req.query.url4614); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4615,
    "code": "const {URL}=require('url'); app.get('/proxy4614',async(req,res)=>{ try{ const u=new URL(String(req.query.url4614||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4616,
    "code": "const token4616=jwt.sign({'id':u.id},'secret4616');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4617,
    "code": "const token4616=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4618,
    "code": "app.get('/open4618',(req,res)=>{ res.redirect(req.query.to4618); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4619,
    "code": "app.get('/open4618',(req,res)=>{ const t=String(req.query.to4618||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4620,
    "code": "router.get('/u4620', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4620); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4621,
    "code": "router.get('/u4620', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4620]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4622,
    "code": "app.post('/run4622',(req,res)=>{ require('child_process').exec('cat '+req.body.f4622,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4623,
    "code": "app.post('/run4622',(req,res)=>{ const f=String(req.body.f4622||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4624,
    "code": "app.get('/r4624',(req,res)=>{ res.redirect(req.query.to4624); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4625,
    "code": "app.get('/r4624',(req,res)=>{ const t=String(req.query.to4624||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4626,
    "code": "app.post('/cfg4626',(req,res)=>{ const c=eval('('+req.body.cfg4626+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4627,
    "code": "app.post('/cfg4626',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4626||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4628,
    "code": "app.post('/up4628',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4629,
    "code": "const pathu4628=require('path');app.post('/up4628',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4628.basename(f.name); f.mv(pathu4628.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4630,
    "code": "app.post('/vote4630',(req,res)=>{ save(req.body.choice4630); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4631,
    "code": "app.post('/vote4630',(req,res)=>{ const c=String(req.body.choice4630||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4632,
    "code": "const h4632=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4633,
    "code": "const h4632=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4634,
    "code": "app.get('/proxy4634',async(req,res)=>{ const r=await fetch(req.query.url4634); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4635,
    "code": "const {URL}=require('url'); app.get('/proxy4634',async(req,res)=>{ try{ const u=new URL(String(req.query.url4634||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4636,
    "code": "const token4636=jwt.sign({'id':u.id},'secret4636');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4637,
    "code": "const token4636=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4638,
    "code": "app.get('/open4638',(req,res)=>{ res.redirect(req.query.to4638); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4639,
    "code": "app.get('/open4638',(req,res)=>{ const t=String(req.query.to4638||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4640,
    "code": "router.get('/u4640', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4640); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4641,
    "code": "router.get('/u4640', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4640]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4642,
    "code": "app.post('/run4642',(req,res)=>{ require('child_process').exec('cat '+req.body.f4642,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4643,
    "code": "app.post('/run4642',(req,res)=>{ const f=String(req.body.f4642||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4644,
    "code": "app.get('/r4644',(req,res)=>{ res.redirect(req.query.to4644); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4645,
    "code": "app.get('/r4644',(req,res)=>{ const t=String(req.query.to4644||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4646,
    "code": "app.post('/cfg4646',(req,res)=>{ const c=eval('('+req.body.cfg4646+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4647,
    "code": "app.post('/cfg4646',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4646||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4648,
    "code": "app.post('/up4648',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4649,
    "code": "const pathu4648=require('path');app.post('/up4648',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4648.basename(f.name); f.mv(pathu4648.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4650,
    "code": "app.post('/vote4650',(req,res)=>{ save(req.body.choice4650); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4651,
    "code": "app.post('/vote4650',(req,res)=>{ const c=String(req.body.choice4650||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4652,
    "code": "const h4652=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4653,
    "code": "const h4652=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4654,
    "code": "app.get('/proxy4654',async(req,res)=>{ const r=await fetch(req.query.url4654); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4655,
    "code": "const {URL}=require('url'); app.get('/proxy4654',async(req,res)=>{ try{ const u=new URL(String(req.query.url4654||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4656,
    "code": "const token4656=jwt.sign({'id':u.id},'secret4656');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4657,
    "code": "const token4656=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4658,
    "code": "app.get('/open4658',(req,res)=>{ res.redirect(req.query.to4658); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4659,
    "code": "app.get('/open4658',(req,res)=>{ const t=String(req.query.to4658||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4660,
    "code": "router.get('/u4660', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4660); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4661,
    "code": "router.get('/u4660', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4660]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4662,
    "code": "app.post('/run4662',(req,res)=>{ require('child_process').exec('cat '+req.body.f4662,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4663,
    "code": "app.post('/run4662',(req,res)=>{ const f=String(req.body.f4662||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4664,
    "code": "app.get('/r4664',(req,res)=>{ res.redirect(req.query.to4664); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4665,
    "code": "app.get('/r4664',(req,res)=>{ const t=String(req.query.to4664||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4666,
    "code": "app.post('/cfg4666',(req,res)=>{ const c=eval('('+req.body.cfg4666+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4667,
    "code": "app.post('/cfg4666',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4666||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4668,
    "code": "app.post('/up4668',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4669,
    "code": "const pathu4668=require('path');app.post('/up4668',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4668.basename(f.name); f.mv(pathu4668.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4670,
    "code": "app.post('/vote4670',(req,res)=>{ save(req.body.choice4670); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4671,
    "code": "app.post('/vote4670',(req,res)=>{ const c=String(req.body.choice4670||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4672,
    "code": "const h4672=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4673,
    "code": "const h4672=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4674,
    "code": "app.get('/proxy4674',async(req,res)=>{ const r=await fetch(req.query.url4674); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4675,
    "code": "const {URL}=require('url'); app.get('/proxy4674',async(req,res)=>{ try{ const u=new URL(String(req.query.url4674||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4676,
    "code": "const token4676=jwt.sign({'id':u.id},'secret4676');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4677,
    "code": "const token4676=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4678,
    "code": "app.get('/open4678',(req,res)=>{ res.redirect(req.query.to4678); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4679,
    "code": "app.get('/open4678',(req,res)=>{ const t=String(req.query.to4678||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4680,
    "code": "router.get('/u4680', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4680); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4681,
    "code": "router.get('/u4680', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4680]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4682,
    "code": "app.post('/run4682',(req,res)=>{ require('child_process').exec('cat '+req.body.f4682,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4683,
    "code": "app.post('/run4682',(req,res)=>{ const f=String(req.body.f4682||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4684,
    "code": "app.get('/r4684',(req,res)=>{ res.redirect(req.query.to4684); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4685,
    "code": "app.get('/r4684',(req,res)=>{ const t=String(req.query.to4684||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4686,
    "code": "app.post('/cfg4686',(req,res)=>{ const c=eval('('+req.body.cfg4686+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4687,
    "code": "app.post('/cfg4686',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4686||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4688,
    "code": "app.post('/up4688',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4689,
    "code": "const pathu4688=require('path');app.post('/up4688',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4688.basename(f.name); f.mv(pathu4688.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4690,
    "code": "app.post('/vote4690',(req,res)=>{ save(req.body.choice4690); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4691,
    "code": "app.post('/vote4690',(req,res)=>{ const c=String(req.body.choice4690||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4692,
    "code": "const h4692=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4693,
    "code": "const h4692=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4694,
    "code": "app.get('/proxy4694',async(req,res)=>{ const r=await fetch(req.query.url4694); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4695,
    "code": "const {URL}=require('url'); app.get('/proxy4694',async(req,res)=>{ try{ const u=new URL(String(req.query.url4694||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4696,
    "code": "const token4696=jwt.sign({'id':u.id},'secret4696');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4697,
    "code": "const token4696=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4698,
    "code": "app.get('/open4698',(req,res)=>{ res.redirect(req.query.to4698); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4699,
    "code": "app.get('/open4698',(req,res)=>{ const t=String(req.query.to4698||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4700,
    "code": "router.get('/u4700', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4700); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4701,
    "code": "router.get('/u4700', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4700]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4702,
    "code": "app.post('/run4702',(req,res)=>{ require('child_process').exec('cat '+req.body.f4702,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4703,
    "code": "app.post('/run4702',(req,res)=>{ const f=String(req.body.f4702||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4704,
    "code": "app.get('/r4704',(req,res)=>{ res.redirect(req.query.to4704); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4705,
    "code": "app.get('/r4704',(req,res)=>{ const t=String(req.query.to4704||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4706,
    "code": "app.post('/cfg4706',(req,res)=>{ const c=eval('('+req.body.cfg4706+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4707,
    "code": "app.post('/cfg4706',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4706||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4708,
    "code": "app.post('/up4708',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4709,
    "code": "const pathu4708=require('path');app.post('/up4708',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4708.basename(f.name); f.mv(pathu4708.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4710,
    "code": "app.post('/vote4710',(req,res)=>{ save(req.body.choice4710); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4711,
    "code": "app.post('/vote4710',(req,res)=>{ const c=String(req.body.choice4710||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4712,
    "code": "const h4712=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4713,
    "code": "const h4712=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4714,
    "code": "app.get('/proxy4714',async(req,res)=>{ const r=await fetch(req.query.url4714); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4715,
    "code": "const {URL}=require('url'); app.get('/proxy4714',async(req,res)=>{ try{ const u=new URL(String(req.query.url4714||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4716,
    "code": "const token4716=jwt.sign({'id':u.id},'secret4716');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4717,
    "code": "const token4716=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4718,
    "code": "app.get('/open4718',(req,res)=>{ res.redirect(req.query.to4718); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4719,
    "code": "app.get('/open4718',(req,res)=>{ const t=String(req.query.to4718||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4720,
    "code": "router.get('/u4720', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4720); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4721,
    "code": "router.get('/u4720', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4720]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4722,
    "code": "app.post('/run4722',(req,res)=>{ require('child_process').exec('cat '+req.body.f4722,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4723,
    "code": "app.post('/run4722',(req,res)=>{ const f=String(req.body.f4722||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4724,
    "code": "app.get('/r4724',(req,res)=>{ res.redirect(req.query.to4724); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4725,
    "code": "app.get('/r4724',(req,res)=>{ const t=String(req.query.to4724||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4726,
    "code": "app.post('/cfg4726',(req,res)=>{ const c=eval('('+req.body.cfg4726+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4727,
    "code": "app.post('/cfg4726',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4726||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4728,
    "code": "app.post('/up4728',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4729,
    "code": "const pathu4728=require('path');app.post('/up4728',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4728.basename(f.name); f.mv(pathu4728.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4730,
    "code": "app.post('/vote4730',(req,res)=>{ save(req.body.choice4730); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4731,
    "code": "app.post('/vote4730',(req,res)=>{ const c=String(req.body.choice4730||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4732,
    "code": "const h4732=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4733,
    "code": "const h4732=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4734,
    "code": "app.get('/proxy4734',async(req,res)=>{ const r=await fetch(req.query.url4734); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4735,
    "code": "const {URL}=require('url'); app.get('/proxy4734',async(req,res)=>{ try{ const u=new URL(String(req.query.url4734||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4736,
    "code": "const token4736=jwt.sign({'id':u.id},'secret4736');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4737,
    "code": "const token4736=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4738,
    "code": "app.get('/open4738',(req,res)=>{ res.redirect(req.query.to4738); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4739,
    "code": "app.get('/open4738',(req,res)=>{ const t=String(req.query.to4738||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4740,
    "code": "router.get('/u4740', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4740); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4741,
    "code": "router.get('/u4740', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4740]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4742,
    "code": "app.post('/run4742',(req,res)=>{ require('child_process').exec('cat '+req.body.f4742,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4743,
    "code": "app.post('/run4742',(req,res)=>{ const f=String(req.body.f4742||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4744,
    "code": "app.get('/r4744',(req,res)=>{ res.redirect(req.query.to4744); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4745,
    "code": "app.get('/r4744',(req,res)=>{ const t=String(req.query.to4744||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4746,
    "code": "app.post('/cfg4746',(req,res)=>{ const c=eval('('+req.body.cfg4746+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4747,
    "code": "app.post('/cfg4746',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4746||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4748,
    "code": "app.post('/up4748',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4749,
    "code": "const pathu4748=require('path');app.post('/up4748',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4748.basename(f.name); f.mv(pathu4748.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4750,
    "code": "app.post('/vote4750',(req,res)=>{ save(req.body.choice4750); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4751,
    "code": "app.post('/vote4750',(req,res)=>{ const c=String(req.body.choice4750||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4752,
    "code": "const h4752=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4753,
    "code": "const h4752=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4754,
    "code": "app.get('/proxy4754',async(req,res)=>{ const r=await fetch(req.query.url4754); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4755,
    "code": "const {URL}=require('url'); app.get('/proxy4754',async(req,res)=>{ try{ const u=new URL(String(req.query.url4754||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4756,
    "code": "const token4756=jwt.sign({'id':u.id},'secret4756');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4757,
    "code": "const token4756=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4758,
    "code": "app.get('/open4758',(req,res)=>{ res.redirect(req.query.to4758); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4759,
    "code": "app.get('/open4758',(req,res)=>{ const t=String(req.query.to4758||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4760,
    "code": "router.get('/u4760', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4760); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4761,
    "code": "router.get('/u4760', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4760]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4762,
    "code": "app.post('/run4762',(req,res)=>{ require('child_process').exec('cat '+req.body.f4762,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4763,
    "code": "app.post('/run4762',(req,res)=>{ const f=String(req.body.f4762||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4764,
    "code": "app.get('/r4764',(req,res)=>{ res.redirect(req.query.to4764); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4765,
    "code": "app.get('/r4764',(req,res)=>{ const t=String(req.query.to4764||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4766,
    "code": "app.post('/cfg4766',(req,res)=>{ const c=eval('('+req.body.cfg4766+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4767,
    "code": "app.post('/cfg4766',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4766||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4768,
    "code": "app.post('/up4768',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4769,
    "code": "const pathu4768=require('path');app.post('/up4768',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4768.basename(f.name); f.mv(pathu4768.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4770,
    "code": "app.post('/vote4770',(req,res)=>{ save(req.body.choice4770); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4771,
    "code": "app.post('/vote4770',(req,res)=>{ const c=String(req.body.choice4770||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4772,
    "code": "const h4772=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4773,
    "code": "const h4772=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4774,
    "code": "app.get('/proxy4774',async(req,res)=>{ const r=await fetch(req.query.url4774); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4775,
    "code": "const {URL}=require('url'); app.get('/proxy4774',async(req,res)=>{ try{ const u=new URL(String(req.query.url4774||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4776,
    "code": "const token4776=jwt.sign({'id':u.id},'secret4776');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4777,
    "code": "const token4776=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4778,
    "code": "app.get('/open4778',(req,res)=>{ res.redirect(req.query.to4778); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4779,
    "code": "app.get('/open4778',(req,res)=>{ const t=String(req.query.to4778||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4780,
    "code": "router.get('/u4780', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4780); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4781,
    "code": "router.get('/u4780', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4780]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4782,
    "code": "app.post('/run4782',(req,res)=>{ require('child_process').exec('cat '+req.body.f4782,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4783,
    "code": "app.post('/run4782',(req,res)=>{ const f=String(req.body.f4782||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4784,
    "code": "app.get('/r4784',(req,res)=>{ res.redirect(req.query.to4784); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4785,
    "code": "app.get('/r4784',(req,res)=>{ const t=String(req.query.to4784||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4786,
    "code": "app.post('/cfg4786',(req,res)=>{ const c=eval('('+req.body.cfg4786+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4787,
    "code": "app.post('/cfg4786',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4786||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4788,
    "code": "app.post('/up4788',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4789,
    "code": "const pathu4788=require('path');app.post('/up4788',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4788.basename(f.name); f.mv(pathu4788.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4790,
    "code": "app.post('/vote4790',(req,res)=>{ save(req.body.choice4790); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4791,
    "code": "app.post('/vote4790',(req,res)=>{ const c=String(req.body.choice4790||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4792,
    "code": "const h4792=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4793,
    "code": "const h4792=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4794,
    "code": "app.get('/proxy4794',async(req,res)=>{ const r=await fetch(req.query.url4794); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4795,
    "code": "const {URL}=require('url'); app.get('/proxy4794',async(req,res)=>{ try{ const u=new URL(String(req.query.url4794||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4796,
    "code": "const token4796=jwt.sign({'id':u.id},'secret4796');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4797,
    "code": "const token4796=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4798,
    "code": "app.get('/open4798',(req,res)=>{ res.redirect(req.query.to4798); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4799,
    "code": "app.get('/open4798',(req,res)=>{ const t=String(req.query.to4798||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4800,
    "code": "router.get('/u4800', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4800); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4801,
    "code": "router.get('/u4800', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4800]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4802,
    "code": "app.post('/run4802',(req,res)=>{ require('child_process').exec('cat '+req.body.f4802,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4803,
    "code": "app.post('/run4802',(req,res)=>{ const f=String(req.body.f4802||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4804,
    "code": "app.get('/r4804',(req,res)=>{ res.redirect(req.query.to4804); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4805,
    "code": "app.get('/r4804',(req,res)=>{ const t=String(req.query.to4804||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4806,
    "code": "app.post('/cfg4806',(req,res)=>{ const c=eval('('+req.body.cfg4806+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4807,
    "code": "app.post('/cfg4806',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4806||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4808,
    "code": "app.post('/up4808',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4809,
    "code": "const pathu4808=require('path');app.post('/up4808',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4808.basename(f.name); f.mv(pathu4808.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4810,
    "code": "app.post('/vote4810',(req,res)=>{ save(req.body.choice4810); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4811,
    "code": "app.post('/vote4810',(req,res)=>{ const c=String(req.body.choice4810||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4812,
    "code": "const h4812=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4813,
    "code": "const h4812=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4814,
    "code": "app.get('/proxy4814',async(req,res)=>{ const r=await fetch(req.query.url4814); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4815,
    "code": "const {URL}=require('url'); app.get('/proxy4814',async(req,res)=>{ try{ const u=new URL(String(req.query.url4814||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4816,
    "code": "const token4816=jwt.sign({'id':u.id},'secret4816');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4817,
    "code": "const token4816=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4818,
    "code": "app.get('/open4818',(req,res)=>{ res.redirect(req.query.to4818); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4819,
    "code": "app.get('/open4818',(req,res)=>{ const t=String(req.query.to4818||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4820,
    "code": "router.get('/u4820', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4820); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4821,
    "code": "router.get('/u4820', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4820]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4822,
    "code": "app.post('/run4822',(req,res)=>{ require('child_process').exec('cat '+req.body.f4822,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4823,
    "code": "app.post('/run4822',(req,res)=>{ const f=String(req.body.f4822||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4824,
    "code": "app.get('/r4824',(req,res)=>{ res.redirect(req.query.to4824); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4825,
    "code": "app.get('/r4824',(req,res)=>{ const t=String(req.query.to4824||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4826,
    "code": "app.post('/cfg4826',(req,res)=>{ const c=eval('('+req.body.cfg4826+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4827,
    "code": "app.post('/cfg4826',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4826||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4828,
    "code": "app.post('/up4828',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4829,
    "code": "const pathu4828=require('path');app.post('/up4828',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4828.basename(f.name); f.mv(pathu4828.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4830,
    "code": "app.post('/vote4830',(req,res)=>{ save(req.body.choice4830); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4831,
    "code": "app.post('/vote4830',(req,res)=>{ const c=String(req.body.choice4830||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4832,
    "code": "const h4832=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4833,
    "code": "const h4832=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4834,
    "code": "app.get('/proxy4834',async(req,res)=>{ const r=await fetch(req.query.url4834); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4835,
    "code": "const {URL}=require('url'); app.get('/proxy4834',async(req,res)=>{ try{ const u=new URL(String(req.query.url4834||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4836,
    "code": "const token4836=jwt.sign({'id':u.id},'secret4836');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4837,
    "code": "const token4836=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4838,
    "code": "app.get('/open4838',(req,res)=>{ res.redirect(req.query.to4838); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4839,
    "code": "app.get('/open4838',(req,res)=>{ const t=String(req.query.to4838||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4840,
    "code": "router.get('/u4840', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4840); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4841,
    "code": "router.get('/u4840', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4840]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4842,
    "code": "app.post('/run4842',(req,res)=>{ require('child_process').exec('cat '+req.body.f4842,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4843,
    "code": "app.post('/run4842',(req,res)=>{ const f=String(req.body.f4842||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4844,
    "code": "app.get('/r4844',(req,res)=>{ res.redirect(req.query.to4844); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4845,
    "code": "app.get('/r4844',(req,res)=>{ const t=String(req.query.to4844||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4846,
    "code": "app.post('/cfg4846',(req,res)=>{ const c=eval('('+req.body.cfg4846+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4847,
    "code": "app.post('/cfg4846',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4846||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4848,
    "code": "app.post('/up4848',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4849,
    "code": "const pathu4848=require('path');app.post('/up4848',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4848.basename(f.name); f.mv(pathu4848.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4850,
    "code": "app.post('/vote4850',(req,res)=>{ save(req.body.choice4850); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4851,
    "code": "app.post('/vote4850',(req,res)=>{ const c=String(req.body.choice4850||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4852,
    "code": "const h4852=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4853,
    "code": "const h4852=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4854,
    "code": "app.get('/proxy4854',async(req,res)=>{ const r=await fetch(req.query.url4854); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4855,
    "code": "const {URL}=require('url'); app.get('/proxy4854',async(req,res)=>{ try{ const u=new URL(String(req.query.url4854||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4856,
    "code": "const token4856=jwt.sign({'id':u.id},'secret4856');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4857,
    "code": "const token4856=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4858,
    "code": "app.get('/open4858',(req,res)=>{ res.redirect(req.query.to4858); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4859,
    "code": "app.get('/open4858',(req,res)=>{ const t=String(req.query.to4858||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4860,
    "code": "router.get('/u4860', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4860); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4861,
    "code": "router.get('/u4860', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4860]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4862,
    "code": "app.post('/run4862',(req,res)=>{ require('child_process').exec('cat '+req.body.f4862,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4863,
    "code": "app.post('/run4862',(req,res)=>{ const f=String(req.body.f4862||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4864,
    "code": "app.get('/r4864',(req,res)=>{ res.redirect(req.query.to4864); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4865,
    "code": "app.get('/r4864',(req,res)=>{ const t=String(req.query.to4864||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4866,
    "code": "app.post('/cfg4866',(req,res)=>{ const c=eval('('+req.body.cfg4866+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4867,
    "code": "app.post('/cfg4866',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4866||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4868,
    "code": "app.post('/up4868',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4869,
    "code": "const pathu4868=require('path');app.post('/up4868',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4868.basename(f.name); f.mv(pathu4868.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4870,
    "code": "app.post('/vote4870',(req,res)=>{ save(req.body.choice4870); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4871,
    "code": "app.post('/vote4870',(req,res)=>{ const c=String(req.body.choice4870||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4872,
    "code": "const h4872=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4873,
    "code": "const h4872=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4874,
    "code": "app.get('/proxy4874',async(req,res)=>{ const r=await fetch(req.query.url4874); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4875,
    "code": "const {URL}=require('url'); app.get('/proxy4874',async(req,res)=>{ try{ const u=new URL(String(req.query.url4874||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4876,
    "code": "const token4876=jwt.sign({'id':u.id},'secret4876');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4877,
    "code": "const token4876=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4878,
    "code": "app.get('/open4878',(req,res)=>{ res.redirect(req.query.to4878); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4879,
    "code": "app.get('/open4878',(req,res)=>{ const t=String(req.query.to4878||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4880,
    "code": "router.get('/u4880', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4880); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4881,
    "code": "router.get('/u4880', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4880]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4882,
    "code": "app.post('/run4882',(req,res)=>{ require('child_process').exec('cat '+req.body.f4882,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4883,
    "code": "app.post('/run4882',(req,res)=>{ const f=String(req.body.f4882||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4884,
    "code": "app.get('/r4884',(req,res)=>{ res.redirect(req.query.to4884); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4885,
    "code": "app.get('/r4884',(req,res)=>{ const t=String(req.query.to4884||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4886,
    "code": "app.post('/cfg4886',(req,res)=>{ const c=eval('('+req.body.cfg4886+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4887,
    "code": "app.post('/cfg4886',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4886||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4888,
    "code": "app.post('/up4888',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4889,
    "code": "const pathu4888=require('path');app.post('/up4888',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4888.basename(f.name); f.mv(pathu4888.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4890,
    "code": "app.post('/vote4890',(req,res)=>{ save(req.body.choice4890); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4891,
    "code": "app.post('/vote4890',(req,res)=>{ const c=String(req.body.choice4890||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4892,
    "code": "const h4892=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4893,
    "code": "const h4892=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4894,
    "code": "app.get('/proxy4894',async(req,res)=>{ const r=await fetch(req.query.url4894); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4895,
    "code": "const {URL}=require('url'); app.get('/proxy4894',async(req,res)=>{ try{ const u=new URL(String(req.query.url4894||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4896,
    "code": "const token4896=jwt.sign({'id':u.id},'secret4896');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4897,
    "code": "const token4896=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4898,
    "code": "app.get('/open4898',(req,res)=>{ res.redirect(req.query.to4898); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4899,
    "code": "app.get('/open4898',(req,res)=>{ const t=String(req.query.to4898||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4900,
    "code": "router.get('/u4900', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4900); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4901,
    "code": "router.get('/u4900', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4900]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4902,
    "code": "app.post('/run4902',(req,res)=>{ require('child_process').exec('cat '+req.body.f4902,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4903,
    "code": "app.post('/run4902',(req,res)=>{ const f=String(req.body.f4902||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4904,
    "code": "app.get('/r4904',(req,res)=>{ res.redirect(req.query.to4904); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4905,
    "code": "app.get('/r4904',(req,res)=>{ const t=String(req.query.to4904||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4906,
    "code": "app.post('/cfg4906',(req,res)=>{ const c=eval('('+req.body.cfg4906+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4907,
    "code": "app.post('/cfg4906',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4906||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4908,
    "code": "app.post('/up4908',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4909,
    "code": "const pathu4908=require('path');app.post('/up4908',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4908.basename(f.name); f.mv(pathu4908.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4910,
    "code": "app.post('/vote4910',(req,res)=>{ save(req.body.choice4910); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4911,
    "code": "app.post('/vote4910',(req,res)=>{ const c=String(req.body.choice4910||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4912,
    "code": "const h4912=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4913,
    "code": "const h4912=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4914,
    "code": "app.get('/proxy4914',async(req,res)=>{ const r=await fetch(req.query.url4914); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4915,
    "code": "const {URL}=require('url'); app.get('/proxy4914',async(req,res)=>{ try{ const u=new URL(String(req.query.url4914||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4916,
    "code": "const token4916=jwt.sign({'id':u.id},'secret4916');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4917,
    "code": "const token4916=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4918,
    "code": "app.get('/open4918',(req,res)=>{ res.redirect(req.query.to4918); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4919,
    "code": "app.get('/open4918',(req,res)=>{ const t=String(req.query.to4918||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4920,
    "code": "router.get('/u4920', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4920); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4921,
    "code": "router.get('/u4920', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4920]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4922,
    "code": "app.post('/run4922',(req,res)=>{ require('child_process').exec('cat '+req.body.f4922,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4923,
    "code": "app.post('/run4922',(req,res)=>{ const f=String(req.body.f4922||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4924,
    "code": "app.get('/r4924',(req,res)=>{ res.redirect(req.query.to4924); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4925,
    "code": "app.get('/r4924',(req,res)=>{ const t=String(req.query.to4924||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4926,
    "code": "app.post('/cfg4926',(req,res)=>{ const c=eval('('+req.body.cfg4926+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4927,
    "code": "app.post('/cfg4926',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4926||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4928,
    "code": "app.post('/up4928',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4929,
    "code": "const pathu4928=require('path');app.post('/up4928',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4928.basename(f.name); f.mv(pathu4928.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4930,
    "code": "app.post('/vote4930',(req,res)=>{ save(req.body.choice4930); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4931,
    "code": "app.post('/vote4930',(req,res)=>{ const c=String(req.body.choice4930||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4932,
    "code": "const h4932=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4933,
    "code": "const h4932=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4934,
    "code": "app.get('/proxy4934',async(req,res)=>{ const r=await fetch(req.query.url4934); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4935,
    "code": "const {URL}=require('url'); app.get('/proxy4934',async(req,res)=>{ try{ const u=new URL(String(req.query.url4934||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4936,
    "code": "const token4936=jwt.sign({'id':u.id},'secret4936');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4937,
    "code": "const token4936=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4938,
    "code": "app.get('/open4938',(req,res)=>{ res.redirect(req.query.to4938); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4939,
    "code": "app.get('/open4938',(req,res)=>{ const t=String(req.query.to4938||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4940,
    "code": "router.get('/u4940', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4940); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4941,
    "code": "router.get('/u4940', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4940]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4942,
    "code": "app.post('/run4942',(req,res)=>{ require('child_process').exec('cat '+req.body.f4942,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4943,
    "code": "app.post('/run4942',(req,res)=>{ const f=String(req.body.f4942||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4944,
    "code": "app.get('/r4944',(req,res)=>{ res.redirect(req.query.to4944); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4945,
    "code": "app.get('/r4944',(req,res)=>{ const t=String(req.query.to4944||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4946,
    "code": "app.post('/cfg4946',(req,res)=>{ const c=eval('('+req.body.cfg4946+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4947,
    "code": "app.post('/cfg4946',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4946||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4948,
    "code": "app.post('/up4948',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4949,
    "code": "const pathu4948=require('path');app.post('/up4948',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4948.basename(f.name); f.mv(pathu4948.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4950,
    "code": "app.post('/vote4950',(req,res)=>{ save(req.body.choice4950); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4951,
    "code": "app.post('/vote4950',(req,res)=>{ const c=String(req.body.choice4950||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4952,
    "code": "const h4952=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4953,
    "code": "const h4952=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4954,
    "code": "app.get('/proxy4954',async(req,res)=>{ const r=await fetch(req.query.url4954); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4955,
    "code": "const {URL}=require('url'); app.get('/proxy4954',async(req,res)=>{ try{ const u=new URL(String(req.query.url4954||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4956,
    "code": "const token4956=jwt.sign({'id':u.id},'secret4956');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4957,
    "code": "const token4956=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4958,
    "code": "app.get('/open4958',(req,res)=>{ res.redirect(req.query.to4958); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4959,
    "code": "app.get('/open4958',(req,res)=>{ const t=String(req.query.to4958||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4960,
    "code": "router.get('/u4960', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4960); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4961,
    "code": "router.get('/u4960', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4960]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4962,
    "code": "app.post('/run4962',(req,res)=>{ require('child_process').exec('cat '+req.body.f4962,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4963,
    "code": "app.post('/run4962',(req,res)=>{ const f=String(req.body.f4962||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4964,
    "code": "app.get('/r4964',(req,res)=>{ res.redirect(req.query.to4964); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4965,
    "code": "app.get('/r4964',(req,res)=>{ const t=String(req.query.to4964||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4966,
    "code": "app.post('/cfg4966',(req,res)=>{ const c=eval('('+req.body.cfg4966+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4967,
    "code": "app.post('/cfg4966',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4966||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4968,
    "code": "app.post('/up4968',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4969,
    "code": "const pathu4968=require('path');app.post('/up4968',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4968.basename(f.name); f.mv(pathu4968.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4970,
    "code": "app.post('/vote4970',(req,res)=>{ save(req.body.choice4970); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4971,
    "code": "app.post('/vote4970',(req,res)=>{ const c=String(req.body.choice4970||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4972,
    "code": "const h4972=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4973,
    "code": "const h4972=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4974,
    "code": "app.get('/proxy4974',async(req,res)=>{ const r=await fetch(req.query.url4974); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4975,
    "code": "const {URL}=require('url'); app.get('/proxy4974',async(req,res)=>{ try{ const u=new URL(String(req.query.url4974||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4976,
    "code": "const token4976=jwt.sign({'id':u.id},'secret4976');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4977,
    "code": "const token4976=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4978,
    "code": "app.get('/open4978',(req,res)=>{ res.redirect(req.query.to4978); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4979,
    "code": "app.get('/open4978',(req,res)=>{ const t=String(req.query.to4978||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4980,
    "code": "router.get('/u4980', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id4980); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4981,
    "code": "router.get('/u4980', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id4980]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4982,
    "code": "app.post('/run4982',(req,res)=>{ require('child_process').exec('cat '+req.body.f4982,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 4983,
    "code": "app.post('/run4982',(req,res)=>{ const f=String(req.body.f4982||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4984,
    "code": "app.get('/r4984',(req,res)=>{ res.redirect(req.query.to4984); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 4985,
    "code": "app.get('/r4984',(req,res)=>{ const t=String(req.query.to4984||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4986,
    "code": "app.post('/cfg4986',(req,res)=>{ const c=eval('('+req.body.cfg4986+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 4987,
    "code": "app.post('/cfg4986',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg4986||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4988,
    "code": "app.post('/up4988',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 4989,
    "code": "const pathu4988=require('path');app.post('/up4988',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu4988.basename(f.name); f.mv(pathu4988.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4990,
    "code": "app.post('/vote4990',(req,res)=>{ save(req.body.choice4990); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 4991,
    "code": "app.post('/vote4990',(req,res)=>{ const c=String(req.body.choice4990||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4992,
    "code": "const h4992=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 4993,
    "code": "const h4992=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4994,
    "code": "app.get('/proxy4994',async(req,res)=>{ const r=await fetch(req.query.url4994); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 4995,
    "code": "const {URL}=require('url'); app.get('/proxy4994',async(req,res)=>{ try{ const u=new URL(String(req.query.url4994||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4996,
    "code": "const token4996=jwt.sign({'id':u.id},'secret4996');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 4997,
    "code": "const token4996=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4998,
    "code": "app.get('/open4998',(req,res)=>{ res.redirect(req.query.to4998); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 4999,
    "code": "app.get('/open4998',(req,res)=>{ const t=String(req.query.to4998||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5000,
    "code": "router.get('/u5000', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id5000); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 5001,
    "code": "router.get('/u5000', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id5000]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5002,
    "code": "app.post('/run5002',(req,res)=>{ require('child_process').exec('cat '+req.body.f5002,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 5003,
    "code": "app.post('/run5002',(req,res)=>{ const f=String(req.body.f5002||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5004,
    "code": "app.get('/r5004',(req,res)=>{ res.redirect(req.query.to5004); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 5005,
    "code": "app.get('/r5004',(req,res)=>{ const t=String(req.query.to5004||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5006,
    "code": "app.post('/cfg5006',(req,res)=>{ const c=eval('('+req.body.cfg5006+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 5007,
    "code": "app.post('/cfg5006',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg5006||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5008,
    "code": "app.post('/up5008',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 5009,
    "code": "const pathu5008=require('path');app.post('/up5008',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu5008.basename(f.name); f.mv(pathu5008.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5010,
    "code": "app.post('/vote5010',(req,res)=>{ save(req.body.choice5010); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 5011,
    "code": "app.post('/vote5010',(req,res)=>{ const c=String(req.body.choice5010||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5012,
    "code": "const h5012=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 5013,
    "code": "const h5012=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5014,
    "code": "app.get('/proxy5014',async(req,res)=>{ const r=await fetch(req.query.url5014); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 5015,
    "code": "const {URL}=require('url'); app.get('/proxy5014',async(req,res)=>{ try{ const u=new URL(String(req.query.url5014||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5016,
    "code": "const token5016=jwt.sign({'id':u.id},'secret5016');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 5017,
    "code": "const token5016=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5018,
    "code": "app.get('/open5018',(req,res)=>{ res.redirect(req.query.to5018); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 5019,
    "code": "app.get('/open5018',(req,res)=>{ const t=String(req.query.to5018||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5020,
    "code": "router.get('/u5020', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id5020); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 5021,
    "code": "router.get('/u5020', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id5020]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5022,
    "code": "app.post('/run5022',(req,res)=>{ require('child_process').exec('cat '+req.body.f5022,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 5023,
    "code": "app.post('/run5022',(req,res)=>{ const f=String(req.body.f5022||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5024,
    "code": "app.get('/r5024',(req,res)=>{ res.redirect(req.query.to5024); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 5025,
    "code": "app.get('/r5024',(req,res)=>{ const t=String(req.query.to5024||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5026,
    "code": "app.post('/cfg5026',(req,res)=>{ const c=eval('('+req.body.cfg5026+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 5027,
    "code": "app.post('/cfg5026',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg5026||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5028,
    "code": "app.post('/up5028',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 5029,
    "code": "const pathu5028=require('path');app.post('/up5028',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu5028.basename(f.name); f.mv(pathu5028.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5030,
    "code": "app.post('/vote5030',(req,res)=>{ save(req.body.choice5030); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 5031,
    "code": "app.post('/vote5030',(req,res)=>{ const c=String(req.body.choice5030||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5032,
    "code": "const h5032=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 5033,
    "code": "const h5032=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5034,
    "code": "app.get('/proxy5034',async(req,res)=>{ const r=await fetch(req.query.url5034); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 5035,
    "code": "const {URL}=require('url'); app.get('/proxy5034',async(req,res)=>{ try{ const u=new URL(String(req.query.url5034||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5036,
    "code": "const token5036=jwt.sign({'id':u.id},'secret5036');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 5037,
    "code": "const token5036=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5038,
    "code": "app.get('/open5038',(req,res)=>{ res.redirect(req.query.to5038); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 5039,
    "code": "app.get('/open5038',(req,res)=>{ const t=String(req.query.to5038||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5040,
    "code": "router.get('/u5040', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id5040); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 5041,
    "code": "router.get('/u5040', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id5040]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5042,
    "code": "app.post('/run5042',(req,res)=>{ require('child_process').exec('cat '+req.body.f5042,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 5043,
    "code": "app.post('/run5042',(req,res)=>{ const f=String(req.body.f5042||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5044,
    "code": "app.get('/r5044',(req,res)=>{ res.redirect(req.query.to5044); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 5045,
    "code": "app.get('/r5044',(req,res)=>{ const t=String(req.query.to5044||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5046,
    "code": "app.post('/cfg5046',(req,res)=>{ const c=eval('('+req.body.cfg5046+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 5047,
    "code": "app.post('/cfg5046',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg5046||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5048,
    "code": "app.post('/up5048',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 5049,
    "code": "const pathu5048=require('path');app.post('/up5048',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu5048.basename(f.name); f.mv(pathu5048.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5050,
    "code": "app.post('/vote5050',(req,res)=>{ save(req.body.choice5050); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 5051,
    "code": "app.post('/vote5050',(req,res)=>{ const c=String(req.body.choice5050||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5052,
    "code": "const h5052=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 5053,
    "code": "const h5052=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5054,
    "code": "app.get('/proxy5054',async(req,res)=>{ const r=await fetch(req.query.url5054); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 5055,
    "code": "const {URL}=require('url'); app.get('/proxy5054',async(req,res)=>{ try{ const u=new URL(String(req.query.url5054||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5056,
    "code": "const token5056=jwt.sign({'id':u.id},'secret5056');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 5057,
    "code": "const token5056=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5058,
    "code": "app.get('/open5058',(req,res)=>{ res.redirect(req.query.to5058); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 5059,
    "code": "app.get('/open5058',(req,res)=>{ const t=String(req.query.to5058||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5060,
    "code": "router.get('/u5060', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id5060); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 5061,
    "code": "router.get('/u5060', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id5060]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5062,
    "code": "app.post('/run5062',(req,res)=>{ require('child_process').exec('cat '+req.body.f5062,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 5063,
    "code": "app.post('/run5062',(req,res)=>{ const f=String(req.body.f5062||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5064,
    "code": "app.get('/r5064',(req,res)=>{ res.redirect(req.query.to5064); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 5065,
    "code": "app.get('/r5064',(req,res)=>{ const t=String(req.query.to5064||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5066,
    "code": "app.post('/cfg5066',(req,res)=>{ const c=eval('('+req.body.cfg5066+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 5067,
    "code": "app.post('/cfg5066',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg5066||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5068,
    "code": "app.post('/up5068',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 5069,
    "code": "const pathu5068=require('path');app.post('/up5068',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu5068.basename(f.name); f.mv(pathu5068.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5070,
    "code": "app.post('/vote5070',(req,res)=>{ save(req.body.choice5070); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 5071,
    "code": "app.post('/vote5070',(req,res)=>{ const c=String(req.body.choice5070||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5072,
    "code": "const h5072=require('crypto').createHash('md5').update('salt'+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Use strong algorithms and env-based salts."
  },
  {
    "id": 5073,
    "code": "const h5072=require('crypto').createHmac('sha256',process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5074,
    "code": "app.get('/proxy5074',async(req,res)=>{ const r=await fetch(req.query.url5074); res.send(await r.text()); });",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlist hosts when fetching external URLs."
  },
  {
    "id": 5075,
    "code": "const {URL}=require('url'); app.get('/proxy5074',async(req,res)=>{ try{ const u=new URL(String(req.query.url5074||'')); const allowed=new Set(['api.example.com']); if(!allowed.has(u.hostname)) return res.status(400).send('bad'); const r=await fetch(u.toString()); res.send(await r.text()); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5076,
    "code": "const token5076=jwt.sign({'id':u.id},'secret5076');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Use env secrets and token expiry."
  },
  {
    "id": 5077,
    "code": "const token5076=jwt.sign({'id':u.id},process.env.JWT_SECRET,{expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5078,
    "code": "app.get('/open5078',(req,res)=>{ res.redirect(req.query.to5078); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Limit redirects to safe internal paths."
  },
  {
    "id": 5079,
    "code": "app.get('/open5078',(req,res)=>{ const t=String(req.query.to5078||''); if(!/^\\/app/.test(t)) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5080,
    "code": "router.get('/u5080', (req,res)=>{ db.query('SELECT * FROM users WHERE id=' + req.query.id5080); });",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenated user input in SQL query. Use parameterized queries."
  },
  {
    "id": 5081,
    "code": "router.get('/u5080', (req,res)=>{ db.query('SELECT * FROM users WHERE id=?',[req.query.id5080]); });",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5082,
    "code": "app.post('/run5082',(req,res)=>{ require('child_process').exec('cat '+req.body.f5082,(e,o)=>res.send(o)); });",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized shell input leads to command injection. Sanitize or avoid shell."
  },
  {
    "id": 5083,
    "code": "app.post('/run5082',(req,res)=>{ const f=String(req.body.f5082||'').replace(/[^\\w\\.\\-\\/]/g,''); require('child_process').exec('cat '+f,(e,o)=>res.send(o)); });",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5084,
    "code": "app.get('/r5084',(req,res)=>{ res.redirect(req.query.to5084); });",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused; restrict destinations."
  },
  {
    "id": 5085,
    "code": "app.get('/r5084',(req,res)=>{ const t=String(req.query.to5084||''); if(!t.startsWith('/')) return res.status(400).send('bad'); res.redirect(t); });",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5086,
    "code": "app.post('/cfg5086',(req,res)=>{ const c=eval('('+req.body.cfg5086+')'); apply(c); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Avoid eval on untrusted input; use JSON.parse with validation."
  },
  {
    "id": 5087,
    "code": "app.post('/cfg5086',(req,res)=>{ try{ const c=JSON.parse(String(req.body.cfg5086||'')); apply(c); res.send('ok'); }catch(e){res.status(400).send('bad')} });",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5088,
    "code": "app.post('/up5088',(req,res)=>{ req.files.f.mv('./u/'+req.files.f.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate MIME type and sanitize filename before saving uploads."
  },
  {
    "id": 5089,
    "code": "const pathu5088=require('path');app.post('/up5088',(req,res)=>{ const f=req.files&&req.files.f; if(!f||!/^image\\/(png|jpeg)$/.test(f.mimetype))return res.status(400).send('bad'); const name=Date.now()+'-'+pathu5088.basename(f.name); f.mv(pathu5088.join(__dirname,'u',name)); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 5090,
    "code": "app.post('/vote5090',(req,res)=>{ save(req.body.choice5090); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate inputs against expected allowlists or ranges."
  },
  {
    "id": 5091,
    "code": "app.post('/vote5090',(req,res)=>{ const c=String(req.body.choice5090||''); if(!['A','B','C'].includes(c)) return res.status(400).send('bad'); save(c); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  }
]