[
  {
    "id": 1,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 2,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 3,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 4,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 5,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 6,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 7,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 8,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 9,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 10,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 11,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 12,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 13,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 14,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 15,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 16,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 17,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 18,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 19,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 20,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 21,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 22,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 23,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 24,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 25,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 26,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 27,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 28,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 29,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 30,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 31,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 32,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 33,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 34,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 35,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 36,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 37,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 38,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 39,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 40,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 41,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 42,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 43,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 44,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 45,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 46,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 47,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 48,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 49,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 50,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 51,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 52,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 53,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 54,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 55,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 56,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 57,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 58,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 59,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 60,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 61,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 62,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 63,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 64,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 65,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 66,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 67,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 68,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 69,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 70,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 71,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 72,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 73,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 74,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 75,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 76,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 77,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 78,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 79,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 80,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 81,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 82,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 83,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 84,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 85,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 86,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 87,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 88,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 89,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 90,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 91,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 92,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 93,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 94,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 95,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 96,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 97,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 98,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 99,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 100,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 101,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 102,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 103,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 104,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 105,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 106,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 107,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 108,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 109,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 110,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 111,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 112,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 113,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 114,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 115,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 116,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 117,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 118,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 119,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 120,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 121,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 122,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 123,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 124,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 125,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 126,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 127,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 128,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 129,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 130,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 131,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 132,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 133,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 134,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 135,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 136,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 137,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 138,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 139,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 140,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 141,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 142,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 143,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 144,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 145,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 146,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 147,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 148,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 149,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 150,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 151,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 152,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 153,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 154,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 155,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 156,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 157,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 158,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 159,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 160,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 161,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 162,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 163,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 164,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 165,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 166,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 167,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 168,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 169,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 170,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 171,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 172,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 173,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 174,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 175,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 176,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 177,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 178,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 179,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 180,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 181,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 182,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 183,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 184,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 185,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 186,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 187,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 188,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 189,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 190,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 191,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 192,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 193,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 194,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 195,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 196,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 197,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 198,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 199,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 200,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 201,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 202,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 203,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 204,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 205,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 206,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 207,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 208,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 209,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 210,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 211,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 212,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 213,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 214,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 215,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 216,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 217,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 218,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 219,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 220,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 221,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 222,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 223,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 224,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 225,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 226,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 227,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 228,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 229,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 230,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 231,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 232,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 233,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 234,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 235,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 236,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 237,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 238,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 239,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 240,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 241,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 242,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 243,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 244,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 245,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 246,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 247,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 248,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 249,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 250,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 251,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 252,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 253,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 254,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 255,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 256,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 257,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 258,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 259,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 260,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 261,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 262,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 263,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 264,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 265,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 266,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 267,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 268,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 269,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 270,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 271,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 272,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 273,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 274,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 275,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 276,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 277,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 278,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 279,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 280,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 281,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 282,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 283,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 284,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 285,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 286,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 287,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 288,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 289,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 290,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 291,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 292,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 293,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 294,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 295,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 296,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 297,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 298,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 299,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 300,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 301,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 302,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 303,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 304,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 305,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 306,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 307,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 308,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 309,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 310,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 311,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 312,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 313,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 314,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 315,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 316,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 317,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 318,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 319,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 320,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 321,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 322,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 323,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 324,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 325,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 326,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 327,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 328,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 329,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 330,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 331,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 332,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 333,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 334,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 335,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 336,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 337,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 338,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 339,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 340,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 341,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 342,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 343,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 344,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 345,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 346,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 347,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 348,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 349,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 350,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 351,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 352,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 353,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 354,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 355,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 356,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 357,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 358,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 359,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 360,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 361,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 362,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 363,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 364,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 365,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 366,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 367,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 368,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 369,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 370,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 371,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 372,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 373,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 374,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 375,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 376,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 377,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 378,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 379,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 380,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 381,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 382,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 383,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 384,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 385,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 386,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 387,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 388,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 389,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 390,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 391,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 392,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 393,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 394,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 395,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 396,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 397,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 398,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 399,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 400,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 401,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 402,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 403,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 404,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 405,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 406,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 407,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 408,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 409,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 410,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 411,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 412,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 413,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 414,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 415,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 416,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 417,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 418,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 419,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 420,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 421,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 422,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 423,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 424,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 425,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 426,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 427,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 428,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 429,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 430,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 431,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 432,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 433,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 434,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 435,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 436,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 437,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 438,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 439,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 440,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 441,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 442,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 443,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 444,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 445,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 446,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 447,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 448,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 449,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 450,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 451,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 452,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 453,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 454,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 455,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 456,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 457,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 458,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 459,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 460,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 461,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 462,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 463,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 464,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 465,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 466,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 467,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 468,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 469,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 470,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 471,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 472,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 473,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 474,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 475,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 476,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 477,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 478,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 479,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 480,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 481,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 482,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 483,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 484,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 485,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 486,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 487,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 488,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 489,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 490,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 491,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 492,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 493,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 494,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 495,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 496,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 497,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 498,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 499,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 500,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 501,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 502,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 503,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 504,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 505,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 506,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 507,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 508,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 509,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 510,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 511,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 512,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 513,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 514,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 515,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 516,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 517,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 518,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 519,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 520,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 521,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 522,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 523,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 524,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 525,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 526,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 527,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 528,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 529,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 530,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 531,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 532,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 533,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 534,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 535,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 536,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 537,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 538,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 539,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 540,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 541,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 542,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 543,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 544,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 545,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 546,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 547,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 548,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 549,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 550,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 551,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 552,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 553,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 554,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 555,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 556,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 557,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 558,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 559,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 560,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 561,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 562,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 563,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 564,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 565,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 566,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 567,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 568,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 569,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 570,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 571,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 572,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 573,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 574,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 575,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 576,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 577,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 578,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 579,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 580,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 581,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 582,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 583,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 584,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 585,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 586,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 587,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 588,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 589,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 590,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 591,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 592,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 593,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 594,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 595,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 596,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 597,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 598,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 599,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 600,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 601,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 602,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 603,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 604,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 605,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 606,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 607,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 608,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 609,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 610,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 611,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 612,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 613,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 614,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 615,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 616,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 617,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 618,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 619,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 620,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 621,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 622,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 623,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 624,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 625,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 626,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 627,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 628,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 629,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 630,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 631,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 632,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 633,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 634,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 635,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 636,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 637,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 638,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 639,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 640,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 641,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 642,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 643,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 644,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 645,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 646,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 647,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 648,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 649,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 650,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 651,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 652,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 653,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 654,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 655,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 656,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 657,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 658,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 659,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 660,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 661,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 662,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 663,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 664,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 665,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 666,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 667,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 668,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 669,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 670,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 671,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 672,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 673,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 674,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 675,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 676,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 677,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 678,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 679,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 680,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 681,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 682,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 683,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 684,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 685,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 686,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 687,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 688,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 689,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 690,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 691,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 692,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 693,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 694,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 695,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 696,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 697,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 698,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 699,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 700,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 701,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 702,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 703,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 704,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 705,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 706,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 707,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 708,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 709,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 710,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 711,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 712,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 713,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 714,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 715,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 716,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 717,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 718,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 719,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 720,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 721,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 722,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 723,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 724,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 725,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 726,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 727,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 728,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 729,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 730,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 731,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 732,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 733,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 734,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 735,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 736,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 737,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 738,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 739,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 740,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 741,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 742,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 743,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 744,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 745,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 746,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 747,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 748,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 749,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 750,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 751,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 752,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 753,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 754,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 755,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 756,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 757,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 758,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 759,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 760,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 761,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 762,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 763,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 764,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 765,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 766,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 767,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 768,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 769,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 770,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 771,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 772,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 773,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 774,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 775,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 776,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 777,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 778,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 779,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 780,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 781,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 782,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 783,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 784,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 785,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 786,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 787,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 788,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 789,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 790,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 791,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 792,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 793,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 794,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 795,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 796,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 797,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 798,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 799,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 800,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 801,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 802,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 803,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 804,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 805,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 806,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 807,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 808,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 809,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 810,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 811,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 812,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 813,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 814,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 815,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 816,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 817,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 818,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 819,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 820,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 821,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 822,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 823,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 824,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 825,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 826,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 827,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 828,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 829,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 830,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 831,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 832,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 833,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 834,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 835,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 836,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 837,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 838,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 839,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 840,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 841,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 842,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 843,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 844,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 845,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 846,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 847,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 848,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 849,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 850,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 851,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 852,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 853,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 854,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 855,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 856,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 857,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 858,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 859,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 860,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 861,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 862,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 863,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 864,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 865,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 866,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 867,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 868,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 869,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 870,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 871,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 872,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 873,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 874,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 875,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 876,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 877,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 878,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 879,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 880,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 881,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 882,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 883,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 884,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 885,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 886,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 887,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 888,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 889,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 890,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 891,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 892,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 893,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 894,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 895,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 896,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 897,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 898,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 899,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 900,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 901,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 902,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 903,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 904,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 905,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 906,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 907,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 908,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 909,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 910,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 911,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 912,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 913,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 914,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 915,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 916,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 917,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 918,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 919,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 920,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 921,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 922,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 923,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 924,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 925,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 926,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 927,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 928,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 929,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 930,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 931,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 932,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 933,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 934,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 935,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 936,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 937,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 938,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 939,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 940,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 941,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 942,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 943,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 944,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 945,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 946,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 947,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 948,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 949,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 950,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 951,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 952,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 953,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 954,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 955,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 956,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 957,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 958,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 959,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 960,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 961,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 962,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 963,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 964,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 965,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 966,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 967,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 968,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 969,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 970,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 971,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 972,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 973,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 974,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 975,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 976,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 977,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 978,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 979,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 980,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 981,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 982,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 983,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 984,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 985,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 986,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 987,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 988,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 989,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 990,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 991,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = \" + req.query.id)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "The insecure code directly concatenates user input into an SQL query, allowing SQL injection. The secure version uses parameterized queries."
  },
  {
    "id": 992,
    "code": "router.get('/user', (req, res) => {\n  db.query(\"SELECT * FROM users WHERE id = ?\", [req.query.id])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 993,
    "code": "app.post('/run', (req, res) => {\n  const cmd = \"ls \" + req.body.dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "The insecure code allows command injection by including unsanitized input in a shell command. The secure version sanitizes input to only allow alphanumeric characters."
  },
  {
    "id": 994,
    "code": "app.post('/run', (req, res) => {\n  const dir = req.body.dir.replace(/[^a-zA-Z0-9]/g, \"\");\n  const cmd = \"ls \" + dir;\n  require('child_process').exec(cmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 995,
    "code": "app.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + req.query.name + \"</h1>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "The insecure code renders raw user input into HTML, enabling XSS. The secure version escapes HTML characters to prevent injection."
  },
  {
    "id": 996,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/greet', (req, res) => {\n  res.send(\"<h1>Hello \" + escapeHtml(req.query.name) + \"</h1>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 997,
    "code": "app.get('/file', (req, res) => {\n  const filePath = './uploads/' + req.query.filename;\n  res.sendFile(filePath);\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "The insecure version allows path traversal. The secure version sanitizes the path by using `path.basename()` and `path.join()`."
  },
  {
    "id": 998,
    "code": "const path = require('path');\napp.get('/file', (req, res) => {\n  const safePath = path.join(__dirname, 'uploads', path.basename(req.query.filename));\n  res.sendFile(safePath);\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Access",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 999,
    "code": "app.get('/admin', (req, res) => {\n  res.send('Sensitive admin info');\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "The insecure route does not check if the user is authenticated. The secure version ensures only authenticated admins can access the route."
  },
  {
    "id": 1000,
    "code": "app.get('/admin', (req, res) => {\n  if (!req.user || !req.user.isAdmin) return res.status(403).send('Forbidden');\n  res.send('Sensitive admin info');\n});",
    "label": "secure",
    "vulnerability_type": "Missing Authentication",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1001,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1001;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1002,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1001.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1003,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1003;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1004,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1003));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1005,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1005)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1006,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1005])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1007,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1007 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1008,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1007) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1009,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1009\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1010,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1009\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1011,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1011;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1012,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1011.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1013,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1013;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1014,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1013));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1015,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1015)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1016,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1015])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1017,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1017 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1018,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1017) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1019,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1019\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1020,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1019\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1021,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1021;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1022,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1021.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1023,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1023;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1024,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1023));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1025,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1025)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1026,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1025])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1027,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1027 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1028,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1027) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1029,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1029\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1030,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1029\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1031,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1031;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1032,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1031.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1033,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1033;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1034,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1033));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1035,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1035)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1036,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1035])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1037,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1037 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1038,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1037) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1039,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1039\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1040,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1039\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1041,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1041;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1042,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1041.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1043,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1043;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1044,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1043));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1045,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1045)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1046,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1045])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1047,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1047 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1048,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1047) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1049,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1049\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1050,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1049\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1051,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1051;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1052,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1051.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1053,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1053;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1054,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1053));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1055,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1055)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1056,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1055])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1057,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1057 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1058,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1057) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1059,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1059\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1060,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1059\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1061,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1061;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1062,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1061.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1063,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1063;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1064,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1063));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1065,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1065)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1066,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1065])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1067,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1067 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1068,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1067) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1069,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1069\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1070,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1069\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1071,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1071;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1072,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1071.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1073,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1073;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1074,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1073));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1075,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1075)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1076,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1075])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1077,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1077 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1078,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1077) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1079,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1079\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1080,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1079\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1081,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1081;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1082,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1081.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1083,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1083;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1084,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1083));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1085,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1085)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1086,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1085])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1087,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1087 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1088,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1087) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1089,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1089\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1090,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1089\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1091,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1091;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1092,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1091.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1093,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1093;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1094,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1093));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1095,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1095)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1096,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1095])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1097,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1097 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1098,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1097) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1099,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1099\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1100,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1099\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1101,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1101;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1102,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1101.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1103,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1103;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1104,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1103));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1105,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1105)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1106,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1105])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1107,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1107 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1108,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1107) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1109,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1109\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1110,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1109\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1111,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1111;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1112,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1111.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1113,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1113;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1114,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1113));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1115,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1115)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1116,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1115])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1117,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1117 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1118,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1117) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1119,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1119\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1120,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1119\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1121,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1121;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1122,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1121.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1123,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1123;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1124,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1123));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1125,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1125)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1126,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1125])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1127,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1127 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1128,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1127) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1129,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1129\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1130,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1129\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1131,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1131;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1132,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1131.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1133,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1133;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1134,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1133));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1135,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1135)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1136,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1135])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1137,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1137 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1138,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1137) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1139,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1139\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1140,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1139\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1141,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1141;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1142,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1141.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1143,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1143;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1144,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1143));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1145,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1145)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1146,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1145])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1147,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1147 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1148,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1147) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1149,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1149\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1150,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1149\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1151,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1151;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1152,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1151.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1153,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1153;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1154,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1153));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1155,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1155)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1156,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1155])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1157,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1157 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1158,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1157) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1159,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1159\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1160,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1159\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1161,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1161;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1162,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1161.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1163,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1163;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1164,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1163));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1165,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1165)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1166,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1165])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1167,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1167 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1168,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1167) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1169,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1169\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1170,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1169\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1171,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1171;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1172,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1171.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1173,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1173;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1174,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1173));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1175,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1175)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1176,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1175])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1177,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1177 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1178,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1177) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1179,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1179\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1180,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1179\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1181,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1181;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1182,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1181.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1183,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1183;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1184,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1183));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1185,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1185)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1186,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1185])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1187,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1187 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1188,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1187) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1189,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1189\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1190,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1189\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1191,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1191;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1192,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1191.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1193,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1193;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1194,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1193));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1195,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1195)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1196,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1195])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1197,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1197 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1198,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1197) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1199,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1199\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1200,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1199\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1201,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1201;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1202,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1201.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1203,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1203;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1204,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1203));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1205,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1205)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1206,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1205])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1207,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1207 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1208,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1207) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1209,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1209\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1210,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1209\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1211,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1211;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1212,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1211.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1213,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1213;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1214,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1213));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1215,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1215)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1216,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1215])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1217,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1217 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1218,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1217) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1219,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1219\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1220,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1219\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1221,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1221;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1222,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1221.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1223,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1223;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1224,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1223));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1225,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1225)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1226,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1225])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1227,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1227 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1228,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1227) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1229,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1229\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1230,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1229\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1231,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1231;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1232,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1231.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1233,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1233;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1234,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1233));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1235,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1235)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1236,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1235])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1237,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1237 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1238,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1237) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1239,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1239\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1240,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1239\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1241,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1241;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1242,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1241.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1243,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1243;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1244,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1243));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1245,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1245)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1246,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1245])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1247,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1247 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1248,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1247) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1249,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1249\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1250,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1249\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1251,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1251;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1252,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1251.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1253,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1253;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1254,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1253));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1255,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1255)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1256,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1255])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1257,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1257 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1258,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1257) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1259,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1259\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1260,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1259\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1261,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1261;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1262,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1261.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1263,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1263;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1264,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1263));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1265,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1265)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1266,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1265])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1267,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1267 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1268,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1267) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1269,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1269\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1270,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1269\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1271,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1271;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1272,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1271.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1273,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1273;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1274,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1273));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1275,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1275)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1276,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1275])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1277,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1277 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1278,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1277) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1279,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1279\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1280,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1279\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1281,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1281;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1282,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1281.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1283,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1283;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1284,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1283));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1285,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1285)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1286,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1285])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1287,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1287 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1288,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1287) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1289,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1289\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1290,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1289\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1291,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1291;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1292,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1291.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1293,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1293;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1294,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1293));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1295,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1295)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1296,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1295])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1297,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1297 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1298,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1297) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1299,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1299\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1300,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1299\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1301,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1301;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1302,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1301.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1303,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1303;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1304,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1303));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1305,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1305)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1306,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1305])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1307,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1307 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1308,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1307) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1309,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1309\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1310,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1309\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1311,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1311;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1312,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1311.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1313,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1313;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1314,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1313));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1315,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1315)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1316,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1315])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1317,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1317 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1318,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1317) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1319,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1319\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1320,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1319\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1321,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1321;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1322,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1321.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1323,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1323;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1324,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1323));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1325,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1325)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1326,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1325])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1327,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1327 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1328,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1327) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1329,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1329\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1330,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1329\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1331,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1331;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1332,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1331.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1333,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1333;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1334,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1333));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1335,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1335)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1336,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1335])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1337,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1337 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1338,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1337) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1339,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1339\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1340,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1339\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1341,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1341;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1342,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1341.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1343,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1343;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1344,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1343));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1345,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1345)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1346,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1345])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1347,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1347 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1348,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1347) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1349,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1349\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1350,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1349\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1351,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1351;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1352,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1351.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1353,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1353;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1354,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1353));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1355,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1355)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1356,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1355])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1357,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1357 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1358,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1357) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1359,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1359\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1360,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1359\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1361,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1361;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1362,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1361.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1363,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1363;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1364,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1363));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1365,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1365)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1366,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1365])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1367,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1367 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1368,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1367) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1369,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1369\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1370,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1369\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1371,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1371;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1372,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1371.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1373,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1373;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1374,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1373));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1375,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1375)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1376,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1375])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1377,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1377 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1378,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1377) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1379,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1379\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1380,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1379\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1381,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1381;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1382,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1381.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1383,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1383;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1384,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1383));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1385,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1385)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1386,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1385])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1387,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1387 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1388,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1387) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1389,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1389\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1390,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1389\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1391,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1391;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1392,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1391.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1393,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1393;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1394,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1393));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1395,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1395)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1396,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1395])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1397,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1397 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1398,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1397) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1399,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1399\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1400,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1399\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1401,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1401;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1402,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1401.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1403,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1403;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1404,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1403));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1405,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1405)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1406,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1405])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1407,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1407 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1408,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1407) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1409,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1409\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1410,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1409\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1411,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1411;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1412,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1411.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1413,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1413;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1414,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1413));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1415,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1415)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1416,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1415])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1417,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1417 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1418,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1417) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1419,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1419\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1420,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1419\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1421,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1421;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1422,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1421.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1423,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1423;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1424,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1423));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1425,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1425)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1426,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1425])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1427,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1427 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1428,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1427) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1429,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1429\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1430,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1429\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1431,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1431;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1432,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1431.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1433,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1433;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1434,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1433));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1435,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1435)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1436,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1435])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1437,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1437 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1438,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1437) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1439,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1439\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1440,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1439\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1441,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1441;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1442,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1441.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1443,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1443;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1444,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1443));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1445,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1445)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1446,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1445])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1447,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1447 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1448,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1447) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1449,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1449\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1450,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1449\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1451,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1451;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1452,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1451.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1453,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1453;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1454,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1453));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1455,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1455)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1456,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1455])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1457,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1457 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1458,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1457) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1459,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1459\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1460,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1459\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1461,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1461;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1462,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1461.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1463,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1463;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1464,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1463));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1465,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1465)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1466,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1465])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1467,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1467 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1468,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1467) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1469,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1469\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1470,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1469\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1471,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1471;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1472,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1471.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1473,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1473;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1474,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1473));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1475,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1475)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1476,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1475])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1477,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1477 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1478,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1477) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1479,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1479\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1480,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1479\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1481,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1481;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1482,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1481.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1483,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1483;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1484,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1483));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1485,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1485)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1486,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1485])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1487,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1487 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1488,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1487) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1489,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1489\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1490,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1489\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1491,
    "code": "app.post('/exec', (req, res) => {\n  const userCmd = \"ping \" + req.body.host_1491;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Unsanitized input in shell command. Secure version validates input."
  },
  {
    "id": 1492,
    "code": "app.post('/exec', (req, res) => {\n  const host = req.body.host_1491.replace(/[^a-zA-Z0-9.-]/g, \"\");\n  const userCmd = \"ping \" + host;\n  require('child_process').exec(userCmd, (err, stdout) => res.send(stdout));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1493,
    "code": "app.get('/open', (req, res) => {\n  const file = './public/' + req.query.name_1493;\n  res.sendFile(file);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Path traversal risk. Secure version uses path sanitization."
  },
  {
    "id": 1494,
    "code": "const path = require('path');\napp.get('/open', (req, res) => {\n  const safe = path.join(__dirname, 'public', path.basename(req.query.name_1493));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1495,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = \" + req.query.userId_1495)\n    .then(result => res.send(result));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Secure version uses parameterized queries."
  },
  {
    "id": 1496,
    "code": "router.get('/email', (req, res) => {\n  db.query(\"SELECT email FROM users WHERE id = ?\", [req.query.userId_1495])\n    .then(result => res.send(result));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1497,
    "code": "app.get('/show', (req, res) => {\n  res.send(\"<div>\" + req.query.data_1497 + \"</div>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input leads to XSS. Secure version escapes HTML content."
  },
  {
    "id": 1498,
    "code": "const escapeHtml = str => str.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/show', (req, res) => {\n  res.send(\"<div>\" + escapeHtml(req.query.data_1497) + \"</div>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1499,
    "code": "app.get('/secure-area', (req, res) => {\n  res.send(\"Confidential info 1499\");\n});",
    "label": "insecure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "Missing auth check. Secure version requires authentication."
  },
  {
    "id": 1500,
    "code": "app.get('/secure-area', (req, res) => {\n  if (!req.user || !req.user.authenticated) return res.status(401).send(\"Unauthorized\");\n  res.send(\"Confidential info 1499\");\n});",
    "label": "secure",
    "vulnerability_type": "Authentication Bypass",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1501,
    "code": "app.get('/user1501', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1501 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1502,
    "code": "app.get('/user1501', async (req, res) => {\n  const u = String(req.query.u1501 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1503,
    "code": "app.post('/zip1503', (req, res) => {\n  const archive = \"archive_1503.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1503;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1504,
    "code": "app.post('/zip1503', (req, res) => {\n  const archive = \"archive_1503.zip\";\n  const dir = String(req.body.dir1503 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1505,
    "code": "app.post('/cfg1505', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1505 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1506,
    "code": "app.post('/cfg1505', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1505 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1507,
    "code": "app.use('/api1507', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1508,
    "code": "const allowedOrigins1507 = new Set([\"https://example1507.com\"]);\napp.use('/api1507', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1507.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1509,
    "code": "app.get('/fetch1509', async (req, res) => {\n  const r = await fetch(req.query.url1509);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1510,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1509', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1509 || \"\"));\n    const allowedHosts = new Set([\"example1509.com\",\"api1509.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1511,
    "code": "app.post('/auth1511', async (req, res) => {\n  const ok = await authUser(req.body.u1511, req.body.p1511);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1512,
    "code": "const attempts1511 = new Map();\napp.post('/auth1511', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1511.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1511.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1511, req.body.p1511);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1513,
    "code": "app.post('/upload1513', (req, res) => {\n  req.files.file1513.mv(\"./uploads/\" + req.files.file1513.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1514,
    "code": "const path_up1513 = require('path');\napp.post('/upload1513', (req, res) => {\n  const f = req.files && req.files.file1513;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1513.basename(f.name);\n  f.mv(path_up1513.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1515,
    "code": "router.get('/acct1515', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1515 WHERE id = \" + req.query.id1515)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1516,
    "code": "router.get('/acct1515', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1515 WHERE id = ?\", [req.query.id1515])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1517,
    "code": "app.get('/hello1517', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1517 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1518,
    "code": "const escapeHtml1517 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1517', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1517(req.query.name1517 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1519,
    "code": "app.get('/read1519', (req, res) => {\n  const p = \"./files/\" + req.query.file1519;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1520,
    "code": "const path1519 = require('path');\napp.get('/read1519', (req, res) => {\n  const base = path1519.join(__dirname, 'files');\n  const safe = path1519.join(base, path1519.basename(String(req.query.file1519 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1521,
    "code": "app.get('/go1521', (req, res) => {\n  res.redirect(req.query.url1521);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1522,
    "code": "app.get('/go1521', (req, res) => {\n  const url = String(req.query.url1521 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1523,
    "code": "const JWT_SECRET_1523 = \"super-secret-1523\";\nfunction sign1523(data){ return \"signed-\" + JWT_SECRET_1523; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1524,
    "code": "const JWT_SECRET_1523 = process.env.JWT_SECRET_1523;\nfunction sign1523(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1525,
    "code": "app.get('/login1525', (req, res) => {\n  res.cookie('sid1525', 'token1525');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1526,
    "code": "app.get('/login1525', (req, res) => {\n  res.cookie('sid1525', 'token1525', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1527,
    "code": "app.post('/vote1527', (req, res) => {\n  const choice = req.body.choice1527;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1528,
    "code": "app.post('/vote1527', (req, res) => {\n  const choice = String(req.body.choice1527 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1529,
    "code": "app.post('/register1529', (req, res) => {\n  console.log(\"New user\", req.body.email1529, req.body.password1529);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1530,
    "code": "app.post('/register1529', (req, res) => {\n  console.log(\"New user\", req.body.email1529);\n  const body = { ...req.body }; delete body.password1529;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1531,
    "code": "app.get('/user1531', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1531 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1532,
    "code": "app.get('/user1531', async (req, res) => {\n  const u = String(req.query.u1531 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1533,
    "code": "app.post('/zip1533', (req, res) => {\n  const archive = \"archive_1533.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1533;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1534,
    "code": "app.post('/zip1533', (req, res) => {\n  const archive = \"archive_1533.zip\";\n  const dir = String(req.body.dir1533 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1535,
    "code": "app.post('/cfg1535', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1535 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1536,
    "code": "app.post('/cfg1535', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1535 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1537,
    "code": "app.use('/api1537', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1538,
    "code": "const allowedOrigins1537 = new Set([\"https://example1537.com\"]);\napp.use('/api1537', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1537.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1539,
    "code": "app.get('/fetch1539', async (req, res) => {\n  const r = await fetch(req.query.url1539);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1540,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1539', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1539 || \"\"));\n    const allowedHosts = new Set([\"example1539.com\",\"api1539.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1541,
    "code": "app.post('/auth1541', async (req, res) => {\n  const ok = await authUser(req.body.u1541, req.body.p1541);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1542,
    "code": "const attempts1541 = new Map();\napp.post('/auth1541', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1541.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1541.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1541, req.body.p1541);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1543,
    "code": "app.post('/upload1543', (req, res) => {\n  req.files.file1543.mv(\"./uploads/\" + req.files.file1543.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1544,
    "code": "const path_up1543 = require('path');\napp.post('/upload1543', (req, res) => {\n  const f = req.files && req.files.file1543;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1543.basename(f.name);\n  f.mv(path_up1543.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1545,
    "code": "router.get('/acct1545', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1545 WHERE id = \" + req.query.id1545)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1546,
    "code": "router.get('/acct1545', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1545 WHERE id = ?\", [req.query.id1545])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1547,
    "code": "app.get('/hello1547', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1547 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1548,
    "code": "const escapeHtml1547 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1547', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1547(req.query.name1547 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1549,
    "code": "app.get('/read1549', (req, res) => {\n  const p = \"./files/\" + req.query.file1549;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1550,
    "code": "const path1549 = require('path');\napp.get('/read1549', (req, res) => {\n  const base = path1549.join(__dirname, 'files');\n  const safe = path1549.join(base, path1549.basename(String(req.query.file1549 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1551,
    "code": "app.get('/go1551', (req, res) => {\n  res.redirect(req.query.url1551);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1552,
    "code": "app.get('/go1551', (req, res) => {\n  const url = String(req.query.url1551 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1553,
    "code": "const JWT_SECRET_1553 = \"super-secret-1553\";\nfunction sign1553(data){ return \"signed-\" + JWT_SECRET_1553; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1554,
    "code": "const JWT_SECRET_1553 = process.env.JWT_SECRET_1553;\nfunction sign1553(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1555,
    "code": "app.get('/login1555', (req, res) => {\n  res.cookie('sid1555', 'token1555');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1556,
    "code": "app.get('/login1555', (req, res) => {\n  res.cookie('sid1555', 'token1555', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1557,
    "code": "app.post('/vote1557', (req, res) => {\n  const choice = req.body.choice1557;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1558,
    "code": "app.post('/vote1557', (req, res) => {\n  const choice = String(req.body.choice1557 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1559,
    "code": "app.post('/register1559', (req, res) => {\n  console.log(\"New user\", req.body.email1559, req.body.password1559);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1560,
    "code": "app.post('/register1559', (req, res) => {\n  console.log(\"New user\", req.body.email1559);\n  const body = { ...req.body }; delete body.password1559;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1561,
    "code": "app.get('/user1561', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1561 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1562,
    "code": "app.get('/user1561', async (req, res) => {\n  const u = String(req.query.u1561 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1563,
    "code": "app.post('/zip1563', (req, res) => {\n  const archive = \"archive_1563.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1563;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1564,
    "code": "app.post('/zip1563', (req, res) => {\n  const archive = \"archive_1563.zip\";\n  const dir = String(req.body.dir1563 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1565,
    "code": "app.post('/cfg1565', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1565 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1566,
    "code": "app.post('/cfg1565', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1565 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1567,
    "code": "app.use('/api1567', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1568,
    "code": "const allowedOrigins1567 = new Set([\"https://example1567.com\"]);\napp.use('/api1567', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1567.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1569,
    "code": "app.get('/fetch1569', async (req, res) => {\n  const r = await fetch(req.query.url1569);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1570,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1569', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1569 || \"\"));\n    const allowedHosts = new Set([\"example1569.com\",\"api1569.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1571,
    "code": "app.post('/auth1571', async (req, res) => {\n  const ok = await authUser(req.body.u1571, req.body.p1571);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1572,
    "code": "const attempts1571 = new Map();\napp.post('/auth1571', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1571.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1571.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1571, req.body.p1571);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1573,
    "code": "app.post('/upload1573', (req, res) => {\n  req.files.file1573.mv(\"./uploads/\" + req.files.file1573.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1574,
    "code": "const path_up1573 = require('path');\napp.post('/upload1573', (req, res) => {\n  const f = req.files && req.files.file1573;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1573.basename(f.name);\n  f.mv(path_up1573.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1575,
    "code": "router.get('/acct1575', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1575 WHERE id = \" + req.query.id1575)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1576,
    "code": "router.get('/acct1575', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1575 WHERE id = ?\", [req.query.id1575])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1577,
    "code": "app.get('/hello1577', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1577 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1578,
    "code": "const escapeHtml1577 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1577', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1577(req.query.name1577 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1579,
    "code": "app.get('/read1579', (req, res) => {\n  const p = \"./files/\" + req.query.file1579;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1580,
    "code": "const path1579 = require('path');\napp.get('/read1579', (req, res) => {\n  const base = path1579.join(__dirname, 'files');\n  const safe = path1579.join(base, path1579.basename(String(req.query.file1579 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1581,
    "code": "app.get('/go1581', (req, res) => {\n  res.redirect(req.query.url1581);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1582,
    "code": "app.get('/go1581', (req, res) => {\n  const url = String(req.query.url1581 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1583,
    "code": "const JWT_SECRET_1583 = \"super-secret-1583\";\nfunction sign1583(data){ return \"signed-\" + JWT_SECRET_1583; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1584,
    "code": "const JWT_SECRET_1583 = process.env.JWT_SECRET_1583;\nfunction sign1583(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1585,
    "code": "app.get('/login1585', (req, res) => {\n  res.cookie('sid1585', 'token1585');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1586,
    "code": "app.get('/login1585', (req, res) => {\n  res.cookie('sid1585', 'token1585', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1587,
    "code": "app.post('/vote1587', (req, res) => {\n  const choice = req.body.choice1587;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1588,
    "code": "app.post('/vote1587', (req, res) => {\n  const choice = String(req.body.choice1587 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1589,
    "code": "app.post('/register1589', (req, res) => {\n  console.log(\"New user\", req.body.email1589, req.body.password1589);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1590,
    "code": "app.post('/register1589', (req, res) => {\n  console.log(\"New user\", req.body.email1589);\n  const body = { ...req.body }; delete body.password1589;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1591,
    "code": "app.get('/user1591', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1591 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1592,
    "code": "app.get('/user1591', async (req, res) => {\n  const u = String(req.query.u1591 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1593,
    "code": "app.post('/zip1593', (req, res) => {\n  const archive = \"archive_1593.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1593;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1594,
    "code": "app.post('/zip1593', (req, res) => {\n  const archive = \"archive_1593.zip\";\n  const dir = String(req.body.dir1593 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1595,
    "code": "app.post('/cfg1595', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1595 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1596,
    "code": "app.post('/cfg1595', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1595 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1597,
    "code": "app.use('/api1597', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1598,
    "code": "const allowedOrigins1597 = new Set([\"https://example1597.com\"]);\napp.use('/api1597', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1597.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1599,
    "code": "app.get('/fetch1599', async (req, res) => {\n  const r = await fetch(req.query.url1599);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1600,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1599', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1599 || \"\"));\n    const allowedHosts = new Set([\"example1599.com\",\"api1599.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1601,
    "code": "app.post('/auth1601', async (req, res) => {\n  const ok = await authUser(req.body.u1601, req.body.p1601);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1602,
    "code": "const attempts1601 = new Map();\napp.post('/auth1601', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1601.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1601.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1601, req.body.p1601);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1603,
    "code": "app.post('/upload1603', (req, res) => {\n  req.files.file1603.mv(\"./uploads/\" + req.files.file1603.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1604,
    "code": "const path_up1603 = require('path');\napp.post('/upload1603', (req, res) => {\n  const f = req.files && req.files.file1603;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1603.basename(f.name);\n  f.mv(path_up1603.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1605,
    "code": "router.get('/acct1605', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1605 WHERE id = \" + req.query.id1605)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1606,
    "code": "router.get('/acct1605', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1605 WHERE id = ?\", [req.query.id1605])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1607,
    "code": "app.get('/hello1607', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1607 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1608,
    "code": "const escapeHtml1607 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1607', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1607(req.query.name1607 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1609,
    "code": "app.get('/read1609', (req, res) => {\n  const p = \"./files/\" + req.query.file1609;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1610,
    "code": "const path1609 = require('path');\napp.get('/read1609', (req, res) => {\n  const base = path1609.join(__dirname, 'files');\n  const safe = path1609.join(base, path1609.basename(String(req.query.file1609 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1611,
    "code": "app.get('/go1611', (req, res) => {\n  res.redirect(req.query.url1611);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1612,
    "code": "app.get('/go1611', (req, res) => {\n  const url = String(req.query.url1611 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1613,
    "code": "const JWT_SECRET_1613 = \"super-secret-1613\";\nfunction sign1613(data){ return \"signed-\" + JWT_SECRET_1613; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1614,
    "code": "const JWT_SECRET_1613 = process.env.JWT_SECRET_1613;\nfunction sign1613(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1615,
    "code": "app.get('/login1615', (req, res) => {\n  res.cookie('sid1615', 'token1615');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1616,
    "code": "app.get('/login1615', (req, res) => {\n  res.cookie('sid1615', 'token1615', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1617,
    "code": "app.post('/vote1617', (req, res) => {\n  const choice = req.body.choice1617;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1618,
    "code": "app.post('/vote1617', (req, res) => {\n  const choice = String(req.body.choice1617 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1619,
    "code": "app.post('/register1619', (req, res) => {\n  console.log(\"New user\", req.body.email1619, req.body.password1619);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1620,
    "code": "app.post('/register1619', (req, res) => {\n  console.log(\"New user\", req.body.email1619);\n  const body = { ...req.body }; delete body.password1619;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1621,
    "code": "app.get('/user1621', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1621 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1622,
    "code": "app.get('/user1621', async (req, res) => {\n  const u = String(req.query.u1621 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1623,
    "code": "app.post('/zip1623', (req, res) => {\n  const archive = \"archive_1623.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1623;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1624,
    "code": "app.post('/zip1623', (req, res) => {\n  const archive = \"archive_1623.zip\";\n  const dir = String(req.body.dir1623 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1625,
    "code": "app.post('/cfg1625', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1625 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1626,
    "code": "app.post('/cfg1625', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1625 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1627,
    "code": "app.use('/api1627', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1628,
    "code": "const allowedOrigins1627 = new Set([\"https://example1627.com\"]);\napp.use('/api1627', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1627.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1629,
    "code": "app.get('/fetch1629', async (req, res) => {\n  const r = await fetch(req.query.url1629);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1630,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1629', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1629 || \"\"));\n    const allowedHosts = new Set([\"example1629.com\",\"api1629.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1631,
    "code": "app.post('/auth1631', async (req, res) => {\n  const ok = await authUser(req.body.u1631, req.body.p1631);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1632,
    "code": "const attempts1631 = new Map();\napp.post('/auth1631', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1631.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1631.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1631, req.body.p1631);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1633,
    "code": "app.post('/upload1633', (req, res) => {\n  req.files.file1633.mv(\"./uploads/\" + req.files.file1633.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1634,
    "code": "const path_up1633 = require('path');\napp.post('/upload1633', (req, res) => {\n  const f = req.files && req.files.file1633;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1633.basename(f.name);\n  f.mv(path_up1633.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1635,
    "code": "router.get('/acct1635', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1635 WHERE id = \" + req.query.id1635)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1636,
    "code": "router.get('/acct1635', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1635 WHERE id = ?\", [req.query.id1635])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1637,
    "code": "app.get('/hello1637', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1637 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1638,
    "code": "const escapeHtml1637 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1637', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1637(req.query.name1637 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1639,
    "code": "app.get('/read1639', (req, res) => {\n  const p = \"./files/\" + req.query.file1639;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1640,
    "code": "const path1639 = require('path');\napp.get('/read1639', (req, res) => {\n  const base = path1639.join(__dirname, 'files');\n  const safe = path1639.join(base, path1639.basename(String(req.query.file1639 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1641,
    "code": "app.get('/go1641', (req, res) => {\n  res.redirect(req.query.url1641);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1642,
    "code": "app.get('/go1641', (req, res) => {\n  const url = String(req.query.url1641 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1643,
    "code": "const JWT_SECRET_1643 = \"super-secret-1643\";\nfunction sign1643(data){ return \"signed-\" + JWT_SECRET_1643; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1644,
    "code": "const JWT_SECRET_1643 = process.env.JWT_SECRET_1643;\nfunction sign1643(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1645,
    "code": "app.get('/login1645', (req, res) => {\n  res.cookie('sid1645', 'token1645');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1646,
    "code": "app.get('/login1645', (req, res) => {\n  res.cookie('sid1645', 'token1645', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1647,
    "code": "app.post('/vote1647', (req, res) => {\n  const choice = req.body.choice1647;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1648,
    "code": "app.post('/vote1647', (req, res) => {\n  const choice = String(req.body.choice1647 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1649,
    "code": "app.post('/register1649', (req, res) => {\n  console.log(\"New user\", req.body.email1649, req.body.password1649);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1650,
    "code": "app.post('/register1649', (req, res) => {\n  console.log(\"New user\", req.body.email1649);\n  const body = { ...req.body }; delete body.password1649;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1651,
    "code": "app.get('/user1651', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1651 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1652,
    "code": "app.get('/user1651', async (req, res) => {\n  const u = String(req.query.u1651 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1653,
    "code": "app.post('/zip1653', (req, res) => {\n  const archive = \"archive_1653.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1653;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1654,
    "code": "app.post('/zip1653', (req, res) => {\n  const archive = \"archive_1653.zip\";\n  const dir = String(req.body.dir1653 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1655,
    "code": "app.post('/cfg1655', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1655 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1656,
    "code": "app.post('/cfg1655', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1655 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1657,
    "code": "app.use('/api1657', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1658,
    "code": "const allowedOrigins1657 = new Set([\"https://example1657.com\"]);\napp.use('/api1657', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1657.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1659,
    "code": "app.get('/fetch1659', async (req, res) => {\n  const r = await fetch(req.query.url1659);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1660,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1659', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1659 || \"\"));\n    const allowedHosts = new Set([\"example1659.com\",\"api1659.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1661,
    "code": "app.post('/auth1661', async (req, res) => {\n  const ok = await authUser(req.body.u1661, req.body.p1661);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1662,
    "code": "const attempts1661 = new Map();\napp.post('/auth1661', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1661.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1661.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1661, req.body.p1661);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1663,
    "code": "app.post('/upload1663', (req, res) => {\n  req.files.file1663.mv(\"./uploads/\" + req.files.file1663.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1664,
    "code": "const path_up1663 = require('path');\napp.post('/upload1663', (req, res) => {\n  const f = req.files && req.files.file1663;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1663.basename(f.name);\n  f.mv(path_up1663.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1665,
    "code": "router.get('/acct1665', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1665 WHERE id = \" + req.query.id1665)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1666,
    "code": "router.get('/acct1665', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1665 WHERE id = ?\", [req.query.id1665])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1667,
    "code": "app.get('/hello1667', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1667 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1668,
    "code": "const escapeHtml1667 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1667', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1667(req.query.name1667 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1669,
    "code": "app.get('/read1669', (req, res) => {\n  const p = \"./files/\" + req.query.file1669;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1670,
    "code": "const path1669 = require('path');\napp.get('/read1669', (req, res) => {\n  const base = path1669.join(__dirname, 'files');\n  const safe = path1669.join(base, path1669.basename(String(req.query.file1669 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1671,
    "code": "app.get('/go1671', (req, res) => {\n  res.redirect(req.query.url1671);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1672,
    "code": "app.get('/go1671', (req, res) => {\n  const url = String(req.query.url1671 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1673,
    "code": "const JWT_SECRET_1673 = \"super-secret-1673\";\nfunction sign1673(data){ return \"signed-\" + JWT_SECRET_1673; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1674,
    "code": "const JWT_SECRET_1673 = process.env.JWT_SECRET_1673;\nfunction sign1673(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1675,
    "code": "app.get('/login1675', (req, res) => {\n  res.cookie('sid1675', 'token1675');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1676,
    "code": "app.get('/login1675', (req, res) => {\n  res.cookie('sid1675', 'token1675', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1677,
    "code": "app.post('/vote1677', (req, res) => {\n  const choice = req.body.choice1677;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1678,
    "code": "app.post('/vote1677', (req, res) => {\n  const choice = String(req.body.choice1677 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1679,
    "code": "app.post('/register1679', (req, res) => {\n  console.log(\"New user\", req.body.email1679, req.body.password1679);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1680,
    "code": "app.post('/register1679', (req, res) => {\n  console.log(\"New user\", req.body.email1679);\n  const body = { ...req.body }; delete body.password1679;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1681,
    "code": "app.get('/user1681', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1681 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1682,
    "code": "app.get('/user1681', async (req, res) => {\n  const u = String(req.query.u1681 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1683,
    "code": "app.post('/zip1683', (req, res) => {\n  const archive = \"archive_1683.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1683;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1684,
    "code": "app.post('/zip1683', (req, res) => {\n  const archive = \"archive_1683.zip\";\n  const dir = String(req.body.dir1683 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1685,
    "code": "app.post('/cfg1685', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1685 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1686,
    "code": "app.post('/cfg1685', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1685 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1687,
    "code": "app.use('/api1687', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1688,
    "code": "const allowedOrigins1687 = new Set([\"https://example1687.com\"]);\napp.use('/api1687', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1687.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1689,
    "code": "app.get('/fetch1689', async (req, res) => {\n  const r = await fetch(req.query.url1689);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1690,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1689', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1689 || \"\"));\n    const allowedHosts = new Set([\"example1689.com\",\"api1689.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1691,
    "code": "app.post('/auth1691', async (req, res) => {\n  const ok = await authUser(req.body.u1691, req.body.p1691);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1692,
    "code": "const attempts1691 = new Map();\napp.post('/auth1691', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1691.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1691.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1691, req.body.p1691);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1693,
    "code": "app.post('/upload1693', (req, res) => {\n  req.files.file1693.mv(\"./uploads/\" + req.files.file1693.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1694,
    "code": "const path_up1693 = require('path');\napp.post('/upload1693', (req, res) => {\n  const f = req.files && req.files.file1693;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1693.basename(f.name);\n  f.mv(path_up1693.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1695,
    "code": "router.get('/acct1695', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1695 WHERE id = \" + req.query.id1695)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1696,
    "code": "router.get('/acct1695', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1695 WHERE id = ?\", [req.query.id1695])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1697,
    "code": "app.get('/hello1697', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1697 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1698,
    "code": "const escapeHtml1697 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1697', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1697(req.query.name1697 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1699,
    "code": "app.get('/read1699', (req, res) => {\n  const p = \"./files/\" + req.query.file1699;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1700,
    "code": "const path1699 = require('path');\napp.get('/read1699', (req, res) => {\n  const base = path1699.join(__dirname, 'files');\n  const safe = path1699.join(base, path1699.basename(String(req.query.file1699 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1701,
    "code": "app.get('/go1701', (req, res) => {\n  res.redirect(req.query.url1701);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1702,
    "code": "app.get('/go1701', (req, res) => {\n  const url = String(req.query.url1701 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1703,
    "code": "const JWT_SECRET_1703 = \"super-secret-1703\";\nfunction sign1703(data){ return \"signed-\" + JWT_SECRET_1703; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1704,
    "code": "const JWT_SECRET_1703 = process.env.JWT_SECRET_1703;\nfunction sign1703(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1705,
    "code": "app.get('/login1705', (req, res) => {\n  res.cookie('sid1705', 'token1705');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1706,
    "code": "app.get('/login1705', (req, res) => {\n  res.cookie('sid1705', 'token1705', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1707,
    "code": "app.post('/vote1707', (req, res) => {\n  const choice = req.body.choice1707;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1708,
    "code": "app.post('/vote1707', (req, res) => {\n  const choice = String(req.body.choice1707 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1709,
    "code": "app.post('/register1709', (req, res) => {\n  console.log(\"New user\", req.body.email1709, req.body.password1709);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1710,
    "code": "app.post('/register1709', (req, res) => {\n  console.log(\"New user\", req.body.email1709);\n  const body = { ...req.body }; delete body.password1709;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1711,
    "code": "app.get('/user1711', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1711 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1712,
    "code": "app.get('/user1711', async (req, res) => {\n  const u = String(req.query.u1711 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1713,
    "code": "app.post('/zip1713', (req, res) => {\n  const archive = \"archive_1713.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1713;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1714,
    "code": "app.post('/zip1713', (req, res) => {\n  const archive = \"archive_1713.zip\";\n  const dir = String(req.body.dir1713 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1715,
    "code": "app.post('/cfg1715', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1715 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1716,
    "code": "app.post('/cfg1715', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1715 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1717,
    "code": "app.use('/api1717', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1718,
    "code": "const allowedOrigins1717 = new Set([\"https://example1717.com\"]);\napp.use('/api1717', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1717.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1719,
    "code": "app.get('/fetch1719', async (req, res) => {\n  const r = await fetch(req.query.url1719);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1720,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1719', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1719 || \"\"));\n    const allowedHosts = new Set([\"example1719.com\",\"api1719.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1721,
    "code": "app.post('/auth1721', async (req, res) => {\n  const ok = await authUser(req.body.u1721, req.body.p1721);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1722,
    "code": "const attempts1721 = new Map();\napp.post('/auth1721', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1721.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1721.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1721, req.body.p1721);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1723,
    "code": "app.post('/upload1723', (req, res) => {\n  req.files.file1723.mv(\"./uploads/\" + req.files.file1723.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1724,
    "code": "const path_up1723 = require('path');\napp.post('/upload1723', (req, res) => {\n  const f = req.files && req.files.file1723;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1723.basename(f.name);\n  f.mv(path_up1723.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1725,
    "code": "router.get('/acct1725', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1725 WHERE id = \" + req.query.id1725)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1726,
    "code": "router.get('/acct1725', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1725 WHERE id = ?\", [req.query.id1725])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1727,
    "code": "app.get('/hello1727', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1727 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1728,
    "code": "const escapeHtml1727 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1727', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1727(req.query.name1727 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1729,
    "code": "app.get('/read1729', (req, res) => {\n  const p = \"./files/\" + req.query.file1729;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1730,
    "code": "const path1729 = require('path');\napp.get('/read1729', (req, res) => {\n  const base = path1729.join(__dirname, 'files');\n  const safe = path1729.join(base, path1729.basename(String(req.query.file1729 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1731,
    "code": "app.get('/go1731', (req, res) => {\n  res.redirect(req.query.url1731);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1732,
    "code": "app.get('/go1731', (req, res) => {\n  const url = String(req.query.url1731 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1733,
    "code": "const JWT_SECRET_1733 = \"super-secret-1733\";\nfunction sign1733(data){ return \"signed-\" + JWT_SECRET_1733; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1734,
    "code": "const JWT_SECRET_1733 = process.env.JWT_SECRET_1733;\nfunction sign1733(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1735,
    "code": "app.get('/login1735', (req, res) => {\n  res.cookie('sid1735', 'token1735');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1736,
    "code": "app.get('/login1735', (req, res) => {\n  res.cookie('sid1735', 'token1735', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1737,
    "code": "app.post('/vote1737', (req, res) => {\n  const choice = req.body.choice1737;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1738,
    "code": "app.post('/vote1737', (req, res) => {\n  const choice = String(req.body.choice1737 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1739,
    "code": "app.post('/register1739', (req, res) => {\n  console.log(\"New user\", req.body.email1739, req.body.password1739);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1740,
    "code": "app.post('/register1739', (req, res) => {\n  console.log(\"New user\", req.body.email1739);\n  const body = { ...req.body }; delete body.password1739;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1741,
    "code": "app.get('/user1741', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1741 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1742,
    "code": "app.get('/user1741', async (req, res) => {\n  const u = String(req.query.u1741 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1743,
    "code": "app.post('/zip1743', (req, res) => {\n  const archive = \"archive_1743.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1743;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1744,
    "code": "app.post('/zip1743', (req, res) => {\n  const archive = \"archive_1743.zip\";\n  const dir = String(req.body.dir1743 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1745,
    "code": "app.post('/cfg1745', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1745 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1746,
    "code": "app.post('/cfg1745', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1745 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1747,
    "code": "app.use('/api1747', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1748,
    "code": "const allowedOrigins1747 = new Set([\"https://example1747.com\"]);\napp.use('/api1747', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1747.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1749,
    "code": "app.get('/fetch1749', async (req, res) => {\n  const r = await fetch(req.query.url1749);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1750,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1749', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1749 || \"\"));\n    const allowedHosts = new Set([\"example1749.com\",\"api1749.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1751,
    "code": "app.post('/auth1751', async (req, res) => {\n  const ok = await authUser(req.body.u1751, req.body.p1751);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1752,
    "code": "const attempts1751 = new Map();\napp.post('/auth1751', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1751.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1751.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1751, req.body.p1751);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1753,
    "code": "app.post('/upload1753', (req, res) => {\n  req.files.file1753.mv(\"./uploads/\" + req.files.file1753.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1754,
    "code": "const path_up1753 = require('path');\napp.post('/upload1753', (req, res) => {\n  const f = req.files && req.files.file1753;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1753.basename(f.name);\n  f.mv(path_up1753.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1755,
    "code": "router.get('/acct1755', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1755 WHERE id = \" + req.query.id1755)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1756,
    "code": "router.get('/acct1755', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1755 WHERE id = ?\", [req.query.id1755])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1757,
    "code": "app.get('/hello1757', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1757 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1758,
    "code": "const escapeHtml1757 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1757', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1757(req.query.name1757 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1759,
    "code": "app.get('/read1759', (req, res) => {\n  const p = \"./files/\" + req.query.file1759;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1760,
    "code": "const path1759 = require('path');\napp.get('/read1759', (req, res) => {\n  const base = path1759.join(__dirname, 'files');\n  const safe = path1759.join(base, path1759.basename(String(req.query.file1759 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1761,
    "code": "app.get('/go1761', (req, res) => {\n  res.redirect(req.query.url1761);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1762,
    "code": "app.get('/go1761', (req, res) => {\n  const url = String(req.query.url1761 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1763,
    "code": "const JWT_SECRET_1763 = \"super-secret-1763\";\nfunction sign1763(data){ return \"signed-\" + JWT_SECRET_1763; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1764,
    "code": "const JWT_SECRET_1763 = process.env.JWT_SECRET_1763;\nfunction sign1763(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1765,
    "code": "app.get('/login1765', (req, res) => {\n  res.cookie('sid1765', 'token1765');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1766,
    "code": "app.get('/login1765', (req, res) => {\n  res.cookie('sid1765', 'token1765', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1767,
    "code": "app.post('/vote1767', (req, res) => {\n  const choice = req.body.choice1767;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1768,
    "code": "app.post('/vote1767', (req, res) => {\n  const choice = String(req.body.choice1767 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1769,
    "code": "app.post('/register1769', (req, res) => {\n  console.log(\"New user\", req.body.email1769, req.body.password1769);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1770,
    "code": "app.post('/register1769', (req, res) => {\n  console.log(\"New user\", req.body.email1769);\n  const body = { ...req.body }; delete body.password1769;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1771,
    "code": "app.get('/user1771', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1771 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1772,
    "code": "app.get('/user1771', async (req, res) => {\n  const u = String(req.query.u1771 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1773,
    "code": "app.post('/zip1773', (req, res) => {\n  const archive = \"archive_1773.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1773;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1774,
    "code": "app.post('/zip1773', (req, res) => {\n  const archive = \"archive_1773.zip\";\n  const dir = String(req.body.dir1773 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1775,
    "code": "app.post('/cfg1775', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1775 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1776,
    "code": "app.post('/cfg1775', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1775 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1777,
    "code": "app.use('/api1777', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1778,
    "code": "const allowedOrigins1777 = new Set([\"https://example1777.com\"]);\napp.use('/api1777', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1777.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1779,
    "code": "app.get('/fetch1779', async (req, res) => {\n  const r = await fetch(req.query.url1779);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1780,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1779', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1779 || \"\"));\n    const allowedHosts = new Set([\"example1779.com\",\"api1779.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1781,
    "code": "app.post('/auth1781', async (req, res) => {\n  const ok = await authUser(req.body.u1781, req.body.p1781);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1782,
    "code": "const attempts1781 = new Map();\napp.post('/auth1781', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1781.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1781.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1781, req.body.p1781);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1783,
    "code": "app.post('/upload1783', (req, res) => {\n  req.files.file1783.mv(\"./uploads/\" + req.files.file1783.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1784,
    "code": "const path_up1783 = require('path');\napp.post('/upload1783', (req, res) => {\n  const f = req.files && req.files.file1783;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1783.basename(f.name);\n  f.mv(path_up1783.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1785,
    "code": "router.get('/acct1785', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1785 WHERE id = \" + req.query.id1785)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1786,
    "code": "router.get('/acct1785', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1785 WHERE id = ?\", [req.query.id1785])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1787,
    "code": "app.get('/hello1787', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1787 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1788,
    "code": "const escapeHtml1787 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1787', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1787(req.query.name1787 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1789,
    "code": "app.get('/read1789', (req, res) => {\n  const p = \"./files/\" + req.query.file1789;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1790,
    "code": "const path1789 = require('path');\napp.get('/read1789', (req, res) => {\n  const base = path1789.join(__dirname, 'files');\n  const safe = path1789.join(base, path1789.basename(String(req.query.file1789 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1791,
    "code": "app.get('/go1791', (req, res) => {\n  res.redirect(req.query.url1791);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1792,
    "code": "app.get('/go1791', (req, res) => {\n  const url = String(req.query.url1791 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1793,
    "code": "const JWT_SECRET_1793 = \"super-secret-1793\";\nfunction sign1793(data){ return \"signed-\" + JWT_SECRET_1793; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1794,
    "code": "const JWT_SECRET_1793 = process.env.JWT_SECRET_1793;\nfunction sign1793(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1795,
    "code": "app.get('/login1795', (req, res) => {\n  res.cookie('sid1795', 'token1795');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1796,
    "code": "app.get('/login1795', (req, res) => {\n  res.cookie('sid1795', 'token1795', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1797,
    "code": "app.post('/vote1797', (req, res) => {\n  const choice = req.body.choice1797;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1798,
    "code": "app.post('/vote1797', (req, res) => {\n  const choice = String(req.body.choice1797 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1799,
    "code": "app.post('/register1799', (req, res) => {\n  console.log(\"New user\", req.body.email1799, req.body.password1799);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1800,
    "code": "app.post('/register1799', (req, res) => {\n  console.log(\"New user\", req.body.email1799);\n  const body = { ...req.body }; delete body.password1799;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1801,
    "code": "app.get('/user1801', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1801 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1802,
    "code": "app.get('/user1801', async (req, res) => {\n  const u = String(req.query.u1801 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1803,
    "code": "app.post('/zip1803', (req, res) => {\n  const archive = \"archive_1803.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1803;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1804,
    "code": "app.post('/zip1803', (req, res) => {\n  const archive = \"archive_1803.zip\";\n  const dir = String(req.body.dir1803 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1805,
    "code": "app.post('/cfg1805', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1805 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1806,
    "code": "app.post('/cfg1805', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1805 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1807,
    "code": "app.use('/api1807', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1808,
    "code": "const allowedOrigins1807 = new Set([\"https://example1807.com\"]);\napp.use('/api1807', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1807.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1809,
    "code": "app.get('/fetch1809', async (req, res) => {\n  const r = await fetch(req.query.url1809);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1810,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1809', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1809 || \"\"));\n    const allowedHosts = new Set([\"example1809.com\",\"api1809.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1811,
    "code": "app.post('/auth1811', async (req, res) => {\n  const ok = await authUser(req.body.u1811, req.body.p1811);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1812,
    "code": "const attempts1811 = new Map();\napp.post('/auth1811', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1811.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1811.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1811, req.body.p1811);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1813,
    "code": "app.post('/upload1813', (req, res) => {\n  req.files.file1813.mv(\"./uploads/\" + req.files.file1813.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1814,
    "code": "const path_up1813 = require('path');\napp.post('/upload1813', (req, res) => {\n  const f = req.files && req.files.file1813;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1813.basename(f.name);\n  f.mv(path_up1813.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1815,
    "code": "router.get('/acct1815', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1815 WHERE id = \" + req.query.id1815)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1816,
    "code": "router.get('/acct1815', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1815 WHERE id = ?\", [req.query.id1815])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1817,
    "code": "app.get('/hello1817', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1817 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1818,
    "code": "const escapeHtml1817 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1817', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1817(req.query.name1817 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1819,
    "code": "app.get('/read1819', (req, res) => {\n  const p = \"./files/\" + req.query.file1819;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1820,
    "code": "const path1819 = require('path');\napp.get('/read1819', (req, res) => {\n  const base = path1819.join(__dirname, 'files');\n  const safe = path1819.join(base, path1819.basename(String(req.query.file1819 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1821,
    "code": "app.get('/go1821', (req, res) => {\n  res.redirect(req.query.url1821);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1822,
    "code": "app.get('/go1821', (req, res) => {\n  const url = String(req.query.url1821 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1823,
    "code": "const JWT_SECRET_1823 = \"super-secret-1823\";\nfunction sign1823(data){ return \"signed-\" + JWT_SECRET_1823; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1824,
    "code": "const JWT_SECRET_1823 = process.env.JWT_SECRET_1823;\nfunction sign1823(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1825,
    "code": "app.get('/login1825', (req, res) => {\n  res.cookie('sid1825', 'token1825');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1826,
    "code": "app.get('/login1825', (req, res) => {\n  res.cookie('sid1825', 'token1825', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1827,
    "code": "app.post('/vote1827', (req, res) => {\n  const choice = req.body.choice1827;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1828,
    "code": "app.post('/vote1827', (req, res) => {\n  const choice = String(req.body.choice1827 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1829,
    "code": "app.post('/register1829', (req, res) => {\n  console.log(\"New user\", req.body.email1829, req.body.password1829);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1830,
    "code": "app.post('/register1829', (req, res) => {\n  console.log(\"New user\", req.body.email1829);\n  const body = { ...req.body }; delete body.password1829;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1831,
    "code": "app.get('/user1831', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1831 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1832,
    "code": "app.get('/user1831', async (req, res) => {\n  const u = String(req.query.u1831 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1833,
    "code": "app.post('/zip1833', (req, res) => {\n  const archive = \"archive_1833.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1833;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1834,
    "code": "app.post('/zip1833', (req, res) => {\n  const archive = \"archive_1833.zip\";\n  const dir = String(req.body.dir1833 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1835,
    "code": "app.post('/cfg1835', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1835 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1836,
    "code": "app.post('/cfg1835', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1835 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1837,
    "code": "app.use('/api1837', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1838,
    "code": "const allowedOrigins1837 = new Set([\"https://example1837.com\"]);\napp.use('/api1837', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1837.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1839,
    "code": "app.get('/fetch1839', async (req, res) => {\n  const r = await fetch(req.query.url1839);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1840,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1839', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1839 || \"\"));\n    const allowedHosts = new Set([\"example1839.com\",\"api1839.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1841,
    "code": "app.post('/auth1841', async (req, res) => {\n  const ok = await authUser(req.body.u1841, req.body.p1841);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1842,
    "code": "const attempts1841 = new Map();\napp.post('/auth1841', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1841.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1841.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1841, req.body.p1841);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1843,
    "code": "app.post('/upload1843', (req, res) => {\n  req.files.file1843.mv(\"./uploads/\" + req.files.file1843.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1844,
    "code": "const path_up1843 = require('path');\napp.post('/upload1843', (req, res) => {\n  const f = req.files && req.files.file1843;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1843.basename(f.name);\n  f.mv(path_up1843.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1845,
    "code": "router.get('/acct1845', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1845 WHERE id = \" + req.query.id1845)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1846,
    "code": "router.get('/acct1845', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1845 WHERE id = ?\", [req.query.id1845])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1847,
    "code": "app.get('/hello1847', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1847 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1848,
    "code": "const escapeHtml1847 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1847', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1847(req.query.name1847 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1849,
    "code": "app.get('/read1849', (req, res) => {\n  const p = \"./files/\" + req.query.file1849;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1850,
    "code": "const path1849 = require('path');\napp.get('/read1849', (req, res) => {\n  const base = path1849.join(__dirname, 'files');\n  const safe = path1849.join(base, path1849.basename(String(req.query.file1849 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1851,
    "code": "app.get('/go1851', (req, res) => {\n  res.redirect(req.query.url1851);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1852,
    "code": "app.get('/go1851', (req, res) => {\n  const url = String(req.query.url1851 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1853,
    "code": "const JWT_SECRET_1853 = \"super-secret-1853\";\nfunction sign1853(data){ return \"signed-\" + JWT_SECRET_1853; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1854,
    "code": "const JWT_SECRET_1853 = process.env.JWT_SECRET_1853;\nfunction sign1853(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1855,
    "code": "app.get('/login1855', (req, res) => {\n  res.cookie('sid1855', 'token1855');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1856,
    "code": "app.get('/login1855', (req, res) => {\n  res.cookie('sid1855', 'token1855', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1857,
    "code": "app.post('/vote1857', (req, res) => {\n  const choice = req.body.choice1857;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1858,
    "code": "app.post('/vote1857', (req, res) => {\n  const choice = String(req.body.choice1857 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1859,
    "code": "app.post('/register1859', (req, res) => {\n  console.log(\"New user\", req.body.email1859, req.body.password1859);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1860,
    "code": "app.post('/register1859', (req, res) => {\n  console.log(\"New user\", req.body.email1859);\n  const body = { ...req.body }; delete body.password1859;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1861,
    "code": "app.get('/user1861', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1861 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1862,
    "code": "app.get('/user1861', async (req, res) => {\n  const u = String(req.query.u1861 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1863,
    "code": "app.post('/zip1863', (req, res) => {\n  const archive = \"archive_1863.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1863;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1864,
    "code": "app.post('/zip1863', (req, res) => {\n  const archive = \"archive_1863.zip\";\n  const dir = String(req.body.dir1863 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1865,
    "code": "app.post('/cfg1865', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1865 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1866,
    "code": "app.post('/cfg1865', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1865 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1867,
    "code": "app.use('/api1867', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1868,
    "code": "const allowedOrigins1867 = new Set([\"https://example1867.com\"]);\napp.use('/api1867', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1867.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1869,
    "code": "app.get('/fetch1869', async (req, res) => {\n  const r = await fetch(req.query.url1869);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1870,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1869', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1869 || \"\"));\n    const allowedHosts = new Set([\"example1869.com\",\"api1869.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1871,
    "code": "app.post('/auth1871', async (req, res) => {\n  const ok = await authUser(req.body.u1871, req.body.p1871);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1872,
    "code": "const attempts1871 = new Map();\napp.post('/auth1871', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1871.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1871.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1871, req.body.p1871);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1873,
    "code": "app.post('/upload1873', (req, res) => {\n  req.files.file1873.mv(\"./uploads/\" + req.files.file1873.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1874,
    "code": "const path_up1873 = require('path');\napp.post('/upload1873', (req, res) => {\n  const f = req.files && req.files.file1873;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1873.basename(f.name);\n  f.mv(path_up1873.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1875,
    "code": "router.get('/acct1875', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1875 WHERE id = \" + req.query.id1875)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1876,
    "code": "router.get('/acct1875', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1875 WHERE id = ?\", [req.query.id1875])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1877,
    "code": "app.get('/hello1877', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1877 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1878,
    "code": "const escapeHtml1877 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1877', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1877(req.query.name1877 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1879,
    "code": "app.get('/read1879', (req, res) => {\n  const p = \"./files/\" + req.query.file1879;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1880,
    "code": "const path1879 = require('path');\napp.get('/read1879', (req, res) => {\n  const base = path1879.join(__dirname, 'files');\n  const safe = path1879.join(base, path1879.basename(String(req.query.file1879 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1881,
    "code": "app.get('/go1881', (req, res) => {\n  res.redirect(req.query.url1881);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1882,
    "code": "app.get('/go1881', (req, res) => {\n  const url = String(req.query.url1881 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1883,
    "code": "const JWT_SECRET_1883 = \"super-secret-1883\";\nfunction sign1883(data){ return \"signed-\" + JWT_SECRET_1883; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1884,
    "code": "const JWT_SECRET_1883 = process.env.JWT_SECRET_1883;\nfunction sign1883(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1885,
    "code": "app.get('/login1885', (req, res) => {\n  res.cookie('sid1885', 'token1885');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1886,
    "code": "app.get('/login1885', (req, res) => {\n  res.cookie('sid1885', 'token1885', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1887,
    "code": "app.post('/vote1887', (req, res) => {\n  const choice = req.body.choice1887;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1888,
    "code": "app.post('/vote1887', (req, res) => {\n  const choice = String(req.body.choice1887 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1889,
    "code": "app.post('/register1889', (req, res) => {\n  console.log(\"New user\", req.body.email1889, req.body.password1889);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1890,
    "code": "app.post('/register1889', (req, res) => {\n  console.log(\"New user\", req.body.email1889);\n  const body = { ...req.body }; delete body.password1889;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1891,
    "code": "app.get('/user1891', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1891 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1892,
    "code": "app.get('/user1891', async (req, res) => {\n  const u = String(req.query.u1891 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1893,
    "code": "app.post('/zip1893', (req, res) => {\n  const archive = \"archive_1893.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1893;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1894,
    "code": "app.post('/zip1893', (req, res) => {\n  const archive = \"archive_1893.zip\";\n  const dir = String(req.body.dir1893 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1895,
    "code": "app.post('/cfg1895', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1895 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1896,
    "code": "app.post('/cfg1895', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1895 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1897,
    "code": "app.use('/api1897', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1898,
    "code": "const allowedOrigins1897 = new Set([\"https://example1897.com\"]);\napp.use('/api1897', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1897.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1899,
    "code": "app.get('/fetch1899', async (req, res) => {\n  const r = await fetch(req.query.url1899);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1900,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1899', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1899 || \"\"));\n    const allowedHosts = new Set([\"example1899.com\",\"api1899.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1901,
    "code": "app.post('/auth1901', async (req, res) => {\n  const ok = await authUser(req.body.u1901, req.body.p1901);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1902,
    "code": "const attempts1901 = new Map();\napp.post('/auth1901', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1901.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1901.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1901, req.body.p1901);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1903,
    "code": "app.post('/upload1903', (req, res) => {\n  req.files.file1903.mv(\"./uploads/\" + req.files.file1903.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1904,
    "code": "const path_up1903 = require('path');\napp.post('/upload1903', (req, res) => {\n  const f = req.files && req.files.file1903;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1903.basename(f.name);\n  f.mv(path_up1903.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1905,
    "code": "router.get('/acct1905', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1905 WHERE id = \" + req.query.id1905)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1906,
    "code": "router.get('/acct1905', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1905 WHERE id = ?\", [req.query.id1905])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1907,
    "code": "app.get('/hello1907', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1907 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1908,
    "code": "const escapeHtml1907 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1907', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1907(req.query.name1907 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1909,
    "code": "app.get('/read1909', (req, res) => {\n  const p = \"./files/\" + req.query.file1909;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1910,
    "code": "const path1909 = require('path');\napp.get('/read1909', (req, res) => {\n  const base = path1909.join(__dirname, 'files');\n  const safe = path1909.join(base, path1909.basename(String(req.query.file1909 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1911,
    "code": "app.get('/go1911', (req, res) => {\n  res.redirect(req.query.url1911);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1912,
    "code": "app.get('/go1911', (req, res) => {\n  const url = String(req.query.url1911 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1913,
    "code": "const JWT_SECRET_1913 = \"super-secret-1913\";\nfunction sign1913(data){ return \"signed-\" + JWT_SECRET_1913; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1914,
    "code": "const JWT_SECRET_1913 = process.env.JWT_SECRET_1913;\nfunction sign1913(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1915,
    "code": "app.get('/login1915', (req, res) => {\n  res.cookie('sid1915', 'token1915');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1916,
    "code": "app.get('/login1915', (req, res) => {\n  res.cookie('sid1915', 'token1915', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1917,
    "code": "app.post('/vote1917', (req, res) => {\n  const choice = req.body.choice1917;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1918,
    "code": "app.post('/vote1917', (req, res) => {\n  const choice = String(req.body.choice1917 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1919,
    "code": "app.post('/register1919', (req, res) => {\n  console.log(\"New user\", req.body.email1919, req.body.password1919);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1920,
    "code": "app.post('/register1919', (req, res) => {\n  console.log(\"New user\", req.body.email1919);\n  const body = { ...req.body }; delete body.password1919;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1921,
    "code": "app.get('/user1921', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1921 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1922,
    "code": "app.get('/user1921', async (req, res) => {\n  const u = String(req.query.u1921 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1923,
    "code": "app.post('/zip1923', (req, res) => {\n  const archive = \"archive_1923.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1923;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1924,
    "code": "app.post('/zip1923', (req, res) => {\n  const archive = \"archive_1923.zip\";\n  const dir = String(req.body.dir1923 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1925,
    "code": "app.post('/cfg1925', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1925 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1926,
    "code": "app.post('/cfg1925', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1925 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1927,
    "code": "app.use('/api1927', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1928,
    "code": "const allowedOrigins1927 = new Set([\"https://example1927.com\"]);\napp.use('/api1927', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1927.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1929,
    "code": "app.get('/fetch1929', async (req, res) => {\n  const r = await fetch(req.query.url1929);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1930,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1929', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1929 || \"\"));\n    const allowedHosts = new Set([\"example1929.com\",\"api1929.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1931,
    "code": "app.post('/auth1931', async (req, res) => {\n  const ok = await authUser(req.body.u1931, req.body.p1931);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1932,
    "code": "const attempts1931 = new Map();\napp.post('/auth1931', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1931.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1931.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1931, req.body.p1931);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1933,
    "code": "app.post('/upload1933', (req, res) => {\n  req.files.file1933.mv(\"./uploads/\" + req.files.file1933.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1934,
    "code": "const path_up1933 = require('path');\napp.post('/upload1933', (req, res) => {\n  const f = req.files && req.files.file1933;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1933.basename(f.name);\n  f.mv(path_up1933.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1935,
    "code": "router.get('/acct1935', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1935 WHERE id = \" + req.query.id1935)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1936,
    "code": "router.get('/acct1935', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1935 WHERE id = ?\", [req.query.id1935])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1937,
    "code": "app.get('/hello1937', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1937 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1938,
    "code": "const escapeHtml1937 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1937', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1937(req.query.name1937 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1939,
    "code": "app.get('/read1939', (req, res) => {\n  const p = \"./files/\" + req.query.file1939;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1940,
    "code": "const path1939 = require('path');\napp.get('/read1939', (req, res) => {\n  const base = path1939.join(__dirname, 'files');\n  const safe = path1939.join(base, path1939.basename(String(req.query.file1939 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1941,
    "code": "app.get('/go1941', (req, res) => {\n  res.redirect(req.query.url1941);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1942,
    "code": "app.get('/go1941', (req, res) => {\n  const url = String(req.query.url1941 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1943,
    "code": "const JWT_SECRET_1943 = \"super-secret-1943\";\nfunction sign1943(data){ return \"signed-\" + JWT_SECRET_1943; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1944,
    "code": "const JWT_SECRET_1943 = process.env.JWT_SECRET_1943;\nfunction sign1943(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1945,
    "code": "app.get('/login1945', (req, res) => {\n  res.cookie('sid1945', 'token1945');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1946,
    "code": "app.get('/login1945', (req, res) => {\n  res.cookie('sid1945', 'token1945', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1947,
    "code": "app.post('/vote1947', (req, res) => {\n  const choice = req.body.choice1947;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1948,
    "code": "app.post('/vote1947', (req, res) => {\n  const choice = String(req.body.choice1947 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1949,
    "code": "app.post('/register1949', (req, res) => {\n  console.log(\"New user\", req.body.email1949, req.body.password1949);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1950,
    "code": "app.post('/register1949', (req, res) => {\n  console.log(\"New user\", req.body.email1949);\n  const body = { ...req.body }; delete body.password1949;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1951,
    "code": "app.get('/user1951', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1951 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1952,
    "code": "app.get('/user1951', async (req, res) => {\n  const u = String(req.query.u1951 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1953,
    "code": "app.post('/zip1953', (req, res) => {\n  const archive = \"archive_1953.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1953;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1954,
    "code": "app.post('/zip1953', (req, res) => {\n  const archive = \"archive_1953.zip\";\n  const dir = String(req.body.dir1953 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1955,
    "code": "app.post('/cfg1955', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1955 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1956,
    "code": "app.post('/cfg1955', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1955 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1957,
    "code": "app.use('/api1957', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1958,
    "code": "const allowedOrigins1957 = new Set([\"https://example1957.com\"]);\napp.use('/api1957', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1957.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1959,
    "code": "app.get('/fetch1959', async (req, res) => {\n  const r = await fetch(req.query.url1959);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1960,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1959', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1959 || \"\"));\n    const allowedHosts = new Set([\"example1959.com\",\"api1959.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1961,
    "code": "app.post('/auth1961', async (req, res) => {\n  const ok = await authUser(req.body.u1961, req.body.p1961);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1962,
    "code": "const attempts1961 = new Map();\napp.post('/auth1961', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1961.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1961.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1961, req.body.p1961);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1963,
    "code": "app.post('/upload1963', (req, res) => {\n  req.files.file1963.mv(\"./uploads/\" + req.files.file1963.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1964,
    "code": "const path_up1963 = require('path');\napp.post('/upload1963', (req, res) => {\n  const f = req.files && req.files.file1963;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1963.basename(f.name);\n  f.mv(path_up1963.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1965,
    "code": "router.get('/acct1965', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1965 WHERE id = \" + req.query.id1965)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1966,
    "code": "router.get('/acct1965', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1965 WHERE id = ?\", [req.query.id1965])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1967,
    "code": "app.get('/hello1967', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1967 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1968,
    "code": "const escapeHtml1967 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1967', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1967(req.query.name1967 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1969,
    "code": "app.get('/read1969', (req, res) => {\n  const p = \"./files/\" + req.query.file1969;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1970,
    "code": "const path1969 = require('path');\napp.get('/read1969', (req, res) => {\n  const base = path1969.join(__dirname, 'files');\n  const safe = path1969.join(base, path1969.basename(String(req.query.file1969 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1971,
    "code": "app.get('/go1971', (req, res) => {\n  res.redirect(req.query.url1971);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1972,
    "code": "app.get('/go1971', (req, res) => {\n  const url = String(req.query.url1971 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1973,
    "code": "const JWT_SECRET_1973 = \"super-secret-1973\";\nfunction sign1973(data){ return \"signed-\" + JWT_SECRET_1973; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1974,
    "code": "const JWT_SECRET_1973 = process.env.JWT_SECRET_1973;\nfunction sign1973(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1975,
    "code": "app.get('/login1975', (req, res) => {\n  res.cookie('sid1975', 'token1975');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1976,
    "code": "app.get('/login1975', (req, res) => {\n  res.cookie('sid1975', 'token1975', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1977,
    "code": "app.post('/vote1977', (req, res) => {\n  const choice = req.body.choice1977;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1978,
    "code": "app.post('/vote1977', (req, res) => {\n  const choice = String(req.body.choice1977 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1979,
    "code": "app.post('/register1979', (req, res) => {\n  console.log(\"New user\", req.body.email1979, req.body.password1979);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1980,
    "code": "app.post('/register1979', (req, res) => {\n  console.log(\"New user\", req.body.email1979);\n  const body = { ...req.body }; delete body.password1979;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1981,
    "code": "app.get('/user1981', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1981 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1982,
    "code": "app.get('/user1981', async (req, res) => {\n  const u = String(req.query.u1981 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1983,
    "code": "app.post('/zip1983', (req, res) => {\n  const archive = \"archive_1983.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1983;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1984,
    "code": "app.post('/zip1983', (req, res) => {\n  const archive = \"archive_1983.zip\";\n  const dir = String(req.body.dir1983 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1985,
    "code": "app.post('/cfg1985', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1985 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1986,
    "code": "app.post('/cfg1985', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1985 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1987,
    "code": "app.use('/api1987', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1988,
    "code": "const allowedOrigins1987 = new Set([\"https://example1987.com\"]);\napp.use('/api1987', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1987.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1989,
    "code": "app.get('/fetch1989', async (req, res) => {\n  const r = await fetch(req.query.url1989);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1990,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1989', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1989 || \"\"));\n    const allowedHosts = new Set([\"example1989.com\",\"api1989.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1991,
    "code": "app.post('/auth1991', async (req, res) => {\n  const ok = await authUser(req.body.u1991, req.body.p1991);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1992,
    "code": "const attempts1991 = new Map();\napp.post('/auth1991', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1991.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1991.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1991, req.body.p1991);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1993,
    "code": "app.post('/upload1993', (req, res) => {\n  req.files.file1993.mv(\"./uploads/\" + req.files.file1993.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1994,
    "code": "const path_up1993 = require('path');\napp.post('/upload1993', (req, res) => {\n  const f = req.files && req.files.file1993;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1993.basename(f.name);\n  f.mv(path_up1993.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1995,
    "code": "router.get('/acct1995', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1995 WHERE id = \" + req.query.id1995)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1996,
    "code": "router.get('/acct1995', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1995 WHERE id = ?\", [req.query.id1995])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1997,
    "code": "app.get('/hello1997', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1997 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1998,
    "code": "const escapeHtml1997 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1997', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1997(req.query.name1997 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1999,
    "code": "app.get('/read1999', (req, res) => {\n  const p = \"./files/\" + req.query.file1999;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 2000,
    "code": "const path1999 = require('path');\napp.get('/read1999', (req, res) => {\n  const base = path1999.join(__dirname, 'files');\n  const safe = path1999.join(base, path1999.basename(String(req.query.file1999 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  }
]