[
  {
    "id": 3001,
    "code": "app.post('/exec3001', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3001 + \" \" + req.body.dir3001;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3002,
    "code": "app.post('/exec3001', (req, res) => {\n  const name = String(req.body.name3001 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3001 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3003,
    "code": "router.get('/acct3003', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3003);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3004,
    "code": "router.get('/acct3003', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3003]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3005,
    "code": "const STRIPE_KEY_3005 = \"sk_test_3005_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3006,
    "code": "const STRIPE_KEY_3005 = process.env.STRIPE_KEY_3005;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3007,
    "code": "app.use('/api3007', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3008,
    "code": "const allowed3007 = new Set(['https://app3007.example.com']);\napp.use('/api3007', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3007.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3009,
    "code": "app.use('/api3009', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3010,
    "code": "const allowed3009 = new Set(['https://app3009.example.com']);\napp.use('/api3009', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3009.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3011,
    "code": "app.get('/download3011', (req, res) => {\n  res.sendFile('./public/' + req.query.f3011);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3012,
    "code": "const path3011 = require('path');\napp.get('/download3011', (req, res) => {\n  const safe = path3011.join(__dirname, 'public', path3011.basename(String(req.query.f3011 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3013,
    "code": "app.post('/exec3013', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3013 + \" \" + req.body.dir3013;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3014,
    "code": "app.post('/exec3013', (req, res) => {\n  const name = String(req.body.name3013 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3013 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3015,
    "code": "const token = jwt.sign({id: user.id}, 'secret3015');",
    "label": "insecure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Hardcoded JWT secret and no expiry is insecure."
  },
  {
    "id": 3016,
    "code": "const token = jwt.sign({id: user.id}, process.env.JWT_SECRET, {expiresIn:'1h'});",
    "label": "secure",
    "vulnerability_type": "JWT Mishandling",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3017,
    "code": "app.get('/say3017', (req, res) => {\n  res.send('<p>' + req.query.msg3017 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3018,
    "code": "const esc3017 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3017', (req, res) => {\n  res.send('<p>' + esc3017(req.query.msg3017) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3019,
    "code": "app.post('/u3019', (req, res) => { req.files.f3019.mv('./uploads/' + req.files.f3019.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3020,
    "code": "const pathu3019 = require('path');\napp.post('/u3019', (req, res) => {\n  const f = req.files && req.files.f3019;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3019.basename(f.name);\n  f.mv(pathu3019.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3021,
    "code": "app.get('/find3021', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3021 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3022,
    "code": "app.get('/find3021', async (req, res) => {\n  const name = String(req.query.n3021 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3023,
    "code": "router.get('/acct3023', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3023);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3024,
    "code": "router.get('/acct3023', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3023]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3025,
    "code": "app.get('/say3025', (req, res) => {\n  res.send('<p>' + req.query.msg3025 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3026,
    "code": "const esc3025 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3025', (req, res) => {\n  res.send('<p>' + esc3025(req.query.msg3025) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3027,
    "code": "app.get('/r3027', (req, res) => {\n  res.redirect(req.query.to3027);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3028,
    "code": "app.get('/r3027', (req, res) => {\n  const t = String(req.query.to3027 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3029,
    "code": "app.use('/api3029', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3030,
    "code": "const allowed3029 = new Set(['https://app3029.example.com']);\napp.use('/api3029', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3029.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3031,
    "code": "fs.writeFileSync('/tmp/3031.tmp', data);",
    "label": "insecure",
    "vulnerability_type": "Insecure Temp File",
    "explanation": "Predictable temp filenames can cause race conditions or leakage."
  },
  {
    "id": 3032,
    "code": "const tmp = require('tmp'); const file = tmp.fileSync(); fs.writeFileSync(file.name, data);",
    "label": "secure",
    "vulnerability_type": "Insecure Temp File",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3033,
    "code": "router.get('/acct3033', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3033);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3034,
    "code": "router.get('/acct3033', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3033]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3036,
    "code": "app.get('/r3036', (req, res) => {\n  res.redirect(req.query.to3036);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3037,
    "code": "app.get('/r3036', (req, res) => {\n  const t = String(req.query.to3036 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3039,
    "code": "app.post('/u3039', (req, res) => { req.files.f3039.mv('./uploads/' + req.files.f3039.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3040,
    "code": "const pathu3039 = require('path');\napp.post('/u3039', (req, res) => {\n  const f = req.files && req.files.f3039;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3039.basename(f.name);\n  f.mv(pathu3039.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3041,
    "code": "app.use('/api3041', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3042,
    "code": "const allowed3041 = new Set(['https://app3041.example.com']);\napp.use('/api3041', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3041.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3043,
    "code": "app.post('/reg3043', (req, res) => { console.log('new', req.body.email3043, req.body.pass3043); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3044,
    "code": "app.post('/reg3043', (req, res) => { console.log('new', req.body.email3043); const copy = {...req.body}; delete copy.pass3043; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3045,
    "code": "const STRIPE_KEY_3045 = \"sk_test_3045_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3046,
    "code": "const STRIPE_KEY_3045 = process.env.STRIPE_KEY_3045;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3047,
    "code": "router.get('/acct3047', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3047);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3048,
    "code": "router.get('/acct3047', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3047]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3049,
    "code": "app.post('/apply3049', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3049 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3050,
    "code": "app.post('/apply3049', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3049 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3051,
    "code": "app.post('/u3051', (req, res) => { req.files.f3051.mv('./uploads/' + req.files.f3051.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3052,
    "code": "const pathu3051 = require('path');\napp.post('/u3051', (req, res) => {\n  const f = req.files && req.files.f3051;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3051.basename(f.name);\n  f.mv(pathu3051.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3053,
    "code": "app.get('/set3053', (req, res) => { res.cookie('sid', 'abc3053'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3054,
    "code": "app.get('/set3053', (req, res) => { res.cookie('sid', 'abc3053', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3055,
    "code": "const STRIPE_KEY_3055 = \"sk_test_3055_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3056,
    "code": "const STRIPE_KEY_3055 = process.env.STRIPE_KEY_3055;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3057,
    "code": "app.get('/download3057', (req, res) => {\n  res.sendFile('./public/' + req.query.f3057);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3058,
    "code": "const path3057 = require('path');\napp.get('/download3057', (req, res) => {\n  const safe = path3057.join(__dirname, 'public', path3057.basename(String(req.query.f3057 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3059,
    "code": "app.get('/r3059', (req, res) => {\n  res.redirect(req.query.to3059);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3060,
    "code": "app.get('/r3059', (req, res) => {\n  const t = String(req.query.to3059 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3061,
    "code": "app.get('/set3061', (req, res) => { res.cookie('sid', 'abc3061'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3062,
    "code": "app.get('/set3061', (req, res) => { res.cookie('sid', 'abc3061', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3063,
    "code": "app.post('/exec3063', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3063 + \" \" + req.body.dir3063;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3064,
    "code": "app.post('/exec3063', (req, res) => {\n  const name = String(req.body.name3063 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3063 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3065,
    "code": "app.get('/say3065', (req, res) => {\n  res.send('<p>' + req.query.msg3065 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3066,
    "code": "const esc3065 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3065', (req, res) => {\n  res.send('<p>' + esc3065(req.query.msg3065) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3067,
    "code": "app.post('/vote3067', (req, res) => { save(req.body.choice3067); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3068,
    "code": "app.post('/vote3067', (req, res) => {\n  const c = String(req.body.choice3067 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3069,
    "code": "app.post('/exec3069', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3069 + \" \" + req.body.dir3069;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3070,
    "code": "app.post('/exec3069', (req, res) => {\n  const name = String(req.body.name3069 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3069 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3071,
    "code": "app.post('/login3071', async (req, res) => { const ok = await auth(req.body.u3071, req.body.p3071); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3072,
    "code": "const attempts3071 = new Map();\napp.post('/login3071', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3071.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3071.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3071, req.body.p3071);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3073,
    "code": "app.post('/login3073', async (req, res) => { const ok = await auth(req.body.u3073, req.body.p3073); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3074,
    "code": "const attempts3073 = new Map();\napp.post('/login3073', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3073.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3073.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3073, req.body.p3073);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3075,
    "code": "const STRIPE_KEY_3075 = \"sk_test_3075_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3076,
    "code": "const STRIPE_KEY_3075 = process.env.STRIPE_KEY_3075;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3077,
    "code": "app.get('/find3077', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3077 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3078,
    "code": "app.get('/find3077', async (req, res) => {\n  const name = String(req.query.n3077 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3079,
    "code": "app.post('/reg3079', (req, res) => { console.log('new', req.body.email3079, req.body.pass3079); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3080,
    "code": "app.post('/reg3079', (req, res) => { console.log('new', req.body.email3079); const copy = {...req.body}; delete copy.pass3079; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3082,
    "code": "app.post('/exec3082', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3082 + \" \" + req.body.dir3082;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3083,
    "code": "app.post('/exec3082', (req, res) => {\n  const name = String(req.body.name3082 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3082 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3084,
    "code": "app.post('/vote3084', (req, res) => { save(req.body.choice3084); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3085,
    "code": "app.post('/vote3084', (req, res) => {\n  const c = String(req.body.choice3084 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3086,
    "code": "app.get('/say3086', (req, res) => {\n  res.send('<p>' + req.query.msg3086 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3087,
    "code": "const esc3086 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3086', (req, res) => {\n  res.send('<p>' + esc3086(req.query.msg3086) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3089,
    "code": "app.get('/proxy3089', async (req, res) => {\n  const resp = await fetch(req.query.url3089);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3090,
    "code": "const {URL} = require('url');\napp.get('/proxy3089', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3089 || ''));\n    const allowed = new Set(['api3089.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3091,
    "code": "app.post('/login3091', async (req, res) => { const ok = await auth(req.body.u3091, req.body.p3091); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3092,
    "code": "const attempts3091 = new Map();\napp.post('/login3091', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3091.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3091.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3091, req.body.p3091);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3093,
    "code": "app.get('/r3093', (req, res) => {\n  res.redirect(req.query.to3093);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3094,
    "code": "app.get('/r3093', (req, res) => {\n  const t = String(req.query.to3093 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3095,
    "code": "app.get('/say3095', (req, res) => {\n  res.send('<p>' + req.query.msg3095 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3096,
    "code": "const esc3095 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3095', (req, res) => {\n  res.send('<p>' + esc3095(req.query.msg3095) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3097,
    "code": "app.get('/find3097', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3097 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3098,
    "code": "app.get('/find3097', async (req, res) => {\n  const name = String(req.query.n3097 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3099,
    "code": "app.use('/api3099', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3100,
    "code": "const allowed3099 = new Set(['https://app3099.example.com']);\napp.use('/api3099', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3099.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3101,
    "code": "app.get('/proxy3101', async (req, res) => {\n  const resp = await fetch(req.query.url3101);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3102,
    "code": "const {URL} = require('url');\napp.get('/proxy3101', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3101 || ''));\n    const allowed = new Set(['api3101.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3103,
    "code": "app.get('/say3103', (req, res) => {\n  res.send('<p>' + req.query.msg3103 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3104,
    "code": "const esc3103 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3103', (req, res) => {\n  res.send('<p>' + esc3103(req.query.msg3103) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3105,
    "code": "app.use('/api3105', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3106,
    "code": "const allowed3105 = new Set(['https://app3105.example.com']);\napp.use('/api3105', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3105.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3107,
    "code": "app.post('/exec3107', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3107 + \" \" + req.body.dir3107;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3108,
    "code": "app.post('/exec3107', (req, res) => {\n  const name = String(req.body.name3107 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3107 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3109,
    "code": "app.post('/vote3109', (req, res) => { save(req.body.choice3109); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3110,
    "code": "app.post('/vote3109', (req, res) => {\n  const c = String(req.body.choice3109 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3111,
    "code": "const STRIPE_KEY_3111 = \"sk_test_3111_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3112,
    "code": "const STRIPE_KEY_3111 = process.env.STRIPE_KEY_3111;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3113,
    "code": "app.post('/reg3113', (req, res) => { console.log('new', req.body.email3113, req.body.pass3113); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3114,
    "code": "app.post('/reg3113', (req, res) => { console.log('new', req.body.email3113); const copy = {...req.body}; delete copy.pass3113; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3115,
    "code": "app.post('/login3115', async (req, res) => { const ok = await auth(req.body.u3115, req.body.p3115); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3116,
    "code": "const attempts3115 = new Map();\napp.post('/login3115', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3115.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3115.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3115, req.body.p3115);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3117,
    "code": "app.post('/apply3117', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3117 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3118,
    "code": "app.post('/apply3117', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3117 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3119,
    "code": "app.post('/login3119', async (req, res) => { const ok = await auth(req.body.u3119, req.body.p3119); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3120,
    "code": "const attempts3119 = new Map();\napp.post('/login3119', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3119.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3119.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3119, req.body.p3119);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3121,
    "code": "app.post('/login3121', async (req, res) => { const ok = await auth(req.body.u3121, req.body.p3121); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3122,
    "code": "const attempts3121 = new Map();\napp.post('/login3121', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3121.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3121.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3121, req.body.p3121);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3123,
    "code": "app.get('/r3123', (req, res) => {\n  res.redirect(req.query.to3123);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3124,
    "code": "app.get('/r3123', (req, res) => {\n  const t = String(req.query.to3123 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3125,
    "code": "const STRIPE_KEY_3125 = \"sk_test_3125_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3126,
    "code": "const STRIPE_KEY_3125 = process.env.STRIPE_KEY_3125;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3127,
    "code": "app.get('/say3127', (req, res) => {\n  res.send('<p>' + req.query.msg3127 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3128,
    "code": "const esc3127 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3127', (req, res) => {\n  res.send('<p>' + esc3127(req.query.msg3127) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3129,
    "code": "app.post('/apply3129', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3129 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3130,
    "code": "app.post('/apply3129', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3129 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3132,
    "code": "app.use('/api3132', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3133,
    "code": "const allowed3132 = new Set(['https://app3132.example.com']);\napp.use('/api3132', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3132.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3134,
    "code": "app.post('/apply3134', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3134 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3135,
    "code": "app.post('/apply3134', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3134 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3136,
    "code": "app.post('/reg3136', (req, res) => { console.log('new', req.body.email3136, req.body.pass3136); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3137,
    "code": "app.post('/reg3136', (req, res) => { console.log('new', req.body.email3136); const copy = {...req.body}; delete copy.pass3136; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3138,
    "code": "app.post('/vote3138', (req, res) => { save(req.body.choice3138); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3139,
    "code": "app.post('/vote3138', (req, res) => {\n  const c = String(req.body.choice3138 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3140,
    "code": "const STRIPE_KEY_3140 = \"sk_test_3140_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3141,
    "code": "const STRIPE_KEY_3140 = process.env.STRIPE_KEY_3140;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3143,
    "code": "app.use('/api3143', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3144,
    "code": "const allowed3143 = new Set(['https://app3143.example.com']);\napp.use('/api3143', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3143.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3145,
    "code": "app.get('/set3145', (req, res) => { res.cookie('sid', 'abc3145'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3146,
    "code": "app.get('/set3145', (req, res) => { res.cookie('sid', 'abc3145', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3147,
    "code": "app.get('/find3147', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3147 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3148,
    "code": "app.get('/find3147', async (req, res) => {\n  const name = String(req.query.n3147 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3149,
    "code": "app.use('/api3149', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3150,
    "code": "const allowed3149 = new Set(['https://app3149.example.com']);\napp.use('/api3149', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3149.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3151,
    "code": "app.get('/find3151', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3151 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3152,
    "code": "app.get('/find3151', async (req, res) => {\n  const name = String(req.query.n3151 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3153,
    "code": "app.get('/set3153', (req, res) => { res.cookie('sid', 'abc3153'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3154,
    "code": "app.get('/set3153', (req, res) => { res.cookie('sid', 'abc3153', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3155,
    "code": "app.post('/vote3155', (req, res) => { save(req.body.choice3155); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3156,
    "code": "app.post('/vote3155', (req, res) => {\n  const c = String(req.body.choice3155 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3157,
    "code": "const STRIPE_KEY_3157 = \"sk_test_3157_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3158,
    "code": "const STRIPE_KEY_3157 = process.env.STRIPE_KEY_3157;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3159,
    "code": "app.get('/say3159', (req, res) => {\n  res.send('<p>' + req.query.msg3159 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3160,
    "code": "const esc3159 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3159', (req, res) => {\n  res.send('<p>' + esc3159(req.query.msg3159) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3161,
    "code": "app.get('/r3161', (req, res) => {\n  res.redirect(req.query.to3161);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3162,
    "code": "app.get('/r3161', (req, res) => {\n  const t = String(req.query.to3161 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3163,
    "code": "app.get('/set3163', (req, res) => { res.cookie('sid', 'abc3163'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3164,
    "code": "app.get('/set3163', (req, res) => { res.cookie('sid', 'abc3163', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3165,
    "code": "app.get('/r3165', (req, res) => {\n  res.redirect(req.query.to3165);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3166,
    "code": "app.get('/r3165', (req, res) => {\n  const t = String(req.query.to3165 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3167,
    "code": "const salt = '123453167'; const h = require('crypto').createHash('md5').update(''+salt+password).digest('hex');",
    "label": "insecure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "MD5 and hardcoded salts are weak; use HMAC/SHA256 and env salt."
  },
  {
    "id": 3168,
    "code": "const h = require('crypto').createHmac('sha256', process.env.SALT).update(String(password)).digest('hex');",
    "label": "secure",
    "vulnerability_type": "Weak Cryptography",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3169,
    "code": "app.post('/vote3169', (req, res) => { save(req.body.choice3169); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3170,
    "code": "app.post('/vote3169', (req, res) => {\n  const c = String(req.body.choice3169 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3171,
    "code": "app.post('/reg3171', (req, res) => { console.log('new', req.body.email3171, req.body.pass3171); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3172,
    "code": "app.post('/reg3171', (req, res) => { console.log('new', req.body.email3171); const copy = {...req.body}; delete copy.pass3171; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3173,
    "code": "app.get('/download3173', (req, res) => {\n  res.sendFile('./public/' + req.query.f3173);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3174,
    "code": "const path3173 = require('path');\napp.get('/download3173', (req, res) => {\n  const safe = path3173.join(__dirname, 'public', path3173.basename(String(req.query.f3173 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3175,
    "code": "const STRIPE_KEY_3175 = \"sk_test_3175_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3176,
    "code": "const STRIPE_KEY_3175 = process.env.STRIPE_KEY_3175;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3177,
    "code": "app.get('/download3177', (req, res) => {\n  res.sendFile('./public/' + req.query.f3177);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3178,
    "code": "const path3177 = require('path');\napp.get('/download3177', (req, res) => {\n  const safe = path3177.join(__dirname, 'public', path3177.basename(String(req.query.f3177 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3179,
    "code": "app.use('/api3179', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3180,
    "code": "const allowed3179 = new Set(['https://app3179.example.com']);\napp.use('/api3179', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3179.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3183,
    "code": "const STRIPE_KEY_3183 = \"sk_test_3183_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3184,
    "code": "const STRIPE_KEY_3183 = process.env.STRIPE_KEY_3183;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3185,
    "code": "app.post('/u3185', (req, res) => { req.files.f3185.mv('./uploads/' + req.files.f3185.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3186,
    "code": "const pathu3185 = require('path');\napp.post('/u3185', (req, res) => {\n  const f = req.files && req.files.f3185;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3185.basename(f.name);\n  f.mv(pathu3185.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3187,
    "code": "app.post('/vote3187', (req, res) => { save(req.body.choice3187); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3188,
    "code": "app.post('/vote3187', (req, res) => {\n  const c = String(req.body.choice3187 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3189,
    "code": "app.post('/login3189', async (req, res) => { const ok = await auth(req.body.u3189, req.body.p3189); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3190,
    "code": "const attempts3189 = new Map();\napp.post('/login3189', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3189.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3189.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3189, req.body.p3189);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3191,
    "code": "app.use('/api3191', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3192,
    "code": "const allowed3191 = new Set(['https://app3191.example.com']);\napp.use('/api3191', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3191.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3193,
    "code": "app.get('/download3193', (req, res) => {\n  res.sendFile('./public/' + req.query.f3193);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3194,
    "code": "const path3193 = require('path');\napp.get('/download3193', (req, res) => {\n  const safe = path3193.join(__dirname, 'public', path3193.basename(String(req.query.f3193 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3197,
    "code": "app.get('/say3197', (req, res) => {\n  res.send('<p>' + req.query.msg3197 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3198,
    "code": "const esc3197 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3197', (req, res) => {\n  res.send('<p>' + esc3197(req.query.msg3197) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3199,
    "code": "app.get('/find3199', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3199 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3200,
    "code": "app.get('/find3199', async (req, res) => {\n  const name = String(req.query.n3199 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3201,
    "code": "app.post('/exec3201', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3201 + \" \" + req.body.dir3201;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3202,
    "code": "app.post('/exec3201', (req, res) => {\n  const name = String(req.body.name3201 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3201 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3203,
    "code": "app.get('/download3203', (req, res) => {\n  res.sendFile('./public/' + req.query.f3203);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3204,
    "code": "const path3203 = require('path');\napp.get('/download3203', (req, res) => {\n  const safe = path3203.join(__dirname, 'public', path3203.basename(String(req.query.f3203 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3205,
    "code": "app.post('/apply3205', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3205 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3206,
    "code": "app.post('/apply3205', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3205 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3207,
    "code": "app.post('/u3207', (req, res) => { req.files.f3207.mv('./uploads/' + req.files.f3207.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3208,
    "code": "const pathu3207 = require('path');\napp.post('/u3207', (req, res) => {\n  const f = req.files && req.files.f3207;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3207.basename(f.name);\n  f.mv(pathu3207.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3209,
    "code": "app.get('/say3209', (req, res) => {\n  res.send('<p>' + req.query.msg3209 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3210,
    "code": "const esc3209 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3209', (req, res) => {\n  res.send('<p>' + esc3209(req.query.msg3209) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3211,
    "code": "app.post('/vote3211', (req, res) => { save(req.body.choice3211); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3212,
    "code": "app.post('/vote3211', (req, res) => {\n  const c = String(req.body.choice3211 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3213,
    "code": "app.post('/vote3213', (req, res) => { save(req.body.choice3213); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3214,
    "code": "app.post('/vote3213', (req, res) => {\n  const c = String(req.body.choice3213 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3215,
    "code": "app.post('/reg3215', (req, res) => { console.log('new', req.body.email3215, req.body.pass3215); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3216,
    "code": "app.post('/reg3215', (req, res) => { console.log('new', req.body.email3215); const copy = {...req.body}; delete copy.pass3215; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3218,
    "code": "const STRIPE_KEY_3218 = \"sk_test_3218_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3219,
    "code": "const STRIPE_KEY_3218 = process.env.STRIPE_KEY_3218;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3221,
    "code": "router.get('/acct3221', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3221);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3222,
    "code": "router.get('/acct3221', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3221]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3223,
    "code": "app.post('/exec3223', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3223 + \" \" + req.body.dir3223;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3224,
    "code": "app.post('/exec3223', (req, res) => {\n  const name = String(req.body.name3223 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3223 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3226,
    "code": "const STRIPE_KEY_3226 = \"sk_test_3226_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3227,
    "code": "const STRIPE_KEY_3226 = process.env.STRIPE_KEY_3226;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3228,
    "code": "app.get('/set3228', (req, res) => { res.cookie('sid', 'abc3228'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3229,
    "code": "app.get('/set3228', (req, res) => { res.cookie('sid', 'abc3228', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3230,
    "code": "app.post('/exec3230', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3230 + \" \" + req.body.dir3230;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3231,
    "code": "app.post('/exec3230', (req, res) => {\n  const name = String(req.body.name3230 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3230 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3232,
    "code": "app.get('/proxy3232', async (req, res) => {\n  const resp = await fetch(req.query.url3232);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3233,
    "code": "const {URL} = require('url');\napp.get('/proxy3232', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3232 || ''));\n    const allowed = new Set(['api3232.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3234,
    "code": "app.post('/u3234', (req, res) => { req.files.f3234.mv('./uploads/' + req.files.f3234.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3235,
    "code": "const pathu3234 = require('path');\napp.post('/u3234', (req, res) => {\n  const f = req.files && req.files.f3234;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3234.basename(f.name);\n  f.mv(pathu3234.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3236,
    "code": "app.post('/apply3236', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3236 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3237,
    "code": "app.post('/apply3236', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3236 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3238,
    "code": "app.post('/reg3238', (req, res) => { console.log('new', req.body.email3238, req.body.pass3238); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3239,
    "code": "app.post('/reg3238', (req, res) => { console.log('new', req.body.email3238); const copy = {...req.body}; delete copy.pass3238; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3240,
    "code": "router.get('/acct3240', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3240);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3241,
    "code": "router.get('/acct3240', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3240]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3242,
    "code": "const STRIPE_KEY_3242 = \"sk_test_3242_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3243,
    "code": "const STRIPE_KEY_3242 = process.env.STRIPE_KEY_3242;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3245,
    "code": "app.post('/apply3245', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3245 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3246,
    "code": "app.post('/apply3245', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3245 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3248,
    "code": "app.post('/exec3248', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3248 + \" \" + req.body.dir3248;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3249,
    "code": "app.post('/exec3248', (req, res) => {\n  const name = String(req.body.name3248 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3248 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3250,
    "code": "app.get('/proxy3250', async (req, res) => {\n  const resp = await fetch(req.query.url3250);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3251,
    "code": "const {URL} = require('url');\napp.get('/proxy3250', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3250 || ''));\n    const allowed = new Set(['api3250.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3253,
    "code": "app.get('/r3253', (req, res) => {\n  res.redirect(req.query.to3253);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3254,
    "code": "app.get('/r3253', (req, res) => {\n  const t = String(req.query.to3253 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3255,
    "code": "app.get('/download3255', (req, res) => {\n  res.sendFile('./public/' + req.query.f3255);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3256,
    "code": "const path3255 = require('path');\napp.get('/download3255', (req, res) => {\n  const safe = path3255.join(__dirname, 'public', path3255.basename(String(req.query.f3255 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3257,
    "code": "app.post('/login3257', async (req, res) => { const ok = await auth(req.body.u3257, req.body.p3257); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3258,
    "code": "const attempts3257 = new Map();\napp.post('/login3257', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3257.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3257.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3257, req.body.p3257);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3259,
    "code": "app.post('/apply3259', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3259 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3260,
    "code": "app.post('/apply3259', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3259 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3263,
    "code": "router.get('/acct3263', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3263);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3264,
    "code": "router.get('/acct3263', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3263]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3265,
    "code": "app.get('/set3265', (req, res) => { res.cookie('sid', 'abc3265'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3266,
    "code": "app.get('/set3265', (req, res) => { res.cookie('sid', 'abc3265', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3268,
    "code": "router.get('/acct3268', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3268);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3269,
    "code": "router.get('/acct3268', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3268]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3270,
    "code": "app.post('/exec3270', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3270 + \" \" + req.body.dir3270;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3271,
    "code": "app.post('/exec3270', (req, res) => {\n  const name = String(req.body.name3270 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3270 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3272,
    "code": "app.post('/login3272', async (req, res) => { const ok = await auth(req.body.u3272, req.body.p3272); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3273,
    "code": "const attempts3272 = new Map();\napp.post('/login3272', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3272.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3272.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3272, req.body.p3272);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3274,
    "code": "app.get('/proxy3274', async (req, res) => {\n  const resp = await fetch(req.query.url3274);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3275,
    "code": "const {URL} = require('url');\napp.get('/proxy3274', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3274 || ''));\n    const allowed = new Set(['api3274.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3276,
    "code": "app.use('/api3276', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3277,
    "code": "const allowed3276 = new Set(['https://app3276.example.com']);\napp.use('/api3276', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3276.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3278,
    "code": "app.get('/find3278', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3278 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3279,
    "code": "app.get('/find3278', async (req, res) => {\n  const name = String(req.query.n3278 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3280,
    "code": "app.use('/api3280', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3281,
    "code": "const allowed3280 = new Set(['https://app3280.example.com']);\napp.use('/api3280', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3280.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3282,
    "code": "app.get('/say3282', (req, res) => {\n  res.send('<p>' + req.query.msg3282 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3283,
    "code": "const esc3282 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3282', (req, res) => {\n  res.send('<p>' + esc3282(req.query.msg3282) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3284,
    "code": "app.get('/say3284', (req, res) => {\n  res.send('<p>' + req.query.msg3284 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3285,
    "code": "const esc3284 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3284', (req, res) => {\n  res.send('<p>' + esc3284(req.query.msg3284) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3287,
    "code": "app.get('/say3287', (req, res) => {\n  res.send('<p>' + req.query.msg3287 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3288,
    "code": "const esc3287 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3287', (req, res) => {\n  res.send('<p>' + esc3287(req.query.msg3287) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3290,
    "code": "app.get('/download3290', (req, res) => {\n  res.sendFile('./public/' + req.query.f3290);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3291,
    "code": "const path3290 = require('path');\napp.get('/download3290', (req, res) => {\n  const safe = path3290.join(__dirname, 'public', path3290.basename(String(req.query.f3290 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3292,
    "code": "app.get('/download3292', (req, res) => {\n  res.sendFile('./public/' + req.query.f3292);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3293,
    "code": "const path3292 = require('path');\napp.get('/download3292', (req, res) => {\n  const safe = path3292.join(__dirname, 'public', path3292.basename(String(req.query.f3292 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3296,
    "code": "app.post('/apply3296', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3296 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3297,
    "code": "app.post('/apply3296', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3296 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3298,
    "code": "const STRIPE_KEY_3298 = \"sk_test_3298_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3299,
    "code": "const STRIPE_KEY_3298 = process.env.STRIPE_KEY_3298;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3301,
    "code": "app.post('/u3301', (req, res) => { req.files.f3301.mv('./uploads/' + req.files.f3301.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3302,
    "code": "const pathu3301 = require('path');\napp.post('/u3301', (req, res) => {\n  const f = req.files && req.files.f3301;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3301.basename(f.name);\n  f.mv(pathu3301.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3303,
    "code": "app.get('/r3303', (req, res) => {\n  res.redirect(req.query.to3303);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3304,
    "code": "app.get('/r3303', (req, res) => {\n  const t = String(req.query.to3303 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3306,
    "code": "app.get('/r3306', (req, res) => {\n  res.redirect(req.query.to3306);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3307,
    "code": "app.get('/r3306', (req, res) => {\n  const t = String(req.query.to3306 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3308,
    "code": "app.get('/proxy3308', async (req, res) => {\n  const resp = await fetch(req.query.url3308);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3309,
    "code": "const {URL} = require('url');\napp.get('/proxy3308', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3308 || ''));\n    const allowed = new Set(['api3308.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3310,
    "code": "app.post('/vote3310', (req, res) => { save(req.body.choice3310); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3311,
    "code": "app.post('/vote3310', (req, res) => {\n  const c = String(req.body.choice3310 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3312,
    "code": "app.post('/login3312', async (req, res) => { const ok = await auth(req.body.u3312, req.body.p3312); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3313,
    "code": "const attempts3312 = new Map();\napp.post('/login3312', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3312.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3312.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3312, req.body.p3312);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3314,
    "code": "app.post('/reg3314', (req, res) => { console.log('new', req.body.email3314, req.body.pass3314); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3315,
    "code": "app.post('/reg3314', (req, res) => { console.log('new', req.body.email3314); const copy = {...req.body}; delete copy.pass3314; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3317,
    "code": "app.post('/reg3317', (req, res) => { console.log('new', req.body.email3317, req.body.pass3317); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3318,
    "code": "app.post('/reg3317', (req, res) => { console.log('new', req.body.email3317); const copy = {...req.body}; delete copy.pass3317; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3319,
    "code": "app.post('/exec3319', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3319 + \" \" + req.body.dir3319;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3320,
    "code": "app.post('/exec3319', (req, res) => {\n  const name = String(req.body.name3319 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3319 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3321,
    "code": "app.use('/api3321', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3322,
    "code": "const allowed3321 = new Set(['https://app3321.example.com']);\napp.use('/api3321', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3321.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3323,
    "code": "app.use('/api3323', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3324,
    "code": "const allowed3323 = new Set(['https://app3323.example.com']);\napp.use('/api3323', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3323.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3325,
    "code": "app.get('/say3325', (req, res) => {\n  res.send('<p>' + req.query.msg3325 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3326,
    "code": "const esc3325 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3325', (req, res) => {\n  res.send('<p>' + esc3325(req.query.msg3325) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3327,
    "code": "app.get('/set3327', (req, res) => { res.cookie('sid', 'abc3327'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3328,
    "code": "app.get('/set3327', (req, res) => { res.cookie('sid', 'abc3327', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3329,
    "code": "router.get('/acct3329', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3329);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3330,
    "code": "router.get('/acct3329', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3329]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3332,
    "code": "app.use('/api3332', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3333,
    "code": "const allowed3332 = new Set(['https://app3332.example.com']);\napp.use('/api3332', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3332.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3334,
    "code": "app.use('/api3334', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3335,
    "code": "const allowed3334 = new Set(['https://app3334.example.com']);\napp.use('/api3334', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3334.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3336,
    "code": "router.get('/acct3336', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3336);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3337,
    "code": "router.get('/acct3336', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3336]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3338,
    "code": "app.get('/say3338', (req, res) => {\n  res.send('<p>' + req.query.msg3338 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3339,
    "code": "const esc3338 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3338', (req, res) => {\n  res.send('<p>' + esc3338(req.query.msg3338) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3340,
    "code": "app.get('/find3340', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3340 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3341,
    "code": "app.get('/find3340', async (req, res) => {\n  const name = String(req.query.n3340 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3342,
    "code": "app.use('/api3342', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3343,
    "code": "const allowed3342 = new Set(['https://app3342.example.com']);\napp.use('/api3342', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3342.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3344,
    "code": "app.get('/say3344', (req, res) => {\n  res.send('<p>' + req.query.msg3344 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3345,
    "code": "const esc3344 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3344', (req, res) => {\n  res.send('<p>' + esc3344(req.query.msg3344) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3346,
    "code": "app.get('/find3346', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3346 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3347,
    "code": "app.get('/find3346', async (req, res) => {\n  const name = String(req.query.n3346 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3348,
    "code": "app.get('/set3348', (req, res) => { res.cookie('sid', 'abc3348'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3349,
    "code": "app.get('/set3348', (req, res) => { res.cookie('sid', 'abc3348', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3350,
    "code": "app.get('/say3350', (req, res) => {\n  res.send('<p>' + req.query.msg3350 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3351,
    "code": "const esc3350 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3350', (req, res) => {\n  res.send('<p>' + esc3350(req.query.msg3350) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3353,
    "code": "app.use('/api3353', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3354,
    "code": "const allowed3353 = new Set(['https://app3353.example.com']);\napp.use('/api3353', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3353.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3355,
    "code": "const STRIPE_KEY_3355 = \"sk_test_3355_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3356,
    "code": "const STRIPE_KEY_3355 = process.env.STRIPE_KEY_3355;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3358,
    "code": "app.get('/r3358', (req, res) => {\n  res.redirect(req.query.to3358);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3359,
    "code": "app.get('/r3358', (req, res) => {\n  const t = String(req.query.to3358 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3361,
    "code": "app.get('/download3361', (req, res) => {\n  res.sendFile('./public/' + req.query.f3361);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3362,
    "code": "const path3361 = require('path');\napp.get('/download3361', (req, res) => {\n  const safe = path3361.join(__dirname, 'public', path3361.basename(String(req.query.f3361 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3364,
    "code": "app.use('/api3364', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3365,
    "code": "const allowed3364 = new Set(['https://app3364.example.com']);\napp.use('/api3364', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3364.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3367,
    "code": "app.post('/u3367', (req, res) => { req.files.f3367.mv('./uploads/' + req.files.f3367.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3368,
    "code": "const pathu3367 = require('path');\napp.post('/u3367', (req, res) => {\n  const f = req.files && req.files.f3367;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3367.basename(f.name);\n  f.mv(pathu3367.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3369,
    "code": "app.get('/r3369', (req, res) => {\n  res.redirect(req.query.to3369);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3370,
    "code": "app.get('/r3369', (req, res) => {\n  const t = String(req.query.to3369 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3371,
    "code": "app.post('/exec3371', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3371 + \" \" + req.body.dir3371;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3372,
    "code": "app.post('/exec3371', (req, res) => {\n  const name = String(req.body.name3371 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3371 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3373,
    "code": "app.post('/exec3373', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3373 + \" \" + req.body.dir3373;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3374,
    "code": "app.post('/exec3373', (req, res) => {\n  const name = String(req.body.name3373 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3373 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3375,
    "code": "app.post('/u3375', (req, res) => { req.files.f3375.mv('./uploads/' + req.files.f3375.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3376,
    "code": "const pathu3375 = require('path');\napp.post('/u3375', (req, res) => {\n  const f = req.files && req.files.f3375;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3375.basename(f.name);\n  f.mv(pathu3375.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3377,
    "code": "app.post('/login3377', async (req, res) => { const ok = await auth(req.body.u3377, req.body.p3377); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3378,
    "code": "const attempts3377 = new Map();\napp.post('/login3377', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3377.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3377.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3377, req.body.p3377);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3379,
    "code": "app.post('/u3379', (req, res) => { req.files.f3379.mv('./uploads/' + req.files.f3379.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3380,
    "code": "const pathu3379 = require('path');\napp.post('/u3379', (req, res) => {\n  const f = req.files && req.files.f3379;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3379.basename(f.name);\n  f.mv(pathu3379.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3381,
    "code": "app.post('/u3381', (req, res) => { req.files.f3381.mv('./uploads/' + req.files.f3381.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3382,
    "code": "const pathu3381 = require('path');\napp.post('/u3381', (req, res) => {\n  const f = req.files && req.files.f3381;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3381.basename(f.name);\n  f.mv(pathu3381.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3383,
    "code": "app.post('/reg3383', (req, res) => { console.log('new', req.body.email3383, req.body.pass3383); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3384,
    "code": "app.post('/reg3383', (req, res) => { console.log('new', req.body.email3383); const copy = {...req.body}; delete copy.pass3383; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3385,
    "code": "app.get('/find3385', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3385 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3386,
    "code": "app.get('/find3385', async (req, res) => {\n  const name = String(req.query.n3385 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3387,
    "code": "app.post('/exec3387', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3387 + \" \" + req.body.dir3387;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3388,
    "code": "app.post('/exec3387', (req, res) => {\n  const name = String(req.body.name3387 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3387 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3389,
    "code": "app.get('/find3389', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3389 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3390,
    "code": "app.get('/find3389', async (req, res) => {\n  const name = String(req.query.n3389 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3391,
    "code": "app.post('/vote3391', (req, res) => { save(req.body.choice3391); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3392,
    "code": "app.post('/vote3391', (req, res) => {\n  const c = String(req.body.choice3391 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3393,
    "code": "app.get('/set3393', (req, res) => { res.cookie('sid', 'abc3393'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3394,
    "code": "app.get('/set3393', (req, res) => { res.cookie('sid', 'abc3393', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3395,
    "code": "app.post('/exec3395', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3395 + \" \" + req.body.dir3395;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3396,
    "code": "app.post('/exec3395', (req, res) => {\n  const name = String(req.body.name3395 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3395 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3397,
    "code": "app.use('/api3397', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3398,
    "code": "const allowed3397 = new Set(['https://app3397.example.com']);\napp.use('/api3397', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3397.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3399,
    "code": "app.get('/r3399', (req, res) => {\n  res.redirect(req.query.to3399);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3400,
    "code": "app.get('/r3399', (req, res) => {\n  const t = String(req.query.to3399 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3401,
    "code": "app.get('/r3401', (req, res) => {\n  res.redirect(req.query.to3401);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3402,
    "code": "app.get('/r3401', (req, res) => {\n  const t = String(req.query.to3401 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3404,
    "code": "app.post('/reg3404', (req, res) => { console.log('new', req.body.email3404, req.body.pass3404); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3405,
    "code": "app.post('/reg3404', (req, res) => { console.log('new', req.body.email3404); const copy = {...req.body}; delete copy.pass3404; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3406,
    "code": "app.get('/download3406', (req, res) => {\n  res.sendFile('./public/' + req.query.f3406);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3407,
    "code": "const path3406 = require('path');\napp.get('/download3406', (req, res) => {\n  const safe = path3406.join(__dirname, 'public', path3406.basename(String(req.query.f3406 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3408,
    "code": "app.post('/u3408', (req, res) => { req.files.f3408.mv('./uploads/' + req.files.f3408.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3409,
    "code": "const pathu3408 = require('path');\napp.post('/u3408', (req, res) => {\n  const f = req.files && req.files.f3408;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3408.basename(f.name);\n  f.mv(pathu3408.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3410,
    "code": "app.post('/apply3410', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3410 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3411,
    "code": "app.post('/apply3410', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3410 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3412,
    "code": "const STRIPE_KEY_3412 = \"sk_test_3412_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3413,
    "code": "const STRIPE_KEY_3412 = process.env.STRIPE_KEY_3412;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3414,
    "code": "app.post('/reg3414', (req, res) => { console.log('new', req.body.email3414, req.body.pass3414); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3415,
    "code": "app.post('/reg3414', (req, res) => { console.log('new', req.body.email3414); const copy = {...req.body}; delete copy.pass3414; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3416,
    "code": "app.use('/api3416', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3417,
    "code": "const allowed3416 = new Set(['https://app3416.example.com']);\napp.use('/api3416', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3416.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3418,
    "code": "app.get('/say3418', (req, res) => {\n  res.send('<p>' + req.query.msg3418 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3419,
    "code": "const esc3418 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3418', (req, res) => {\n  res.send('<p>' + esc3418(req.query.msg3418) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3420,
    "code": "app.post('/reg3420', (req, res) => { console.log('new', req.body.email3420, req.body.pass3420); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3421,
    "code": "app.post('/reg3420', (req, res) => { console.log('new', req.body.email3420); const copy = {...req.body}; delete copy.pass3420; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3423,
    "code": "app.post('/exec3423', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3423 + \" \" + req.body.dir3423;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3424,
    "code": "app.post('/exec3423', (req, res) => {\n  const name = String(req.body.name3423 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3423 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3425,
    "code": "app.get('/find3425', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3425 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3426,
    "code": "app.get('/find3425', async (req, res) => {\n  const name = String(req.query.n3425 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3428,
    "code": "router.get('/acct3428', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3428);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3429,
    "code": "router.get('/acct3428', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3428]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3430,
    "code": "app.get('/say3430', (req, res) => {\n  res.send('<p>' + req.query.msg3430 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3431,
    "code": "const esc3430 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3430', (req, res) => {\n  res.send('<p>' + esc3430(req.query.msg3430) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3432,
    "code": "app.use('/api3432', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3433,
    "code": "const allowed3432 = new Set(['https://app3432.example.com']);\napp.use('/api3432', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3432.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3434,
    "code": "app.post('/apply3434', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3434 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3435,
    "code": "app.post('/apply3434', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3434 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3436,
    "code": "app.post('/u3436', (req, res) => { req.files.f3436.mv('./uploads/' + req.files.f3436.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3437,
    "code": "const pathu3436 = require('path');\napp.post('/u3436', (req, res) => {\n  const f = req.files && req.files.f3436;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3436.basename(f.name);\n  f.mv(pathu3436.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3440,
    "code": "app.get('/r3440', (req, res) => {\n  res.redirect(req.query.to3440);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3441,
    "code": "app.get('/r3440', (req, res) => {\n  const t = String(req.query.to3440 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3442,
    "code": "app.post('/vote3442', (req, res) => { save(req.body.choice3442); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3443,
    "code": "app.post('/vote3442', (req, res) => {\n  const c = String(req.body.choice3442 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3444,
    "code": "app.get('/find3444', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3444 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3445,
    "code": "app.get('/find3444', async (req, res) => {\n  const name = String(req.query.n3444 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3446,
    "code": "app.post('/apply3446', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3446 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3447,
    "code": "app.post('/apply3446', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3446 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3448,
    "code": "app.post('/vote3448', (req, res) => { save(req.body.choice3448); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3449,
    "code": "app.post('/vote3448', (req, res) => {\n  const c = String(req.body.choice3448 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3450,
    "code": "router.get('/acct3450', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3450);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3451,
    "code": "router.get('/acct3450', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3450]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3452,
    "code": "app.post('/vote3452', (req, res) => { save(req.body.choice3452); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3453,
    "code": "app.post('/vote3452', (req, res) => {\n  const c = String(req.body.choice3452 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3454,
    "code": "const STRIPE_KEY_3454 = \"sk_test_3454_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3455,
    "code": "const STRIPE_KEY_3454 = process.env.STRIPE_KEY_3454;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3456,
    "code": "app.post('/reg3456', (req, res) => { console.log('new', req.body.email3456, req.body.pass3456); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3457,
    "code": "app.post('/reg3456', (req, res) => { console.log('new', req.body.email3456); const copy = {...req.body}; delete copy.pass3456; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3458,
    "code": "app.get('/proxy3458', async (req, res) => {\n  const resp = await fetch(req.query.url3458);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3459,
    "code": "const {URL} = require('url');\napp.get('/proxy3458', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3458 || ''));\n    const allowed = new Set(['api3458.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3460,
    "code": "app.post('/u3460', (req, res) => { req.files.f3460.mv('./uploads/' + req.files.f3460.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3461,
    "code": "const pathu3460 = require('path');\napp.post('/u3460', (req, res) => {\n  const f = req.files && req.files.f3460;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3460.basename(f.name);\n  f.mv(pathu3460.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3464,
    "code": "app.get('/download3464', (req, res) => {\n  res.sendFile('./public/' + req.query.f3464);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3465,
    "code": "const path3464 = require('path');\napp.get('/download3464', (req, res) => {\n  const safe = path3464.join(__dirname, 'public', path3464.basename(String(req.query.f3464 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3466,
    "code": "app.get('/r3466', (req, res) => {\n  res.redirect(req.query.to3466);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3467,
    "code": "app.get('/r3466', (req, res) => {\n  const t = String(req.query.to3466 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3468,
    "code": "app.get('/proxy3468', async (req, res) => {\n  const resp = await fetch(req.query.url3468);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3469,
    "code": "const {URL} = require('url');\napp.get('/proxy3468', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3468 || ''));\n    const allowed = new Set(['api3468.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3470,
    "code": "app.get('/r3470', (req, res) => {\n  res.redirect(req.query.to3470);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3471,
    "code": "app.get('/r3470', (req, res) => {\n  const t = String(req.query.to3470 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3472,
    "code": "app.get('/find3472', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3472 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3473,
    "code": "app.get('/find3472', async (req, res) => {\n  const name = String(req.query.n3472 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3475,
    "code": "app.get('/find3475', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3475 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3476,
    "code": "app.get('/find3475', async (req, res) => {\n  const name = String(req.query.n3475 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3477,
    "code": "app.get('/set3477', (req, res) => { res.cookie('sid', 'abc3477'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3478,
    "code": "app.get('/set3477', (req, res) => { res.cookie('sid', 'abc3477', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3479,
    "code": "app.get('/find3479', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3479 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3480,
    "code": "app.get('/find3479', async (req, res) => {\n  const name = String(req.query.n3479 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3481,
    "code": "app.get('/find3481', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3481 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3482,
    "code": "app.get('/find3481', async (req, res) => {\n  const name = String(req.query.n3481 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3486,
    "code": "app.post('/apply3486', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3486 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3487,
    "code": "app.post('/apply3486', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3486 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3488,
    "code": "app.get('/find3488', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3488 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3489,
    "code": "app.get('/find3488', async (req, res) => {\n  const name = String(req.query.n3488 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3491,
    "code": "app.get('/say3491', (req, res) => {\n  res.send('<p>' + req.query.msg3491 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3492,
    "code": "const esc3491 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3491', (req, res) => {\n  res.send('<p>' + esc3491(req.query.msg3491) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3493,
    "code": "app.post('/apply3493', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3493 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3494,
    "code": "app.post('/apply3493', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3493 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3495,
    "code": "app.get('/say3495', (req, res) => {\n  res.send('<p>' + req.query.msg3495 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3496,
    "code": "const esc3495 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3495', (req, res) => {\n  res.send('<p>' + esc3495(req.query.msg3495) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3497,
    "code": "app.get('/say3497', (req, res) => {\n  res.send('<p>' + req.query.msg3497 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3498,
    "code": "const esc3497 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3497', (req, res) => {\n  res.send('<p>' + esc3497(req.query.msg3497) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3499,
    "code": "app.use('/api3499', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3500,
    "code": "const allowed3499 = new Set(['https://app3499.example.com']);\napp.use('/api3499', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3499.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3501,
    "code": "app.post('/vote3501', (req, res) => { save(req.body.choice3501); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3502,
    "code": "app.post('/vote3501', (req, res) => {\n  const c = String(req.body.choice3501 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3503,
    "code": "app.post('/exec3503', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3503 + \" \" + req.body.dir3503;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3504,
    "code": "app.post('/exec3503', (req, res) => {\n  const name = String(req.body.name3503 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3503 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3505,
    "code": "app.use('/api3505', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3506,
    "code": "const allowed3505 = new Set(['https://app3505.example.com']);\napp.use('/api3505', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3505.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3507,
    "code": "app.get('/find3507', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3507 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3508,
    "code": "app.get('/find3507', async (req, res) => {\n  const name = String(req.query.n3507 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3509,
    "code": "app.get('/say3509', (req, res) => {\n  res.send('<p>' + req.query.msg3509 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3510,
    "code": "const esc3509 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3509', (req, res) => {\n  res.send('<p>' + esc3509(req.query.msg3509) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3511,
    "code": "app.post('/u3511', (req, res) => { req.files.f3511.mv('./uploads/' + req.files.f3511.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3512,
    "code": "const pathu3511 = require('path');\napp.post('/u3511', (req, res) => {\n  const f = req.files && req.files.f3511;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3511.basename(f.name);\n  f.mv(pathu3511.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3514,
    "code": "app.get('/set3514', (req, res) => { res.cookie('sid', 'abc3514'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3515,
    "code": "app.get('/set3514', (req, res) => { res.cookie('sid', 'abc3514', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3516,
    "code": "const STRIPE_KEY_3516 = \"sk_test_3516_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3517,
    "code": "const STRIPE_KEY_3516 = process.env.STRIPE_KEY_3516;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3518,
    "code": "app.get('/r3518', (req, res) => {\n  res.redirect(req.query.to3518);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3519,
    "code": "app.get('/r3518', (req, res) => {\n  const t = String(req.query.to3518 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3520,
    "code": "app.get('/set3520', (req, res) => { res.cookie('sid', 'abc3520'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3521,
    "code": "app.get('/set3520', (req, res) => { res.cookie('sid', 'abc3520', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3522,
    "code": "app.use('/api3522', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3523,
    "code": "const allowed3522 = new Set(['https://app3522.example.com']);\napp.use('/api3522', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3522.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3524,
    "code": "const STRIPE_KEY_3524 = \"sk_test_3524_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3525,
    "code": "const STRIPE_KEY_3524 = process.env.STRIPE_KEY_3524;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3526,
    "code": "app.post('/vote3526', (req, res) => { save(req.body.choice3526); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3527,
    "code": "app.post('/vote3526', (req, res) => {\n  const c = String(req.body.choice3526 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3528,
    "code": "app.get('/download3528', (req, res) => {\n  res.sendFile('./public/' + req.query.f3528);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3529,
    "code": "const path3528 = require('path');\napp.get('/download3528', (req, res) => {\n  const safe = path3528.join(__dirname, 'public', path3528.basename(String(req.query.f3528 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3530,
    "code": "app.get('/proxy3530', async (req, res) => {\n  const resp = await fetch(req.query.url3530);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3531,
    "code": "const {URL} = require('url');\napp.get('/proxy3530', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3530 || ''));\n    const allowed = new Set(['api3530.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3532,
    "code": "app.post('/reg3532', (req, res) => { console.log('new', req.body.email3532, req.body.pass3532); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3533,
    "code": "app.post('/reg3532', (req, res) => { console.log('new', req.body.email3532); const copy = {...req.body}; delete copy.pass3532; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3534,
    "code": "app.get('/set3534', (req, res) => { res.cookie('sid', 'abc3534'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3535,
    "code": "app.get('/set3534', (req, res) => { res.cookie('sid', 'abc3534', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3536,
    "code": "app.get('/say3536', (req, res) => {\n  res.send('<p>' + req.query.msg3536 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3537,
    "code": "const esc3536 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3536', (req, res) => {\n  res.send('<p>' + esc3536(req.query.msg3536) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3538,
    "code": "router.get('/acct3538', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3538);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3539,
    "code": "router.get('/acct3538', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3538]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3540,
    "code": "app.post('/reg3540', (req, res) => { console.log('new', req.body.email3540, req.body.pass3540); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3541,
    "code": "app.post('/reg3540', (req, res) => { console.log('new', req.body.email3540); const copy = {...req.body}; delete copy.pass3540; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3542,
    "code": "app.post('/exec3542', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3542 + \" \" + req.body.dir3542;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3543,
    "code": "app.post('/exec3542', (req, res) => {\n  const name = String(req.body.name3542 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3542 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3544,
    "code": "app.get('/say3544', (req, res) => {\n  res.send('<p>' + req.query.msg3544 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3545,
    "code": "const esc3544 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3544', (req, res) => {\n  res.send('<p>' + esc3544(req.query.msg3544) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3547,
    "code": "app.get('/r3547', (req, res) => {\n  res.redirect(req.query.to3547);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3548,
    "code": "app.get('/r3547', (req, res) => {\n  const t = String(req.query.to3547 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3550,
    "code": "const STRIPE_KEY_3550 = \"sk_test_3550_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3551,
    "code": "const STRIPE_KEY_3550 = process.env.STRIPE_KEY_3550;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3552,
    "code": "app.get('/download3552', (req, res) => {\n  res.sendFile('./public/' + req.query.f3552);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3553,
    "code": "const path3552 = require('path');\napp.get('/download3552', (req, res) => {\n  const safe = path3552.join(__dirname, 'public', path3552.basename(String(req.query.f3552 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3554,
    "code": "app.post('/login3554', async (req, res) => { const ok = await auth(req.body.u3554, req.body.p3554); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3555,
    "code": "const attempts3554 = new Map();\napp.post('/login3554', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3554.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3554.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3554, req.body.p3554);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3556,
    "code": "app.get('/say3556', (req, res) => {\n  res.send('<p>' + req.query.msg3556 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3557,
    "code": "const esc3556 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3556', (req, res) => {\n  res.send('<p>' + esc3556(req.query.msg3556) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3558,
    "code": "app.use('/api3558', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3559,
    "code": "const allowed3558 = new Set(['https://app3558.example.com']);\napp.use('/api3558', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3558.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3560,
    "code": "app.post('/login3560', async (req, res) => { const ok = await auth(req.body.u3560, req.body.p3560); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3561,
    "code": "const attempts3560 = new Map();\napp.post('/login3560', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3560.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3560.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3560, req.body.p3560);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3562,
    "code": "app.get('/proxy3562', async (req, res) => {\n  const resp = await fetch(req.query.url3562);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3563,
    "code": "const {URL} = require('url');\napp.get('/proxy3562', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3562 || ''));\n    const allowed = new Set(['api3562.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3564,
    "code": "app.post('/apply3564', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3564 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3565,
    "code": "app.post('/apply3564', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3564 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3566,
    "code": "app.post('/reg3566', (req, res) => { console.log('new', req.body.email3566, req.body.pass3566); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3567,
    "code": "app.post('/reg3566', (req, res) => { console.log('new', req.body.email3566); const copy = {...req.body}; delete copy.pass3566; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3569,
    "code": "app.get('/proxy3569', async (req, res) => {\n  const resp = await fetch(req.query.url3569);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3570,
    "code": "const {URL} = require('url');\napp.get('/proxy3569', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3569 || ''));\n    const allowed = new Set(['api3569.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3572,
    "code": "router.get('/acct3572', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3572);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3573,
    "code": "router.get('/acct3572', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3572]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3575,
    "code": "app.get('/proxy3575', async (req, res) => {\n  const resp = await fetch(req.query.url3575);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3576,
    "code": "const {URL} = require('url');\napp.get('/proxy3575', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3575 || ''));\n    const allowed = new Set(['api3575.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3577,
    "code": "app.post('/exec3577', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3577 + \" \" + req.body.dir3577;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3578,
    "code": "app.post('/exec3577', (req, res) => {\n  const name = String(req.body.name3577 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3577 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3579,
    "code": "app.get('/download3579', (req, res) => {\n  res.sendFile('./public/' + req.query.f3579);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3580,
    "code": "const path3579 = require('path');\napp.get('/download3579', (req, res) => {\n  const safe = path3579.join(__dirname, 'public', path3579.basename(String(req.query.f3579 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3581,
    "code": "const STRIPE_KEY_3581 = \"sk_test_3581_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3582,
    "code": "const STRIPE_KEY_3581 = process.env.STRIPE_KEY_3581;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3583,
    "code": "app.post('/exec3583', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3583 + \" \" + req.body.dir3583;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3584,
    "code": "app.post('/exec3583', (req, res) => {\n  const name = String(req.body.name3583 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3583 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3585,
    "code": "app.post('/exec3585', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3585 + \" \" + req.body.dir3585;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3586,
    "code": "app.post('/exec3585', (req, res) => {\n  const name = String(req.body.name3585 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3585 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3588,
    "code": "app.get('/download3588', (req, res) => {\n  res.sendFile('./public/' + req.query.f3588);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3589,
    "code": "const path3588 = require('path');\napp.get('/download3588', (req, res) => {\n  const safe = path3588.join(__dirname, 'public', path3588.basename(String(req.query.f3588 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3590,
    "code": "const STRIPE_KEY_3590 = \"sk_test_3590_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3591,
    "code": "const STRIPE_KEY_3590 = process.env.STRIPE_KEY_3590;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3592,
    "code": "app.get('/proxy3592', async (req, res) => {\n  const resp = await fetch(req.query.url3592);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3593,
    "code": "const {URL} = require('url');\napp.get('/proxy3592', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3592 || ''));\n    const allowed = new Set(['api3592.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3594,
    "code": "app.get('/r3594', (req, res) => {\n  res.redirect(req.query.to3594);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3595,
    "code": "app.get('/r3594', (req, res) => {\n  const t = String(req.query.to3594 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3596,
    "code": "app.get('/set3596', (req, res) => { res.cookie('sid', 'abc3596'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3597,
    "code": "app.get('/set3596', (req, res) => { res.cookie('sid', 'abc3596', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3598,
    "code": "app.get('/r3598', (req, res) => {\n  res.redirect(req.query.to3598);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3599,
    "code": "app.get('/r3598', (req, res) => {\n  const t = String(req.query.to3598 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3600,
    "code": "const STRIPE_KEY_3600 = \"sk_test_3600_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3601,
    "code": "const STRIPE_KEY_3600 = process.env.STRIPE_KEY_3600;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3604,
    "code": "const STRIPE_KEY_3604 = \"sk_test_3604_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3605,
    "code": "const STRIPE_KEY_3604 = process.env.STRIPE_KEY_3604;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3606,
    "code": "app.get('/find3606', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3606 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3607,
    "code": "app.get('/find3606', async (req, res) => {\n  const name = String(req.query.n3606 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3608,
    "code": "app.get('/say3608', (req, res) => {\n  res.send('<p>' + req.query.msg3608 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3609,
    "code": "const esc3608 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3608', (req, res) => {\n  res.send('<p>' + esc3608(req.query.msg3608) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3610,
    "code": "app.post('/u3610', (req, res) => { req.files.f3610.mv('./uploads/' + req.files.f3610.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3611,
    "code": "const pathu3610 = require('path');\napp.post('/u3610', (req, res) => {\n  const f = req.files && req.files.f3610;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3610.basename(f.name);\n  f.mv(pathu3610.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3612,
    "code": "const STRIPE_KEY_3612 = \"sk_test_3612_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3613,
    "code": "const STRIPE_KEY_3612 = process.env.STRIPE_KEY_3612;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3614,
    "code": "app.get('/find3614', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3614 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3615,
    "code": "app.get('/find3614', async (req, res) => {\n  const name = String(req.query.n3614 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3616,
    "code": "router.get('/acct3616', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3616);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3617,
    "code": "router.get('/acct3616', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3616]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3618,
    "code": "app.get('/set3618', (req, res) => { res.cookie('sid', 'abc3618'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3619,
    "code": "app.get('/set3618', (req, res) => { res.cookie('sid', 'abc3618', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3620,
    "code": "app.get('/download3620', (req, res) => {\n  res.sendFile('./public/' + req.query.f3620);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3621,
    "code": "const path3620 = require('path');\napp.get('/download3620', (req, res) => {\n  const safe = path3620.join(__dirname, 'public', path3620.basename(String(req.query.f3620 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3622,
    "code": "const STRIPE_KEY_3622 = \"sk_test_3622_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3623,
    "code": "const STRIPE_KEY_3622 = process.env.STRIPE_KEY_3622;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3624,
    "code": "app.post('/apply3624', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3624 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3625,
    "code": "app.post('/apply3624', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3624 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3626,
    "code": "app.post('/reg3626', (req, res) => { console.log('new', req.body.email3626, req.body.pass3626); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3627,
    "code": "app.post('/reg3626', (req, res) => { console.log('new', req.body.email3626); const copy = {...req.body}; delete copy.pass3626; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3629,
    "code": "app.post('/u3629', (req, res) => { req.files.f3629.mv('./uploads/' + req.files.f3629.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3630,
    "code": "const pathu3629 = require('path');\napp.post('/u3629', (req, res) => {\n  const f = req.files && req.files.f3629;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3629.basename(f.name);\n  f.mv(pathu3629.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3632,
    "code": "router.get('/acct3632', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3632);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3633,
    "code": "router.get('/acct3632', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3632]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3634,
    "code": "app.post('/exec3634', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3634 + \" \" + req.body.dir3634;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3635,
    "code": "app.post('/exec3634', (req, res) => {\n  const name = String(req.body.name3634 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3634 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3636,
    "code": "app.get('/say3636', (req, res) => {\n  res.send('<p>' + req.query.msg3636 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3637,
    "code": "const esc3636 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3636', (req, res) => {\n  res.send('<p>' + esc3636(req.query.msg3636) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3638,
    "code": "app.get('/download3638', (req, res) => {\n  res.sendFile('./public/' + req.query.f3638);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3639,
    "code": "const path3638 = require('path');\napp.get('/download3638', (req, res) => {\n  const safe = path3638.join(__dirname, 'public', path3638.basename(String(req.query.f3638 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3641,
    "code": "app.get('/find3641', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3641 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3642,
    "code": "app.get('/find3641', async (req, res) => {\n  const name = String(req.query.n3641 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3643,
    "code": "app.post('/login3643', async (req, res) => { const ok = await auth(req.body.u3643, req.body.p3643); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3644,
    "code": "const attempts3643 = new Map();\napp.post('/login3643', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3643.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3643.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3643, req.body.p3643);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3646,
    "code": "app.get('/download3646', (req, res) => {\n  res.sendFile('./public/' + req.query.f3646);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3647,
    "code": "const path3646 = require('path');\napp.get('/download3646', (req, res) => {\n  const safe = path3646.join(__dirname, 'public', path3646.basename(String(req.query.f3646 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3648,
    "code": "app.post('/u3648', (req, res) => { req.files.f3648.mv('./uploads/' + req.files.f3648.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3649,
    "code": "const pathu3648 = require('path');\napp.post('/u3648', (req, res) => {\n  const f = req.files && req.files.f3648;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3648.basename(f.name);\n  f.mv(pathu3648.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3650,
    "code": "app.get('/download3650', (req, res) => {\n  res.sendFile('./public/' + req.query.f3650);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3651,
    "code": "const path3650 = require('path');\napp.get('/download3650', (req, res) => {\n  const safe = path3650.join(__dirname, 'public', path3650.basename(String(req.query.f3650 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3652,
    "code": "app.get('/find3652', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3652 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3653,
    "code": "app.get('/find3652', async (req, res) => {\n  const name = String(req.query.n3652 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3654,
    "code": "app.get('/proxy3654', async (req, res) => {\n  const resp = await fetch(req.query.url3654);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3655,
    "code": "const {URL} = require('url');\napp.get('/proxy3654', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3654 || ''));\n    const allowed = new Set(['api3654.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3656,
    "code": "app.post('/login3656', async (req, res) => { const ok = await auth(req.body.u3656, req.body.p3656); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3657,
    "code": "const attempts3656 = new Map();\napp.post('/login3656', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3656.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3656.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3656, req.body.p3656);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3658,
    "code": "app.get('/find3658', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3658 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3659,
    "code": "app.get('/find3658', async (req, res) => {\n  const name = String(req.query.n3658 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3660,
    "code": "app.post('/login3660', async (req, res) => { const ok = await auth(req.body.u3660, req.body.p3660); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3661,
    "code": "const attempts3660 = new Map();\napp.post('/login3660', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3660.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3660.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3660, req.body.p3660);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3662,
    "code": "app.get('/r3662', (req, res) => {\n  res.redirect(req.query.to3662);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3663,
    "code": "app.get('/r3662', (req, res) => {\n  const t = String(req.query.to3662 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3664,
    "code": "app.use('/api3664', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3665,
    "code": "const allowed3664 = new Set(['https://app3664.example.com']);\napp.use('/api3664', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3664.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3666,
    "code": "app.post('/exec3666', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3666 + \" \" + req.body.dir3666;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3667,
    "code": "app.post('/exec3666', (req, res) => {\n  const name = String(req.body.name3666 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3666 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3668,
    "code": "app.post('/login3668', async (req, res) => { const ok = await auth(req.body.u3668, req.body.p3668); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3669,
    "code": "const attempts3668 = new Map();\napp.post('/login3668', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3668.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3668.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3668, req.body.p3668);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3671,
    "code": "app.post('/u3671', (req, res) => { req.files.f3671.mv('./uploads/' + req.files.f3671.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3672,
    "code": "const pathu3671 = require('path');\napp.post('/u3671', (req, res) => {\n  const f = req.files && req.files.f3671;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3671.basename(f.name);\n  f.mv(pathu3671.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3673,
    "code": "app.get('/download3673', (req, res) => {\n  res.sendFile('./public/' + req.query.f3673);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3674,
    "code": "const path3673 = require('path');\napp.get('/download3673', (req, res) => {\n  const safe = path3673.join(__dirname, 'public', path3673.basename(String(req.query.f3673 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3675,
    "code": "app.use('/api3675', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3676,
    "code": "const allowed3675 = new Set(['https://app3675.example.com']);\napp.use('/api3675', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3675.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3677,
    "code": "app.post('/apply3677', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3677 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3678,
    "code": "app.post('/apply3677', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3677 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3679,
    "code": "app.post('/apply3679', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3679 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3680,
    "code": "app.post('/apply3679', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3679 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3681,
    "code": "app.post('/u3681', (req, res) => { req.files.f3681.mv('./uploads/' + req.files.f3681.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3682,
    "code": "const pathu3681 = require('path');\napp.post('/u3681', (req, res) => {\n  const f = req.files && req.files.f3681;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3681.basename(f.name);\n  f.mv(pathu3681.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3683,
    "code": "router.get('/acct3683', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3683);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3684,
    "code": "router.get('/acct3683', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3683]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3685,
    "code": "app.post('/apply3685', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3685 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3686,
    "code": "app.post('/apply3685', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3685 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3687,
    "code": "app.get('/set3687', (req, res) => { res.cookie('sid', 'abc3687'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3688,
    "code": "app.get('/set3687', (req, res) => { res.cookie('sid', 'abc3687', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3689,
    "code": "app.post('/u3689', (req, res) => { req.files.f3689.mv('./uploads/' + req.files.f3689.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3690,
    "code": "const pathu3689 = require('path');\napp.post('/u3689', (req, res) => {\n  const f = req.files && req.files.f3689;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3689.basename(f.name);\n  f.mv(pathu3689.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3691,
    "code": "app.use('/api3691', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3692,
    "code": "const allowed3691 = new Set(['https://app3691.example.com']);\napp.use('/api3691', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3691.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3693,
    "code": "const STRIPE_KEY_3693 = \"sk_test_3693_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3694,
    "code": "const STRIPE_KEY_3693 = process.env.STRIPE_KEY_3693;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3695,
    "code": "app.post('/apply3695', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3695 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3696,
    "code": "app.post('/apply3695', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3695 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3697,
    "code": "app.post('/exec3697', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3697 + \" \" + req.body.dir3697;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3698,
    "code": "app.post('/exec3697', (req, res) => {\n  const name = String(req.body.name3697 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3697 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3699,
    "code": "app.post('/vote3699', (req, res) => { save(req.body.choice3699); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3700,
    "code": "app.post('/vote3699', (req, res) => {\n  const c = String(req.body.choice3699 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3701,
    "code": "app.get('/find3701', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3701 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3702,
    "code": "app.get('/find3701', async (req, res) => {\n  const name = String(req.query.n3701 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3704,
    "code": "app.use('/api3704', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3705,
    "code": "const allowed3704 = new Set(['https://app3704.example.com']);\napp.use('/api3704', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3704.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3706,
    "code": "app.get('/r3706', (req, res) => {\n  res.redirect(req.query.to3706);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3707,
    "code": "app.get('/r3706', (req, res) => {\n  const t = String(req.query.to3706 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3708,
    "code": "app.post('/reg3708', (req, res) => { console.log('new', req.body.email3708, req.body.pass3708); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3709,
    "code": "app.post('/reg3708', (req, res) => { console.log('new', req.body.email3708); const copy = {...req.body}; delete copy.pass3708; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3710,
    "code": "app.post('/login3710', async (req, res) => { const ok = await auth(req.body.u3710, req.body.p3710); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3711,
    "code": "const attempts3710 = new Map();\napp.post('/login3710', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3710.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3710.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3710, req.body.p3710);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3712,
    "code": "app.get('/proxy3712', async (req, res) => {\n  const resp = await fetch(req.query.url3712);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3713,
    "code": "const {URL} = require('url');\napp.get('/proxy3712', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3712 || ''));\n    const allowed = new Set(['api3712.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3714,
    "code": "app.use('/api3714', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3715,
    "code": "const allowed3714 = new Set(['https://app3714.example.com']);\napp.use('/api3714', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3714.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3716,
    "code": "app.use('/api3716', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3717,
    "code": "const allowed3716 = new Set(['https://app3716.example.com']);\napp.use('/api3716', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3716.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3718,
    "code": "router.get('/acct3718', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3718);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3719,
    "code": "router.get('/acct3718', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3718]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3720,
    "code": "app.get('/r3720', (req, res) => {\n  res.redirect(req.query.to3720);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3721,
    "code": "app.get('/r3720', (req, res) => {\n  const t = String(req.query.to3720 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3722,
    "code": "app.post('/vote3722', (req, res) => { save(req.body.choice3722); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3723,
    "code": "app.post('/vote3722', (req, res) => {\n  const c = String(req.body.choice3722 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3724,
    "code": "app.get('/set3724', (req, res) => { res.cookie('sid', 'abc3724'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3725,
    "code": "app.get('/set3724', (req, res) => { res.cookie('sid', 'abc3724', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3726,
    "code": "const STRIPE_KEY_3726 = \"sk_test_3726_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3727,
    "code": "const STRIPE_KEY_3726 = process.env.STRIPE_KEY_3726;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3728,
    "code": "app.get('/say3728', (req, res) => {\n  res.send('<p>' + req.query.msg3728 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3729,
    "code": "const esc3728 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3728', (req, res) => {\n  res.send('<p>' + esc3728(req.query.msg3728) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3730,
    "code": "const STRIPE_KEY_3730 = \"sk_test_3730_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3731,
    "code": "const STRIPE_KEY_3730 = process.env.STRIPE_KEY_3730;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3732,
    "code": "app.post('/login3732', async (req, res) => { const ok = await auth(req.body.u3732, req.body.p3732); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3733,
    "code": "const attempts3732 = new Map();\napp.post('/login3732', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3732.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3732.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3732, req.body.p3732);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3735,
    "code": "app.post('/vote3735', (req, res) => { save(req.body.choice3735); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3736,
    "code": "app.post('/vote3735', (req, res) => {\n  const c = String(req.body.choice3735 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3738,
    "code": "app.get('/set3738', (req, res) => { res.cookie('sid', 'abc3738'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3739,
    "code": "app.get('/set3738', (req, res) => { res.cookie('sid', 'abc3738', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3740,
    "code": "router.get('/acct3740', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3740);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3741,
    "code": "router.get('/acct3740', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3740]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3742,
    "code": "app.post('/exec3742', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3742 + \" \" + req.body.dir3742;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3743,
    "code": "app.post('/exec3742', (req, res) => {\n  const name = String(req.body.name3742 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3742 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3744,
    "code": "const STRIPE_KEY_3744 = \"sk_test_3744_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3745,
    "code": "const STRIPE_KEY_3744 = process.env.STRIPE_KEY_3744;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3746,
    "code": "app.post('/apply3746', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3746 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3747,
    "code": "app.post('/apply3746', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3746 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3748,
    "code": "const STRIPE_KEY_3748 = \"sk_test_3748_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3749,
    "code": "const STRIPE_KEY_3748 = process.env.STRIPE_KEY_3748;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3750,
    "code": "app.get('/find3750', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3750 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3751,
    "code": "app.get('/find3750', async (req, res) => {\n  const name = String(req.query.n3750 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3752,
    "code": "app.post('/exec3752', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3752 + \" \" + req.body.dir3752;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3753,
    "code": "app.post('/exec3752', (req, res) => {\n  const name = String(req.body.name3752 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3752 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3754,
    "code": "app.post('/u3754', (req, res) => { req.files.f3754.mv('./uploads/' + req.files.f3754.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3755,
    "code": "const pathu3754 = require('path');\napp.post('/u3754', (req, res) => {\n  const f = req.files && req.files.f3754;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3754.basename(f.name);\n  f.mv(pathu3754.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3756,
    "code": "app.post('/login3756', async (req, res) => { const ok = await auth(req.body.u3756, req.body.p3756); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3757,
    "code": "const attempts3756 = new Map();\napp.post('/login3756', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3756.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3756.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3756, req.body.p3756);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3758,
    "code": "app.get('/set3758', (req, res) => { res.cookie('sid', 'abc3758'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3759,
    "code": "app.get('/set3758', (req, res) => { res.cookie('sid', 'abc3758', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3760,
    "code": "app.post('/u3760', (req, res) => { req.files.f3760.mv('./uploads/' + req.files.f3760.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3761,
    "code": "const pathu3760 = require('path');\napp.post('/u3760', (req, res) => {\n  const f = req.files && req.files.f3760;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3760.basename(f.name);\n  f.mv(pathu3760.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3763,
    "code": "app.post('/exec3763', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3763 + \" \" + req.body.dir3763;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3764,
    "code": "app.post('/exec3763', (req, res) => {\n  const name = String(req.body.name3763 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3763 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3765,
    "code": "app.post('/vote3765', (req, res) => { save(req.body.choice3765); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3766,
    "code": "app.post('/vote3765', (req, res) => {\n  const c = String(req.body.choice3765 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3767,
    "code": "app.get('/r3767', (req, res) => {\n  res.redirect(req.query.to3767);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3768,
    "code": "app.get('/r3767', (req, res) => {\n  const t = String(req.query.to3767 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3769,
    "code": "const STRIPE_KEY_3769 = \"sk_test_3769_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3770,
    "code": "const STRIPE_KEY_3769 = process.env.STRIPE_KEY_3769;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3771,
    "code": "app.get('/find3771', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3771 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3772,
    "code": "app.get('/find3771', async (req, res) => {\n  const name = String(req.query.n3771 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3773,
    "code": "app.post('/u3773', (req, res) => { req.files.f3773.mv('./uploads/' + req.files.f3773.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3774,
    "code": "const pathu3773 = require('path');\napp.post('/u3773', (req, res) => {\n  const f = req.files && req.files.f3773;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3773.basename(f.name);\n  f.mv(pathu3773.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3775,
    "code": "router.get('/acct3775', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3775);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3776,
    "code": "router.get('/acct3775', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3775]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3779,
    "code": "app.get('/r3779', (req, res) => {\n  res.redirect(req.query.to3779);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3780,
    "code": "app.get('/r3779', (req, res) => {\n  const t = String(req.query.to3779 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3781,
    "code": "app.post('/login3781', async (req, res) => { const ok = await auth(req.body.u3781, req.body.p3781); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 3782,
    "code": "const attempts3781 = new Map();\napp.post('/login3781', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts3781.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts3781.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u3781, req.body.p3781);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3783,
    "code": "app.post('/u3783', (req, res) => { req.files.f3783.mv('./uploads/' + req.files.f3783.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3784,
    "code": "const pathu3783 = require('path');\napp.post('/u3783', (req, res) => {\n  const f = req.files && req.files.f3783;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3783.basename(f.name);\n  f.mv(pathu3783.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3785,
    "code": "app.get('/say3785', (req, res) => {\n  res.send('<p>' + req.query.msg3785 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3786,
    "code": "const esc3785 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3785', (req, res) => {\n  res.send('<p>' + esc3785(req.query.msg3785) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3787,
    "code": "app.get('/set3787', (req, res) => { res.cookie('sid', 'abc3787'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3788,
    "code": "app.get('/set3787', (req, res) => { res.cookie('sid', 'abc3787', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3789,
    "code": "app.get('/set3789', (req, res) => { res.cookie('sid', 'abc3789'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3790,
    "code": "app.get('/set3789', (req, res) => { res.cookie('sid', 'abc3789', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3791,
    "code": "app.post('/exec3791', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3791 + \" \" + req.body.dir3791;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3792,
    "code": "app.post('/exec3791', (req, res) => {\n  const name = String(req.body.name3791 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3791 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3793,
    "code": "app.get('/proxy3793', async (req, res) => {\n  const resp = await fetch(req.query.url3793);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3794,
    "code": "const {URL} = require('url');\napp.get('/proxy3793', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3793 || ''));\n    const allowed = new Set(['api3793.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3796,
    "code": "app.get('/proxy3796', async (req, res) => {\n  const resp = await fetch(req.query.url3796);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3797,
    "code": "const {URL} = require('url');\napp.get('/proxy3796', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3796 || ''));\n    const allowed = new Set(['api3796.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3798,
    "code": "app.post('/u3798', (req, res) => { req.files.f3798.mv('./uploads/' + req.files.f3798.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3799,
    "code": "const pathu3798 = require('path');\napp.post('/u3798', (req, res) => {\n  const f = req.files && req.files.f3798;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3798.basename(f.name);\n  f.mv(pathu3798.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3800,
    "code": "app.get('/set3800', (req, res) => { res.cookie('sid', 'abc3800'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3801,
    "code": "app.get('/set3800', (req, res) => { res.cookie('sid', 'abc3800', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3802,
    "code": "app.post('/vote3802', (req, res) => { save(req.body.choice3802); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3803,
    "code": "app.post('/vote3802', (req, res) => {\n  const c = String(req.body.choice3802 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3804,
    "code": "app.get('/proxy3804', async (req, res) => {\n  const resp = await fetch(req.query.url3804);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3805,
    "code": "const {URL} = require('url');\napp.get('/proxy3804', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3804 || ''));\n    const allowed = new Set(['api3804.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3807,
    "code": "app.get('/download3807', (req, res) => {\n  res.sendFile('./public/' + req.query.f3807);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3808,
    "code": "const path3807 = require('path');\napp.get('/download3807', (req, res) => {\n  const safe = path3807.join(__dirname, 'public', path3807.basename(String(req.query.f3807 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3809,
    "code": "app.get('/r3809', (req, res) => {\n  res.redirect(req.query.to3809);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3810,
    "code": "app.get('/r3809', (req, res) => {\n  const t = String(req.query.to3809 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3811,
    "code": "app.post('/u3811', (req, res) => { req.files.f3811.mv('./uploads/' + req.files.f3811.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3812,
    "code": "const pathu3811 = require('path');\napp.post('/u3811', (req, res) => {\n  const f = req.files && req.files.f3811;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3811.basename(f.name);\n  f.mv(pathu3811.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3813,
    "code": "app.post('/vote3813', (req, res) => { save(req.body.choice3813); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3814,
    "code": "app.post('/vote3813', (req, res) => {\n  const c = String(req.body.choice3813 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3815,
    "code": "app.post('/apply3815', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3815 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3816,
    "code": "app.post('/apply3815', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3815 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3817,
    "code": "app.get('/proxy3817', async (req, res) => {\n  const resp = await fetch(req.query.url3817);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3818,
    "code": "const {URL} = require('url');\napp.get('/proxy3817', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3817 || ''));\n    const allowed = new Set(['api3817.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3819,
    "code": "app.post('/vote3819', (req, res) => { save(req.body.choice3819); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3820,
    "code": "app.post('/vote3819', (req, res) => {\n  const c = String(req.body.choice3819 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3822,
    "code": "router.get('/acct3822', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3822);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3823,
    "code": "router.get('/acct3822', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3822]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3824,
    "code": "app.get('/proxy3824', async (req, res) => {\n  const resp = await fetch(req.query.url3824);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3825,
    "code": "const {URL} = require('url');\napp.get('/proxy3824', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3824 || ''));\n    const allowed = new Set(['api3824.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3826,
    "code": "app.get('/proxy3826', async (req, res) => {\n  const resp = await fetch(req.query.url3826);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3827,
    "code": "const {URL} = require('url');\napp.get('/proxy3826', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3826 || ''));\n    const allowed = new Set(['api3826.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3828,
    "code": "app.get('/r3828', (req, res) => {\n  res.redirect(req.query.to3828);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3829,
    "code": "app.get('/r3828', (req, res) => {\n  const t = String(req.query.to3828 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3830,
    "code": "app.post('/u3830', (req, res) => { req.files.f3830.mv('./uploads/' + req.files.f3830.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3831,
    "code": "const pathu3830 = require('path');\napp.post('/u3830', (req, res) => {\n  const f = req.files && req.files.f3830;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3830.basename(f.name);\n  f.mv(pathu3830.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3832,
    "code": "app.get('/set3832', (req, res) => { res.cookie('sid', 'abc3832'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3833,
    "code": "app.get('/set3832', (req, res) => { res.cookie('sid', 'abc3832', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3834,
    "code": "app.post('/reg3834', (req, res) => { console.log('new', req.body.email3834, req.body.pass3834); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3835,
    "code": "app.post('/reg3834', (req, res) => { console.log('new', req.body.email3834); const copy = {...req.body}; delete copy.pass3834; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3836,
    "code": "app.post('/reg3836', (req, res) => { console.log('new', req.body.email3836, req.body.pass3836); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3837,
    "code": "app.post('/reg3836', (req, res) => { console.log('new', req.body.email3836); const copy = {...req.body}; delete copy.pass3836; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3838,
    "code": "app.post('/reg3838', (req, res) => { console.log('new', req.body.email3838, req.body.pass3838); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3839,
    "code": "app.post('/reg3838', (req, res) => { console.log('new', req.body.email3838); const copy = {...req.body}; delete copy.pass3838; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3840,
    "code": "app.get('/r3840', (req, res) => {\n  res.redirect(req.query.to3840);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3841,
    "code": "app.get('/r3840', (req, res) => {\n  const t = String(req.query.to3840 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3844,
    "code": "app.post('/apply3844', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3844 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3845,
    "code": "app.post('/apply3844', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3844 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3846,
    "code": "app.get('/say3846', (req, res) => {\n  res.send('<p>' + req.query.msg3846 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3847,
    "code": "const esc3846 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3846', (req, res) => {\n  res.send('<p>' + esc3846(req.query.msg3846) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3848,
    "code": "app.get('/proxy3848', async (req, res) => {\n  const resp = await fetch(req.query.url3848);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3849,
    "code": "const {URL} = require('url');\napp.get('/proxy3848', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3848 || ''));\n    const allowed = new Set(['api3848.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3851,
    "code": "app.get('/set3851', (req, res) => { res.cookie('sid', 'abc3851'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3852,
    "code": "app.get('/set3851', (req, res) => { res.cookie('sid', 'abc3851', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3853,
    "code": "app.get('/say3853', (req, res) => {\n  res.send('<p>' + req.query.msg3853 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3854,
    "code": "const esc3853 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3853', (req, res) => {\n  res.send('<p>' + esc3853(req.query.msg3853) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3855,
    "code": "app.use('/api3855', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3856,
    "code": "const allowed3855 = new Set(['https://app3855.example.com']);\napp.use('/api3855', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3855.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3857,
    "code": "app.get('/proxy3857', async (req, res) => {\n  const resp = await fetch(req.query.url3857);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3858,
    "code": "const {URL} = require('url');\napp.get('/proxy3857', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3857 || ''));\n    const allowed = new Set(['api3857.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3859,
    "code": "app.use('/api3859', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3860,
    "code": "const allowed3859 = new Set(['https://app3859.example.com']);\napp.use('/api3859', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3859.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3861,
    "code": "app.get('/r3861', (req, res) => {\n  res.redirect(req.query.to3861);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3862,
    "code": "app.get('/r3861', (req, res) => {\n  const t = String(req.query.to3861 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3863,
    "code": "app.get('/download3863', (req, res) => {\n  res.sendFile('./public/' + req.query.f3863);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3864,
    "code": "const path3863 = require('path');\napp.get('/download3863', (req, res) => {\n  const safe = path3863.join(__dirname, 'public', path3863.basename(String(req.query.f3863 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3865,
    "code": "router.get('/acct3865', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3865);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3866,
    "code": "router.get('/acct3865', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3865]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3867,
    "code": "app.get('/find3867', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3867 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3868,
    "code": "app.get('/find3867', async (req, res) => {\n  const name = String(req.query.n3867 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3869,
    "code": "app.use('/api3869', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3870,
    "code": "const allowed3869 = new Set(['https://app3869.example.com']);\napp.use('/api3869', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3869.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3872,
    "code": "app.get('/say3872', (req, res) => {\n  res.send('<p>' + req.query.msg3872 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3873,
    "code": "const esc3872 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3872', (req, res) => {\n  res.send('<p>' + esc3872(req.query.msg3872) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3874,
    "code": "app.post('/reg3874', (req, res) => { console.log('new', req.body.email3874, req.body.pass3874); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3875,
    "code": "app.post('/reg3874', (req, res) => { console.log('new', req.body.email3874); const copy = {...req.body}; delete copy.pass3874; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3876,
    "code": "app.post('/u3876', (req, res) => { req.files.f3876.mv('./uploads/' + req.files.f3876.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3877,
    "code": "const pathu3876 = require('path');\napp.post('/u3876', (req, res) => {\n  const f = req.files && req.files.f3876;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3876.basename(f.name);\n  f.mv(pathu3876.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3878,
    "code": "app.get('/r3878', (req, res) => {\n  res.redirect(req.query.to3878);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3879,
    "code": "app.get('/r3878', (req, res) => {\n  const t = String(req.query.to3878 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3880,
    "code": "app.post('/vote3880', (req, res) => { save(req.body.choice3880); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3881,
    "code": "app.post('/vote3880', (req, res) => {\n  const c = String(req.body.choice3880 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3883,
    "code": "app.post('/vote3883', (req, res) => { save(req.body.choice3883); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3884,
    "code": "app.post('/vote3883', (req, res) => {\n  const c = String(req.body.choice3883 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3885,
    "code": "app.use('/api3885', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3886,
    "code": "const allowed3885 = new Set(['https://app3885.example.com']);\napp.use('/api3885', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3885.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3887,
    "code": "app.get('/download3887', (req, res) => {\n  res.sendFile('./public/' + req.query.f3887);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3888,
    "code": "const path3887 = require('path');\napp.get('/download3887', (req, res) => {\n  const safe = path3887.join(__dirname, 'public', path3887.basename(String(req.query.f3887 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3889,
    "code": "router.get('/acct3889', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3889);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3890,
    "code": "router.get('/acct3889', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3889]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3891,
    "code": "app.post('/exec3891', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3891 + \" \" + req.body.dir3891;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3892,
    "code": "app.post('/exec3891', (req, res) => {\n  const name = String(req.body.name3891 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3891 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3893,
    "code": "app.post('/u3893', (req, res) => { req.files.f3893.mv('./uploads/' + req.files.f3893.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3894,
    "code": "const pathu3893 = require('path');\napp.post('/u3893', (req, res) => {\n  const f = req.files && req.files.f3893;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3893.basename(f.name);\n  f.mv(pathu3893.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3895,
    "code": "app.use('/api3895', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3896,
    "code": "const allowed3895 = new Set(['https://app3895.example.com']);\napp.use('/api3895', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3895.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3897,
    "code": "app.post('/apply3897', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3897 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3898,
    "code": "app.post('/apply3897', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3897 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3900,
    "code": "app.post('/reg3900', (req, res) => { console.log('new', req.body.email3900, req.body.pass3900); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3901,
    "code": "app.post('/reg3900', (req, res) => { console.log('new', req.body.email3900); const copy = {...req.body}; delete copy.pass3900; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3902,
    "code": "app.get('/find3902', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3902 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3903,
    "code": "app.get('/find3902', async (req, res) => {\n  const name = String(req.query.n3902 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3905,
    "code": "app.use('/api3905', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3906,
    "code": "const allowed3905 = new Set(['https://app3905.example.com']);\napp.use('/api3905', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3905.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3907,
    "code": "app.post('/exec3907', (req, res) => {\n  const cmd = \"tar -czf \" + req.body.name3907 + \" \" + req.body.dir3907;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Constructing shell commands with user input can lead to command injection."
  },
  {
    "id": 3908,
    "code": "app.post('/exec3907', (req, res) => {\n  const name = String(req.body.name3907 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const dir = String(req.body.dir3907 || \"\").replace(/[^\\w\\-\\/]*/g, \"\");\n  const cmd = \"tar -czf \" + name + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3909,
    "code": "app.post('/reg3909', (req, res) => { console.log('new', req.body.email3909, req.body.pass3909); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3910,
    "code": "app.post('/reg3909', (req, res) => { console.log('new', req.body.email3909); const copy = {...req.body}; delete copy.pass3909; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3911,
    "code": "app.get('/download3911', (req, res) => {\n  res.sendFile('./public/' + req.query.f3911);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3912,
    "code": "const path3911 = require('path');\napp.get('/download3911', (req, res) => {\n  const safe = path3911.join(__dirname, 'public', path3911.basename(String(req.query.f3911 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3913,
    "code": "app.post('/reg3913', (req, res) => { console.log('new', req.body.email3913, req.body.pass3913); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3914,
    "code": "app.post('/reg3913', (req, res) => { console.log('new', req.body.email3913); const copy = {...req.body}; delete copy.pass3913; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3917,
    "code": "app.get('/set3917', (req, res) => { res.cookie('sid', 'abc3917'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3918,
    "code": "app.get('/set3917', (req, res) => { res.cookie('sid', 'abc3917', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3919,
    "code": "app.post('/reg3919', (req, res) => { console.log('new', req.body.email3919, req.body.pass3919); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3920,
    "code": "app.post('/reg3919', (req, res) => { console.log('new', req.body.email3919); const copy = {...req.body}; delete copy.pass3919; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3922,
    "code": "app.post('/u3922', (req, res) => { req.files.f3922.mv('./uploads/' + req.files.f3922.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3923,
    "code": "const pathu3922 = require('path');\napp.post('/u3922', (req, res) => {\n  const f = req.files && req.files.f3922;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3922.basename(f.name);\n  f.mv(pathu3922.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3925,
    "code": "app.post('/reg3925', (req, res) => { console.log('new', req.body.email3925, req.body.pass3925); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3926,
    "code": "app.post('/reg3925', (req, res) => { console.log('new', req.body.email3925); const copy = {...req.body}; delete copy.pass3925; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3927,
    "code": "app.post('/apply3927', (req, res) => {\n  const cfg = eval('(' + req.body.cfg3927 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 3928,
    "code": "app.post('/apply3927', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg3927 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3930,
    "code": "app.post('/reg3930', (req, res) => { console.log('new', req.body.email3930, req.body.pass3930); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3931,
    "code": "app.post('/reg3930', (req, res) => { console.log('new', req.body.email3930); const copy = {...req.body}; delete copy.pass3930; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3932,
    "code": "const STRIPE_KEY_3932 = \"sk_test_3932_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3933,
    "code": "const STRIPE_KEY_3932 = process.env.STRIPE_KEY_3932;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3934,
    "code": "app.use('/api3934', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3935,
    "code": "const allowed3934 = new Set(['https://app3934.example.com']);\napp.use('/api3934', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3934.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3936,
    "code": "const STRIPE_KEY_3936 = \"sk_test_3936_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3937,
    "code": "const STRIPE_KEY_3936 = process.env.STRIPE_KEY_3936;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3940,
    "code": "app.use('/api3940', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3941,
    "code": "const allowed3940 = new Set(['https://app3940.example.com']);\napp.use('/api3940', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3940.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3942,
    "code": "const STRIPE_KEY_3942 = \"sk_test_3942_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3943,
    "code": "const STRIPE_KEY_3942 = process.env.STRIPE_KEY_3942;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3944,
    "code": "app.post('/reg3944', (req, res) => { console.log('new', req.body.email3944, req.body.pass3944); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3945,
    "code": "app.post('/reg3944', (req, res) => { console.log('new', req.body.email3944); const copy = {...req.body}; delete copy.pass3944; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3946,
    "code": "app.get('/say3946', (req, res) => {\n  res.send('<p>' + req.query.msg3946 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3947,
    "code": "const esc3946 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3946', (req, res) => {\n  res.send('<p>' + esc3946(req.query.msg3946) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3948,
    "code": "app.get('/proxy3948', async (req, res) => {\n  const resp = await fetch(req.query.url3948);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 3949,
    "code": "const {URL} = require('url');\napp.get('/proxy3948', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url3948 || ''));\n    const allowed = new Set(['api3948.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3950,
    "code": "app.use('/api3950', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3951,
    "code": "const allowed3950 = new Set(['https://app3950.example.com']);\napp.use('/api3950', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3950.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3952,
    "code": "const STRIPE_KEY_3952 = \"sk_test_3952_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 3953,
    "code": "const STRIPE_KEY_3952 = process.env.STRIPE_KEY_3952;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3954,
    "code": "app.get('/set3954', (req, res) => { res.cookie('sid', 'abc3954'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3955,
    "code": "app.get('/set3954', (req, res) => { res.cookie('sid', 'abc3954', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3956,
    "code": "app.get('/set3956', (req, res) => { res.cookie('sid', 'abc3956'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3957,
    "code": "app.get('/set3956', (req, res) => { res.cookie('sid', 'abc3956', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3959,
    "code": "app.get('/say3959', (req, res) => {\n  res.send('<p>' + req.query.msg3959 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3960,
    "code": "const esc3959 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3959', (req, res) => {\n  res.send('<p>' + esc3959(req.query.msg3959) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3961,
    "code": "app.get('/download3961', (req, res) => {\n  res.sendFile('./public/' + req.query.f3961);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3962,
    "code": "const path3961 = require('path');\napp.get('/download3961', (req, res) => {\n  const safe = path3961.join(__dirname, 'public', path3961.basename(String(req.query.f3961 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3963,
    "code": "app.get('/download3963', (req, res) => {\n  res.sendFile('./public/' + req.query.f3963);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3964,
    "code": "const path3963 = require('path');\napp.get('/download3963', (req, res) => {\n  const safe = path3963.join(__dirname, 'public', path3963.basename(String(req.query.f3963 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3965,
    "code": "app.use('/api3965', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 3966,
    "code": "const allowed3965 = new Set(['https://app3965.example.com']);\napp.use('/api3965', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed3965.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3967,
    "code": "app.post('/vote3967', (req, res) => { save(req.body.choice3967); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3968,
    "code": "app.post('/vote3967', (req, res) => {\n  const c = String(req.body.choice3967 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3969,
    "code": "app.get('/download3969', (req, res) => {\n  res.sendFile('./public/' + req.query.f3969);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 3970,
    "code": "const path3969 = require('path');\napp.get('/download3969', (req, res) => {\n  const safe = path3969.join(__dirname, 'public', path3969.basename(String(req.query.f3969 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3971,
    "code": "app.get('/r3971', (req, res) => {\n  res.redirect(req.query.to3971);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3972,
    "code": "app.get('/r3971', (req, res) => {\n  const t = String(req.query.to3971 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3973,
    "code": "app.get('/say3973', (req, res) => {\n  res.send('<p>' + req.query.msg3973 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 3974,
    "code": "const esc3973 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say3973', (req, res) => {\n  res.send('<p>' + esc3973(req.query.msg3973) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3975,
    "code": "app.post('/u3975', (req, res) => { req.files.f3975.mv('./uploads/' + req.files.f3975.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3976,
    "code": "const pathu3975 = require('path');\napp.post('/u3975', (req, res) => {\n  const f = req.files && req.files.f3975;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3975.basename(f.name);\n  f.mv(pathu3975.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3977,
    "code": "app.post('/u3977', (req, res) => { req.files.f3977.mv('./uploads/' + req.files.f3977.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3978,
    "code": "const pathu3977 = require('path');\napp.post('/u3977', (req, res) => {\n  const f = req.files && req.files.f3977;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3977.basename(f.name);\n  f.mv(pathu3977.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3979,
    "code": "app.get('/set3979', (req, res) => { res.cookie('sid', 'abc3979'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 3980,
    "code": "app.get('/set3979', (req, res) => { res.cookie('sid', 'abc3979', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3982,
    "code": "app.post('/reg3982', (req, res) => { console.log('new', req.body.email3982, req.body.pass3982); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 3983,
    "code": "app.post('/reg3982', (req, res) => { console.log('new', req.body.email3982); const copy = {...req.body}; delete copy.pass3982; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3984,
    "code": "app.post('/u3984', (req, res) => { req.files.f3984.mv('./uploads/' + req.files.f3984.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3985,
    "code": "const pathu3984 = require('path');\napp.post('/u3984', (req, res) => {\n  const f = req.files && req.files.f3984;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3984.basename(f.name);\n  f.mv(pathu3984.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3986,
    "code": "app.get('/find3986', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n3986 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 3987,
    "code": "app.get('/find3986', async (req, res) => {\n  const name = String(req.query.n3986 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3988,
    "code": "app.get('/r3988', (req, res) => {\n  res.redirect(req.query.to3988);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 3989,
    "code": "app.get('/r3988', (req, res) => {\n  const t = String(req.query.to3988 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3990,
    "code": "app.post('/u3990', (req, res) => { req.files.f3990.mv('./uploads/' + req.files.f3990.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 3991,
    "code": "const pathu3990 = require('path');\napp.post('/u3990', (req, res) => {\n  const f = req.files && req.files.f3990;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu3990.basename(f.name);\n  f.mv(pathu3990.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3992,
    "code": "app.post('/vote3992', (req, res) => { save(req.body.choice3992); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3993,
    "code": "app.post('/vote3992', (req, res) => {\n  const c = String(req.body.choice3992 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3994,
    "code": "router.get('/acct3994', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3994);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 3995,
    "code": "router.get('/acct3994', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3994]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3996,
    "code": "app.post('/vote3996', (req, res) => { save(req.body.choice3996); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 3997,
    "code": "app.post('/vote3996', (req, res) => {\n  const c = String(req.body.choice3996 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 3999,
    "code": "router.get('/acct3999', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id3999);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4000,
    "code": "router.get('/acct3999', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id3999]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4001,
    "code": "app.post('/login4001', async (req, res) => { const ok = await auth(req.body.u4001, req.body.p4001); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 4002,
    "code": "const attempts4001 = new Map();\napp.post('/login4001', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts4001.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts4001.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u4001, req.body.p4001);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4003,
    "code": "app.get('/proxy4003', async (req, res) => {\n  const resp = await fetch(req.query.url4003);\n  res.send(await resp.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Allowlisting hosts prevents SSRF to internal services."
  },
  {
    "id": 4004,
    "code": "const {URL} = require('url');\napp.get('/proxy4003', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url4003 || ''));\n    const allowed = new Set(['api4003.example.com']);\n    if (!allowed.has(u.hostname)) return res.status(400).send('disallowed');\n    const resp = await fetch(u.toString());\n    res.send(await resp.text());\n  } catch(e) { res.status(400).send('bad'); }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4005,
    "code": "app.post('/vote4005', (req, res) => { save(req.body.choice4005); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 4006,
    "code": "app.post('/vote4005', (req, res) => {\n  const c = String(req.body.choice4005 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4007,
    "code": "app.post('/u4007', (req, res) => { req.files.f4007.mv('./uploads/' + req.files.f4007.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 4008,
    "code": "const pathu4007 = require('path');\napp.post('/u4007', (req, res) => {\n  const f = req.files && req.files.f4007;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu4007.basename(f.name);\n  f.mv(pathu4007.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4011,
    "code": "app.use('/api4011', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 4012,
    "code": "const allowed4011 = new Set(['https://app4011.example.com']);\napp.use('/api4011', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed4011.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4014,
    "code": "app.use('/api4014', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 4015,
    "code": "const allowed4014 = new Set(['https://app4014.example.com']);\napp.use('/api4014', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed4014.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4016,
    "code": "const STRIPE_KEY_4016 = \"sk_test_4016_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 4017,
    "code": "const STRIPE_KEY_4016 = process.env.STRIPE_KEY_4016;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4018,
    "code": "app.post('/u4018', (req, res) => { req.files.f4018.mv('./uploads/' + req.files.f4018.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 4019,
    "code": "const pathu4018 = require('path');\napp.post('/u4018', (req, res) => {\n  const f = req.files && req.files.f4018;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu4018.basename(f.name);\n  f.mv(pathu4018.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4021,
    "code": "router.get('/acct4021', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id4021);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4022,
    "code": "router.get('/acct4021', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id4021]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4023,
    "code": "app.post('/vote4023', (req, res) => { save(req.body.choice4023); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 4024,
    "code": "app.post('/vote4023', (req, res) => {\n  const c = String(req.body.choice4023 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4025,
    "code": "app.get('/set4025', (req, res) => { res.cookie('sid', 'abc4025'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 4026,
    "code": "app.get('/set4025', (req, res) => { res.cookie('sid', 'abc4025', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4027,
    "code": "app.post('/vote4027', (req, res) => { save(req.body.choice4027); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 4028,
    "code": "app.post('/vote4027', (req, res) => {\n  const c = String(req.body.choice4027 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4029,
    "code": "app.post('/apply4029', (req, res) => {\n  const cfg = eval('(' + req.body.cfg4029 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 4030,
    "code": "app.post('/apply4029', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg4029 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4031,
    "code": "app.post('/reg4031', (req, res) => { console.log('new', req.body.email4031, req.body.pass4031); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 4032,
    "code": "app.post('/reg4031', (req, res) => { console.log('new', req.body.email4031); const copy = {...req.body}; delete copy.pass4031; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4033,
    "code": "app.get('/download4033', (req, res) => {\n  res.sendFile('./public/' + req.query.f4033);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 4034,
    "code": "const path4033 = require('path');\napp.get('/download4033', (req, res) => {\n  const safe = path4033.join(__dirname, 'public', path4033.basename(String(req.query.f4033 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4036,
    "code": "router.get('/acct4036', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id4036);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4037,
    "code": "router.get('/acct4036', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id4036]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4038,
    "code": "app.post('/vote4038', (req, res) => { save(req.body.choice4038); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 4039,
    "code": "app.post('/vote4038', (req, res) => {\n  const c = String(req.body.choice4038 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4040,
    "code": "router.get('/acct4040', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id4040);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4041,
    "code": "router.get('/acct4040', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id4040]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4042,
    "code": "app.get('/say4042', (req, res) => {\n  res.send('<p>' + req.query.msg4042 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 4043,
    "code": "const esc4042 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say4042', (req, res) => {\n  res.send('<p>' + esc4042(req.query.msg4042) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4044,
    "code": "app.post('/u4044', (req, res) => { req.files.f4044.mv('./uploads/' + req.files.f4044.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 4045,
    "code": "const pathu4044 = require('path');\napp.post('/u4044', (req, res) => {\n  const f = req.files && req.files.f4044;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu4044.basename(f.name);\n  f.mv(pathu4044.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4046,
    "code": "app.get('/download4046', (req, res) => {\n  res.sendFile('./public/' + req.query.f4046);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Using user-supplied file paths can allow traversal outside intended directories."
  },
  {
    "id": 4047,
    "code": "const path4046 = require('path');\napp.get('/download4046', (req, res) => {\n  const safe = path4046.join(__dirname, 'public', path4046.basename(String(req.query.f4046 || '')));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4048,
    "code": "app.post('/reg4048', (req, res) => { console.log('new', req.body.email4048, req.body.pass4048); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 4049,
    "code": "app.post('/reg4048', (req, res) => { console.log('new', req.body.email4048); const copy = {...req.body}; delete copy.pass4048; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4050,
    "code": "app.post('/apply4050', (req, res) => {\n  const cfg = eval('(' + req.body.cfg4050 + ')');\n  apply(cfg);\n  res.send('done');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Using eval on untrusted input can execute arbitrary code. Use JSON.parse."
  },
  {
    "id": 4051,
    "code": "app.post('/apply4050', (req, res) => {\n  try {\n    const cfg = JSON.parse(String(req.body.cfg4050 || ''));\n    apply(cfg);\n    res.send('done');\n  } catch (e) {\n    res.status(400).send('Invalid config');\n  }\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization/Eval",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4052,
    "code": "app.get('/find4052', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n4052 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 4053,
    "code": "app.get('/find4052', async (req, res) => {\n  const name = String(req.query.n4052 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4054,
    "code": "const STRIPE_KEY_4054 = \"sk_test_4054_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 4055,
    "code": "const STRIPE_KEY_4054 = process.env.STRIPE_KEY_4054;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4056,
    "code": "app.post('/vote4056', (req, res) => { save(req.body.choice4056); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 4057,
    "code": "app.post('/vote4056', (req, res) => {\n  const c = String(req.body.choice4056 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4058,
    "code": "app.get('/set4058', (req, res) => { res.cookie('sid', 'abc4058'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 4059,
    "code": "app.get('/set4058', (req, res) => { res.cookie('sid', 'abc4058', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4060,
    "code": "app.get('/r4060', (req, res) => {\n  res.redirect(req.query.to4060);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary external URLs can be abused."
  },
  {
    "id": 4061,
    "code": "app.get('/r4060', (req, res) => {\n  const t = String(req.query.to4060 || '');\n  if (!t.startsWith('/')) return res.status(400).send('invalid');\n  res.redirect(t);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4062,
    "code": "app.post('/reg4062', (req, res) => { console.log('new', req.body.email4062, req.body.pass4062); create(req.body); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Avoid logging passwords or secrets."
  },
  {
    "id": 4063,
    "code": "app.post('/reg4062', (req, res) => { console.log('new', req.body.email4062); const copy = {...req.body}; delete copy.pass4062; create(copy); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Logging",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4064,
    "code": "app.get('/set4064', (req, res) => { res.cookie('sid', 'abc4064'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 4065,
    "code": "app.get('/set4064', (req, res) => { res.cookie('sid', 'abc4064', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4066,
    "code": "app.get('/set4066', (req, res) => { res.cookie('sid', 'abc4066'); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies should have secure flags to mitigate theft."
  },
  {
    "id": 4067,
    "code": "app.get('/set4066', (req, res) => { res.cookie('sid', 'abc4066', {httpOnly:true, secure:true, sameSite:'lax'}); res.send('ok'); });",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4068,
    "code": "app.post('/vote4068', (req, res) => { save(req.body.choice4068); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Validate allowed values to avoid invalid state."
  },
  {
    "id": 4069,
    "code": "app.post('/vote4068', (req, res) => {\n  const c = String(req.body.choice4068 || '');\n  if (!['A','B','C'].includes(c)) return res.status(400).send('bad');\n  save(c); res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4070,
    "code": "const STRIPE_KEY_4070 = \"sk_test_4070_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 4071,
    "code": "const STRIPE_KEY_4070 = process.env.STRIPE_KEY_4070;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4072,
    "code": "app.post('/u4072', (req, res) => { req.files.f4072.mv('./uploads/' + req.files.f4072.name); res.send('ok'); });",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Validate uploads by MIME type and sanitize filenames."
  },
  {
    "id": 4073,
    "code": "const pathu4072 = require('path');\napp.post('/u4072', (req, res) => {\n  const f = req.files && req.files.f4072;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send('bad');\n  const name = Date.now() + '-' + pathu4072.basename(f.name);\n  f.mv(pathu4072.join(__dirname,'uploads',name));\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4074,
    "code": "const STRIPE_KEY_4074 = \"sk_test_4074_hardcoded\";",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Hardcoding secrets in source control risks leakage."
  },
  {
    "id": 4075,
    "code": "const STRIPE_KEY_4074 = process.env.STRIPE_KEY_4074;",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4076,
    "code": "app.get('/say4076', (req, res) => {\n  res.send('<p>' + req.query.msg4076 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 4077,
    "code": "const esc4076 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say4076', (req, res) => {\n  res.send('<p>' + esc4076(req.query.msg4076) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4079,
    "code": "router.get('/acct4079', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = \" + req.query.id4079);\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Unescaped user input in SQL query. Use parameterized queries."
  },
  {
    "id": 4080,
    "code": "router.get('/acct4079', (req, res) => {\n  db.query(\"SELECT * FROM accounts WHERE id = ?\", [req.query.id4079]);\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4082,
    "code": "app.get('/find4082', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n4082 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 4083,
    "code": "app.get('/find4082', async (req, res) => {\n  const name = String(req.query.n4082 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4084,
    "code": "app.post('/login4084', async (req, res) => { const ok = await auth(req.body.u4084, req.body.p4084); res.send(ok); });",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force; add per-IP throttling."
  },
  {
    "id": 4085,
    "code": "const attempts4084 = new Map();\napp.post('/login4084', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts4084.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts4084.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send('too many');\n  const ok = await auth(req.body.u4084, req.body.p4084);\n  res.send(ok);\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4086,
    "code": "app.use('/api4086', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing all origins with credentials or sensitive endpoints is insecure."
  },
  {
    "id": 4087,
    "code": "const allowed4086 = new Set(['https://app4086.example.com']);\napp.use('/api4086', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowed4086.has(origin)) res.set('Access-Control-Allow-Origin', origin);\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4088,
    "code": "app.get('/say4088', (req, res) => {\n  res.send('<p>' + req.query.msg4088 + '</p>');\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Reflecting raw input into HTML allows XSS. Escape user content."
  },
  {
    "id": 4089,
    "code": "const esc4088 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/say4088', (req, res) => {\n  res.send('<p>' + esc4088(req.query.msg4088) + '</p>');\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "Secure version of the previous entry."
  },
  {
    "id": 4090,
    "code": "app.get('/find4090', async (req, res) => {\n  const r = await Users.find({ $where: \"this.name == '\" + req.query.n4090 + \"'\" });\n  res.send(r);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user input risks NoSQL injection. Use field queries."
  },
  {
    "id": 4091,
    "code": "app.get('/find4090', async (req, res) => {\n  const name = String(req.query.n4090 || \"\").replace(/[^\\w\\-\\.]/g, \"\");\n  const r = await Users.find({ name });\n  res.send(r);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Secure version of the previous entry."
  }
]