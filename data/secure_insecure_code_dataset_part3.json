[
  {
    "id": 1501,
    "code": "app.get('/user1501', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1501 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1502,
    "code": "app.get('/user1501', async (req, res) => {\n  const u = String(req.query.u1501 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1503,
    "code": "app.post('/zip1503', (req, res) => {\n  const archive = \"archive_1503.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1503;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1504,
    "code": "app.post('/zip1503', (req, res) => {\n  const archive = \"archive_1503.zip\";\n  const dir = String(req.body.dir1503 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1505,
    "code": "app.post('/cfg1505', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1505 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1506,
    "code": "app.post('/cfg1505', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1505 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1507,
    "code": "app.use('/api1507', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1508,
    "code": "const allowedOrigins1507 = new Set([\"https://example1507.com\"]);\napp.use('/api1507', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1507.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1509,
    "code": "app.get('/fetch1509', async (req, res) => {\n  const r = await fetch(req.query.url1509);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1510,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1509', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1509 || \"\"));\n    const allowedHosts = new Set([\"example1509.com\",\"api1509.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1511,
    "code": "app.post('/auth1511', async (req, res) => {\n  const ok = await authUser(req.body.u1511, req.body.p1511);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1512,
    "code": "const attempts1511 = new Map();\napp.post('/auth1511', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1511.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1511.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1511, req.body.p1511);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1513,
    "code": "app.post('/upload1513', (req, res) => {\n  req.files.file1513.mv(\"./uploads/\" + req.files.file1513.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1514,
    "code": "const path_up1513 = require('path');\napp.post('/upload1513', (req, res) => {\n  const f = req.files && req.files.file1513;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1513.basename(f.name);\n  f.mv(path_up1513.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1515,
    "code": "router.get('/acct1515', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1515 WHERE id = \" + req.query.id1515)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1516,
    "code": "router.get('/acct1515', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1515 WHERE id = ?\", [req.query.id1515])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1517,
    "code": "app.get('/hello1517', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1517 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1518,
    "code": "const escapeHtml1517 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1517', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1517(req.query.name1517 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1519,
    "code": "app.get('/read1519', (req, res) => {\n  const p = \"./files/\" + req.query.file1519;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1520,
    "code": "const path1519 = require('path');\napp.get('/read1519', (req, res) => {\n  const base = path1519.join(__dirname, 'files');\n  const safe = path1519.join(base, path1519.basename(String(req.query.file1519 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1521,
    "code": "app.get('/go1521', (req, res) => {\n  res.redirect(req.query.url1521);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1522,
    "code": "app.get('/go1521', (req, res) => {\n  const url = String(req.query.url1521 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1523,
    "code": "const JWT_SECRET_1523 = \"super-secret-1523\";\nfunction sign1523(data){ return \"signed-\" + JWT_SECRET_1523; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1524,
    "code": "const JWT_SECRET_1523 = process.env.JWT_SECRET_1523;\nfunction sign1523(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1525,
    "code": "app.get('/login1525', (req, res) => {\n  res.cookie('sid1525', 'token1525');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1526,
    "code": "app.get('/login1525', (req, res) => {\n  res.cookie('sid1525', 'token1525', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1527,
    "code": "app.post('/vote1527', (req, res) => {\n  const choice = req.body.choice1527;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1528,
    "code": "app.post('/vote1527', (req, res) => {\n  const choice = String(req.body.choice1527 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1529,
    "code": "app.post('/register1529', (req, res) => {\n  console.log(\"New user\", req.body.email1529, req.body.password1529);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1530,
    "code": "app.post('/register1529', (req, res) => {\n  console.log(\"New user\", req.body.email1529);\n  const body = { ...req.body }; delete body.password1529;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1531,
    "code": "app.get('/user1531', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1531 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1532,
    "code": "app.get('/user1531', async (req, res) => {\n  const u = String(req.query.u1531 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1533,
    "code": "app.post('/zip1533', (req, res) => {\n  const archive = \"archive_1533.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1533;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1534,
    "code": "app.post('/zip1533', (req, res) => {\n  const archive = \"archive_1533.zip\";\n  const dir = String(req.body.dir1533 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1535,
    "code": "app.post('/cfg1535', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1535 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1536,
    "code": "app.post('/cfg1535', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1535 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1537,
    "code": "app.use('/api1537', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1538,
    "code": "const allowedOrigins1537 = new Set([\"https://example1537.com\"]);\napp.use('/api1537', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1537.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1539,
    "code": "app.get('/fetch1539', async (req, res) => {\n  const r = await fetch(req.query.url1539);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1540,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1539', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1539 || \"\"));\n    const allowedHosts = new Set([\"example1539.com\",\"api1539.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1541,
    "code": "app.post('/auth1541', async (req, res) => {\n  const ok = await authUser(req.body.u1541, req.body.p1541);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1542,
    "code": "const attempts1541 = new Map();\napp.post('/auth1541', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1541.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1541.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1541, req.body.p1541);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1543,
    "code": "app.post('/upload1543', (req, res) => {\n  req.files.file1543.mv(\"./uploads/\" + req.files.file1543.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1544,
    "code": "const path_up1543 = require('path');\napp.post('/upload1543', (req, res) => {\n  const f = req.files && req.files.file1543;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1543.basename(f.name);\n  f.mv(path_up1543.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1545,
    "code": "router.get('/acct1545', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1545 WHERE id = \" + req.query.id1545)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1546,
    "code": "router.get('/acct1545', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1545 WHERE id = ?\", [req.query.id1545])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1547,
    "code": "app.get('/hello1547', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1547 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1548,
    "code": "const escapeHtml1547 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1547', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1547(req.query.name1547 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1549,
    "code": "app.get('/read1549', (req, res) => {\n  const p = \"./files/\" + req.query.file1549;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1550,
    "code": "const path1549 = require('path');\napp.get('/read1549', (req, res) => {\n  const base = path1549.join(__dirname, 'files');\n  const safe = path1549.join(base, path1549.basename(String(req.query.file1549 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1551,
    "code": "app.get('/go1551', (req, res) => {\n  res.redirect(req.query.url1551);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1552,
    "code": "app.get('/go1551', (req, res) => {\n  const url = String(req.query.url1551 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1553,
    "code": "const JWT_SECRET_1553 = \"super-secret-1553\";\nfunction sign1553(data){ return \"signed-\" + JWT_SECRET_1553; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1554,
    "code": "const JWT_SECRET_1553 = process.env.JWT_SECRET_1553;\nfunction sign1553(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1555,
    "code": "app.get('/login1555', (req, res) => {\n  res.cookie('sid1555', 'token1555');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1556,
    "code": "app.get('/login1555', (req, res) => {\n  res.cookie('sid1555', 'token1555', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1557,
    "code": "app.post('/vote1557', (req, res) => {\n  const choice = req.body.choice1557;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1558,
    "code": "app.post('/vote1557', (req, res) => {\n  const choice = String(req.body.choice1557 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1559,
    "code": "app.post('/register1559', (req, res) => {\n  console.log(\"New user\", req.body.email1559, req.body.password1559);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1560,
    "code": "app.post('/register1559', (req, res) => {\n  console.log(\"New user\", req.body.email1559);\n  const body = { ...req.body }; delete body.password1559;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1561,
    "code": "app.get('/user1561', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1561 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1562,
    "code": "app.get('/user1561', async (req, res) => {\n  const u = String(req.query.u1561 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1563,
    "code": "app.post('/zip1563', (req, res) => {\n  const archive = \"archive_1563.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1563;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1564,
    "code": "app.post('/zip1563', (req, res) => {\n  const archive = \"archive_1563.zip\";\n  const dir = String(req.body.dir1563 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1565,
    "code": "app.post('/cfg1565', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1565 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1566,
    "code": "app.post('/cfg1565', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1565 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1567,
    "code": "app.use('/api1567', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1568,
    "code": "const allowedOrigins1567 = new Set([\"https://example1567.com\"]);\napp.use('/api1567', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1567.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1569,
    "code": "app.get('/fetch1569', async (req, res) => {\n  const r = await fetch(req.query.url1569);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1570,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1569', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1569 || \"\"));\n    const allowedHosts = new Set([\"example1569.com\",\"api1569.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1571,
    "code": "app.post('/auth1571', async (req, res) => {\n  const ok = await authUser(req.body.u1571, req.body.p1571);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1572,
    "code": "const attempts1571 = new Map();\napp.post('/auth1571', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1571.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1571.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1571, req.body.p1571);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1573,
    "code": "app.post('/upload1573', (req, res) => {\n  req.files.file1573.mv(\"./uploads/\" + req.files.file1573.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1574,
    "code": "const path_up1573 = require('path');\napp.post('/upload1573', (req, res) => {\n  const f = req.files && req.files.file1573;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1573.basename(f.name);\n  f.mv(path_up1573.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1575,
    "code": "router.get('/acct1575', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1575 WHERE id = \" + req.query.id1575)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1576,
    "code": "router.get('/acct1575', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1575 WHERE id = ?\", [req.query.id1575])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1577,
    "code": "app.get('/hello1577', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1577 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1578,
    "code": "const escapeHtml1577 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1577', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1577(req.query.name1577 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1579,
    "code": "app.get('/read1579', (req, res) => {\n  const p = \"./files/\" + req.query.file1579;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1580,
    "code": "const path1579 = require('path');\napp.get('/read1579', (req, res) => {\n  const base = path1579.join(__dirname, 'files');\n  const safe = path1579.join(base, path1579.basename(String(req.query.file1579 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1581,
    "code": "app.get('/go1581', (req, res) => {\n  res.redirect(req.query.url1581);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1582,
    "code": "app.get('/go1581', (req, res) => {\n  const url = String(req.query.url1581 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1583,
    "code": "const JWT_SECRET_1583 = \"super-secret-1583\";\nfunction sign1583(data){ return \"signed-\" + JWT_SECRET_1583; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1584,
    "code": "const JWT_SECRET_1583 = process.env.JWT_SECRET_1583;\nfunction sign1583(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1585,
    "code": "app.get('/login1585', (req, res) => {\n  res.cookie('sid1585', 'token1585');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1586,
    "code": "app.get('/login1585', (req, res) => {\n  res.cookie('sid1585', 'token1585', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1587,
    "code": "app.post('/vote1587', (req, res) => {\n  const choice = req.body.choice1587;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1588,
    "code": "app.post('/vote1587', (req, res) => {\n  const choice = String(req.body.choice1587 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1589,
    "code": "app.post('/register1589', (req, res) => {\n  console.log(\"New user\", req.body.email1589, req.body.password1589);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1590,
    "code": "app.post('/register1589', (req, res) => {\n  console.log(\"New user\", req.body.email1589);\n  const body = { ...req.body }; delete body.password1589;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1591,
    "code": "app.get('/user1591', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1591 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1592,
    "code": "app.get('/user1591', async (req, res) => {\n  const u = String(req.query.u1591 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1593,
    "code": "app.post('/zip1593', (req, res) => {\n  const archive = \"archive_1593.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1593;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1594,
    "code": "app.post('/zip1593', (req, res) => {\n  const archive = \"archive_1593.zip\";\n  const dir = String(req.body.dir1593 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1595,
    "code": "app.post('/cfg1595', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1595 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1596,
    "code": "app.post('/cfg1595', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1595 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1597,
    "code": "app.use('/api1597', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1598,
    "code": "const allowedOrigins1597 = new Set([\"https://example1597.com\"]);\napp.use('/api1597', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1597.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1599,
    "code": "app.get('/fetch1599', async (req, res) => {\n  const r = await fetch(req.query.url1599);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1600,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1599', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1599 || \"\"));\n    const allowedHosts = new Set([\"example1599.com\",\"api1599.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1601,
    "code": "app.post('/auth1601', async (req, res) => {\n  const ok = await authUser(req.body.u1601, req.body.p1601);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1602,
    "code": "const attempts1601 = new Map();\napp.post('/auth1601', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1601.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1601.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1601, req.body.p1601);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1603,
    "code": "app.post('/upload1603', (req, res) => {\n  req.files.file1603.mv(\"./uploads/\" + req.files.file1603.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1604,
    "code": "const path_up1603 = require('path');\napp.post('/upload1603', (req, res) => {\n  const f = req.files && req.files.file1603;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1603.basename(f.name);\n  f.mv(path_up1603.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1605,
    "code": "router.get('/acct1605', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1605 WHERE id = \" + req.query.id1605)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1606,
    "code": "router.get('/acct1605', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1605 WHERE id = ?\", [req.query.id1605])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1607,
    "code": "app.get('/hello1607', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1607 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1608,
    "code": "const escapeHtml1607 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1607', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1607(req.query.name1607 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1609,
    "code": "app.get('/read1609', (req, res) => {\n  const p = \"./files/\" + req.query.file1609;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1610,
    "code": "const path1609 = require('path');\napp.get('/read1609', (req, res) => {\n  const base = path1609.join(__dirname, 'files');\n  const safe = path1609.join(base, path1609.basename(String(req.query.file1609 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1611,
    "code": "app.get('/go1611', (req, res) => {\n  res.redirect(req.query.url1611);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1612,
    "code": "app.get('/go1611', (req, res) => {\n  const url = String(req.query.url1611 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1613,
    "code": "const JWT_SECRET_1613 = \"super-secret-1613\";\nfunction sign1613(data){ return \"signed-\" + JWT_SECRET_1613; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1614,
    "code": "const JWT_SECRET_1613 = process.env.JWT_SECRET_1613;\nfunction sign1613(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1615,
    "code": "app.get('/login1615', (req, res) => {\n  res.cookie('sid1615', 'token1615');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1616,
    "code": "app.get('/login1615', (req, res) => {\n  res.cookie('sid1615', 'token1615', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1617,
    "code": "app.post('/vote1617', (req, res) => {\n  const choice = req.body.choice1617;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1618,
    "code": "app.post('/vote1617', (req, res) => {\n  const choice = String(req.body.choice1617 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1619,
    "code": "app.post('/register1619', (req, res) => {\n  console.log(\"New user\", req.body.email1619, req.body.password1619);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1620,
    "code": "app.post('/register1619', (req, res) => {\n  console.log(\"New user\", req.body.email1619);\n  const body = { ...req.body }; delete body.password1619;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1621,
    "code": "app.get('/user1621', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1621 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1622,
    "code": "app.get('/user1621', async (req, res) => {\n  const u = String(req.query.u1621 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1623,
    "code": "app.post('/zip1623', (req, res) => {\n  const archive = \"archive_1623.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1623;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1624,
    "code": "app.post('/zip1623', (req, res) => {\n  const archive = \"archive_1623.zip\";\n  const dir = String(req.body.dir1623 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1625,
    "code": "app.post('/cfg1625', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1625 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1626,
    "code": "app.post('/cfg1625', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1625 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1627,
    "code": "app.use('/api1627', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1628,
    "code": "const allowedOrigins1627 = new Set([\"https://example1627.com\"]);\napp.use('/api1627', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1627.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1629,
    "code": "app.get('/fetch1629', async (req, res) => {\n  const r = await fetch(req.query.url1629);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1630,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1629', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1629 || \"\"));\n    const allowedHosts = new Set([\"example1629.com\",\"api1629.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1631,
    "code": "app.post('/auth1631', async (req, res) => {\n  const ok = await authUser(req.body.u1631, req.body.p1631);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1632,
    "code": "const attempts1631 = new Map();\napp.post('/auth1631', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1631.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1631.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1631, req.body.p1631);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1633,
    "code": "app.post('/upload1633', (req, res) => {\n  req.files.file1633.mv(\"./uploads/\" + req.files.file1633.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1634,
    "code": "const path_up1633 = require('path');\napp.post('/upload1633', (req, res) => {\n  const f = req.files && req.files.file1633;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1633.basename(f.name);\n  f.mv(path_up1633.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1635,
    "code": "router.get('/acct1635', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1635 WHERE id = \" + req.query.id1635)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1636,
    "code": "router.get('/acct1635', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1635 WHERE id = ?\", [req.query.id1635])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1637,
    "code": "app.get('/hello1637', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1637 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1638,
    "code": "const escapeHtml1637 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1637', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1637(req.query.name1637 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1639,
    "code": "app.get('/read1639', (req, res) => {\n  const p = \"./files/\" + req.query.file1639;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1640,
    "code": "const path1639 = require('path');\napp.get('/read1639', (req, res) => {\n  const base = path1639.join(__dirname, 'files');\n  const safe = path1639.join(base, path1639.basename(String(req.query.file1639 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1641,
    "code": "app.get('/go1641', (req, res) => {\n  res.redirect(req.query.url1641);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1642,
    "code": "app.get('/go1641', (req, res) => {\n  const url = String(req.query.url1641 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1643,
    "code": "const JWT_SECRET_1643 = \"super-secret-1643\";\nfunction sign1643(data){ return \"signed-\" + JWT_SECRET_1643; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1644,
    "code": "const JWT_SECRET_1643 = process.env.JWT_SECRET_1643;\nfunction sign1643(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1645,
    "code": "app.get('/login1645', (req, res) => {\n  res.cookie('sid1645', 'token1645');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1646,
    "code": "app.get('/login1645', (req, res) => {\n  res.cookie('sid1645', 'token1645', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1647,
    "code": "app.post('/vote1647', (req, res) => {\n  const choice = req.body.choice1647;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1648,
    "code": "app.post('/vote1647', (req, res) => {\n  const choice = String(req.body.choice1647 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1649,
    "code": "app.post('/register1649', (req, res) => {\n  console.log(\"New user\", req.body.email1649, req.body.password1649);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1650,
    "code": "app.post('/register1649', (req, res) => {\n  console.log(\"New user\", req.body.email1649);\n  const body = { ...req.body }; delete body.password1649;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1651,
    "code": "app.get('/user1651', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1651 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1652,
    "code": "app.get('/user1651', async (req, res) => {\n  const u = String(req.query.u1651 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1653,
    "code": "app.post('/zip1653', (req, res) => {\n  const archive = \"archive_1653.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1653;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1654,
    "code": "app.post('/zip1653', (req, res) => {\n  const archive = \"archive_1653.zip\";\n  const dir = String(req.body.dir1653 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1655,
    "code": "app.post('/cfg1655', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1655 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1656,
    "code": "app.post('/cfg1655', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1655 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1657,
    "code": "app.use('/api1657', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1658,
    "code": "const allowedOrigins1657 = new Set([\"https://example1657.com\"]);\napp.use('/api1657', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1657.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1659,
    "code": "app.get('/fetch1659', async (req, res) => {\n  const r = await fetch(req.query.url1659);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1660,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1659', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1659 || \"\"));\n    const allowedHosts = new Set([\"example1659.com\",\"api1659.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1661,
    "code": "app.post('/auth1661', async (req, res) => {\n  const ok = await authUser(req.body.u1661, req.body.p1661);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1662,
    "code": "const attempts1661 = new Map();\napp.post('/auth1661', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1661.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1661.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1661, req.body.p1661);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1663,
    "code": "app.post('/upload1663', (req, res) => {\n  req.files.file1663.mv(\"./uploads/\" + req.files.file1663.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1664,
    "code": "const path_up1663 = require('path');\napp.post('/upload1663', (req, res) => {\n  const f = req.files && req.files.file1663;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1663.basename(f.name);\n  f.mv(path_up1663.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1665,
    "code": "router.get('/acct1665', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1665 WHERE id = \" + req.query.id1665)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1666,
    "code": "router.get('/acct1665', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1665 WHERE id = ?\", [req.query.id1665])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1667,
    "code": "app.get('/hello1667', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1667 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1668,
    "code": "const escapeHtml1667 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1667', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1667(req.query.name1667 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1669,
    "code": "app.get('/read1669', (req, res) => {\n  const p = \"./files/\" + req.query.file1669;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1670,
    "code": "const path1669 = require('path');\napp.get('/read1669', (req, res) => {\n  const base = path1669.join(__dirname, 'files');\n  const safe = path1669.join(base, path1669.basename(String(req.query.file1669 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1671,
    "code": "app.get('/go1671', (req, res) => {\n  res.redirect(req.query.url1671);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1672,
    "code": "app.get('/go1671', (req, res) => {\n  const url = String(req.query.url1671 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1673,
    "code": "const JWT_SECRET_1673 = \"super-secret-1673\";\nfunction sign1673(data){ return \"signed-\" + JWT_SECRET_1673; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1674,
    "code": "const JWT_SECRET_1673 = process.env.JWT_SECRET_1673;\nfunction sign1673(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1675,
    "code": "app.get('/login1675', (req, res) => {\n  res.cookie('sid1675', 'token1675');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1676,
    "code": "app.get('/login1675', (req, res) => {\n  res.cookie('sid1675', 'token1675', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1677,
    "code": "app.post('/vote1677', (req, res) => {\n  const choice = req.body.choice1677;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1678,
    "code": "app.post('/vote1677', (req, res) => {\n  const choice = String(req.body.choice1677 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1679,
    "code": "app.post('/register1679', (req, res) => {\n  console.log(\"New user\", req.body.email1679, req.body.password1679);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1680,
    "code": "app.post('/register1679', (req, res) => {\n  console.log(\"New user\", req.body.email1679);\n  const body = { ...req.body }; delete body.password1679;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1681,
    "code": "app.get('/user1681', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1681 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1682,
    "code": "app.get('/user1681', async (req, res) => {\n  const u = String(req.query.u1681 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1683,
    "code": "app.post('/zip1683', (req, res) => {\n  const archive = \"archive_1683.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1683;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1684,
    "code": "app.post('/zip1683', (req, res) => {\n  const archive = \"archive_1683.zip\";\n  const dir = String(req.body.dir1683 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1685,
    "code": "app.post('/cfg1685', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1685 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1686,
    "code": "app.post('/cfg1685', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1685 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1687,
    "code": "app.use('/api1687', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1688,
    "code": "const allowedOrigins1687 = new Set([\"https://example1687.com\"]);\napp.use('/api1687', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1687.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1689,
    "code": "app.get('/fetch1689', async (req, res) => {\n  const r = await fetch(req.query.url1689);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1690,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1689', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1689 || \"\"));\n    const allowedHosts = new Set([\"example1689.com\",\"api1689.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1691,
    "code": "app.post('/auth1691', async (req, res) => {\n  const ok = await authUser(req.body.u1691, req.body.p1691);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1692,
    "code": "const attempts1691 = new Map();\napp.post('/auth1691', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1691.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1691.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1691, req.body.p1691);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1693,
    "code": "app.post('/upload1693', (req, res) => {\n  req.files.file1693.mv(\"./uploads/\" + req.files.file1693.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1694,
    "code": "const path_up1693 = require('path');\napp.post('/upload1693', (req, res) => {\n  const f = req.files && req.files.file1693;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1693.basename(f.name);\n  f.mv(path_up1693.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1695,
    "code": "router.get('/acct1695', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1695 WHERE id = \" + req.query.id1695)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1696,
    "code": "router.get('/acct1695', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1695 WHERE id = ?\", [req.query.id1695])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1697,
    "code": "app.get('/hello1697', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1697 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1698,
    "code": "const escapeHtml1697 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1697', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1697(req.query.name1697 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1699,
    "code": "app.get('/read1699', (req, res) => {\n  const p = \"./files/\" + req.query.file1699;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1700,
    "code": "const path1699 = require('path');\napp.get('/read1699', (req, res) => {\n  const base = path1699.join(__dirname, 'files');\n  const safe = path1699.join(base, path1699.basename(String(req.query.file1699 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1701,
    "code": "app.get('/go1701', (req, res) => {\n  res.redirect(req.query.url1701);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1702,
    "code": "app.get('/go1701', (req, res) => {\n  const url = String(req.query.url1701 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1703,
    "code": "const JWT_SECRET_1703 = \"super-secret-1703\";\nfunction sign1703(data){ return \"signed-\" + JWT_SECRET_1703; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1704,
    "code": "const JWT_SECRET_1703 = process.env.JWT_SECRET_1703;\nfunction sign1703(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1705,
    "code": "app.get('/login1705', (req, res) => {\n  res.cookie('sid1705', 'token1705');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1706,
    "code": "app.get('/login1705', (req, res) => {\n  res.cookie('sid1705', 'token1705', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1707,
    "code": "app.post('/vote1707', (req, res) => {\n  const choice = req.body.choice1707;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1708,
    "code": "app.post('/vote1707', (req, res) => {\n  const choice = String(req.body.choice1707 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1709,
    "code": "app.post('/register1709', (req, res) => {\n  console.log(\"New user\", req.body.email1709, req.body.password1709);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1710,
    "code": "app.post('/register1709', (req, res) => {\n  console.log(\"New user\", req.body.email1709);\n  const body = { ...req.body }; delete body.password1709;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1711,
    "code": "app.get('/user1711', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1711 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1712,
    "code": "app.get('/user1711', async (req, res) => {\n  const u = String(req.query.u1711 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1713,
    "code": "app.post('/zip1713', (req, res) => {\n  const archive = \"archive_1713.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1713;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1714,
    "code": "app.post('/zip1713', (req, res) => {\n  const archive = \"archive_1713.zip\";\n  const dir = String(req.body.dir1713 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1715,
    "code": "app.post('/cfg1715', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1715 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1716,
    "code": "app.post('/cfg1715', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1715 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1717,
    "code": "app.use('/api1717', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1718,
    "code": "const allowedOrigins1717 = new Set([\"https://example1717.com\"]);\napp.use('/api1717', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1717.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1719,
    "code": "app.get('/fetch1719', async (req, res) => {\n  const r = await fetch(req.query.url1719);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1720,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1719', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1719 || \"\"));\n    const allowedHosts = new Set([\"example1719.com\",\"api1719.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1721,
    "code": "app.post('/auth1721', async (req, res) => {\n  const ok = await authUser(req.body.u1721, req.body.p1721);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1722,
    "code": "const attempts1721 = new Map();\napp.post('/auth1721', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1721.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1721.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1721, req.body.p1721);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1723,
    "code": "app.post('/upload1723', (req, res) => {\n  req.files.file1723.mv(\"./uploads/\" + req.files.file1723.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1724,
    "code": "const path_up1723 = require('path');\napp.post('/upload1723', (req, res) => {\n  const f = req.files && req.files.file1723;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1723.basename(f.name);\n  f.mv(path_up1723.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1725,
    "code": "router.get('/acct1725', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1725 WHERE id = \" + req.query.id1725)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1726,
    "code": "router.get('/acct1725', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1725 WHERE id = ?\", [req.query.id1725])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1727,
    "code": "app.get('/hello1727', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1727 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1728,
    "code": "const escapeHtml1727 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1727', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1727(req.query.name1727 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1729,
    "code": "app.get('/read1729', (req, res) => {\n  const p = \"./files/\" + req.query.file1729;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1730,
    "code": "const path1729 = require('path');\napp.get('/read1729', (req, res) => {\n  const base = path1729.join(__dirname, 'files');\n  const safe = path1729.join(base, path1729.basename(String(req.query.file1729 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1731,
    "code": "app.get('/go1731', (req, res) => {\n  res.redirect(req.query.url1731);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1732,
    "code": "app.get('/go1731', (req, res) => {\n  const url = String(req.query.url1731 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1733,
    "code": "const JWT_SECRET_1733 = \"super-secret-1733\";\nfunction sign1733(data){ return \"signed-\" + JWT_SECRET_1733; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1734,
    "code": "const JWT_SECRET_1733 = process.env.JWT_SECRET_1733;\nfunction sign1733(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1735,
    "code": "app.get('/login1735', (req, res) => {\n  res.cookie('sid1735', 'token1735');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1736,
    "code": "app.get('/login1735', (req, res) => {\n  res.cookie('sid1735', 'token1735', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1737,
    "code": "app.post('/vote1737', (req, res) => {\n  const choice = req.body.choice1737;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1738,
    "code": "app.post('/vote1737', (req, res) => {\n  const choice = String(req.body.choice1737 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1739,
    "code": "app.post('/register1739', (req, res) => {\n  console.log(\"New user\", req.body.email1739, req.body.password1739);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1740,
    "code": "app.post('/register1739', (req, res) => {\n  console.log(\"New user\", req.body.email1739);\n  const body = { ...req.body }; delete body.password1739;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1741,
    "code": "app.get('/user1741', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1741 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1742,
    "code": "app.get('/user1741', async (req, res) => {\n  const u = String(req.query.u1741 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1743,
    "code": "app.post('/zip1743', (req, res) => {\n  const archive = \"archive_1743.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1743;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1744,
    "code": "app.post('/zip1743', (req, res) => {\n  const archive = \"archive_1743.zip\";\n  const dir = String(req.body.dir1743 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1745,
    "code": "app.post('/cfg1745', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1745 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1746,
    "code": "app.post('/cfg1745', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1745 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1747,
    "code": "app.use('/api1747', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1748,
    "code": "const allowedOrigins1747 = new Set([\"https://example1747.com\"]);\napp.use('/api1747', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1747.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1749,
    "code": "app.get('/fetch1749', async (req, res) => {\n  const r = await fetch(req.query.url1749);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1750,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1749', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1749 || \"\"));\n    const allowedHosts = new Set([\"example1749.com\",\"api1749.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1751,
    "code": "app.post('/auth1751', async (req, res) => {\n  const ok = await authUser(req.body.u1751, req.body.p1751);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1752,
    "code": "const attempts1751 = new Map();\napp.post('/auth1751', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1751.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1751.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1751, req.body.p1751);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1753,
    "code": "app.post('/upload1753', (req, res) => {\n  req.files.file1753.mv(\"./uploads/\" + req.files.file1753.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1754,
    "code": "const path_up1753 = require('path');\napp.post('/upload1753', (req, res) => {\n  const f = req.files && req.files.file1753;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1753.basename(f.name);\n  f.mv(path_up1753.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1755,
    "code": "router.get('/acct1755', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1755 WHERE id = \" + req.query.id1755)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1756,
    "code": "router.get('/acct1755', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1755 WHERE id = ?\", [req.query.id1755])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1757,
    "code": "app.get('/hello1757', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1757 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1758,
    "code": "const escapeHtml1757 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1757', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1757(req.query.name1757 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1759,
    "code": "app.get('/read1759', (req, res) => {\n  const p = \"./files/\" + req.query.file1759;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1760,
    "code": "const path1759 = require('path');\napp.get('/read1759', (req, res) => {\n  const base = path1759.join(__dirname, 'files');\n  const safe = path1759.join(base, path1759.basename(String(req.query.file1759 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1761,
    "code": "app.get('/go1761', (req, res) => {\n  res.redirect(req.query.url1761);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1762,
    "code": "app.get('/go1761', (req, res) => {\n  const url = String(req.query.url1761 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1763,
    "code": "const JWT_SECRET_1763 = \"super-secret-1763\";\nfunction sign1763(data){ return \"signed-\" + JWT_SECRET_1763; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1764,
    "code": "const JWT_SECRET_1763 = process.env.JWT_SECRET_1763;\nfunction sign1763(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1765,
    "code": "app.get('/login1765', (req, res) => {\n  res.cookie('sid1765', 'token1765');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1766,
    "code": "app.get('/login1765', (req, res) => {\n  res.cookie('sid1765', 'token1765', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1767,
    "code": "app.post('/vote1767', (req, res) => {\n  const choice = req.body.choice1767;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1768,
    "code": "app.post('/vote1767', (req, res) => {\n  const choice = String(req.body.choice1767 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1769,
    "code": "app.post('/register1769', (req, res) => {\n  console.log(\"New user\", req.body.email1769, req.body.password1769);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1770,
    "code": "app.post('/register1769', (req, res) => {\n  console.log(\"New user\", req.body.email1769);\n  const body = { ...req.body }; delete body.password1769;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1771,
    "code": "app.get('/user1771', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1771 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1772,
    "code": "app.get('/user1771', async (req, res) => {\n  const u = String(req.query.u1771 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1773,
    "code": "app.post('/zip1773', (req, res) => {\n  const archive = \"archive_1773.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1773;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1774,
    "code": "app.post('/zip1773', (req, res) => {\n  const archive = \"archive_1773.zip\";\n  const dir = String(req.body.dir1773 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1775,
    "code": "app.post('/cfg1775', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1775 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1776,
    "code": "app.post('/cfg1775', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1775 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1777,
    "code": "app.use('/api1777', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1778,
    "code": "const allowedOrigins1777 = new Set([\"https://example1777.com\"]);\napp.use('/api1777', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1777.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1779,
    "code": "app.get('/fetch1779', async (req, res) => {\n  const r = await fetch(req.query.url1779);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1780,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1779', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1779 || \"\"));\n    const allowedHosts = new Set([\"example1779.com\",\"api1779.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1781,
    "code": "app.post('/auth1781', async (req, res) => {\n  const ok = await authUser(req.body.u1781, req.body.p1781);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1782,
    "code": "const attempts1781 = new Map();\napp.post('/auth1781', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1781.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1781.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1781, req.body.p1781);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1783,
    "code": "app.post('/upload1783', (req, res) => {\n  req.files.file1783.mv(\"./uploads/\" + req.files.file1783.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1784,
    "code": "const path_up1783 = require('path');\napp.post('/upload1783', (req, res) => {\n  const f = req.files && req.files.file1783;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1783.basename(f.name);\n  f.mv(path_up1783.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1785,
    "code": "router.get('/acct1785', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1785 WHERE id = \" + req.query.id1785)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1786,
    "code": "router.get('/acct1785', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1785 WHERE id = ?\", [req.query.id1785])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1787,
    "code": "app.get('/hello1787', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1787 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1788,
    "code": "const escapeHtml1787 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1787', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1787(req.query.name1787 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1789,
    "code": "app.get('/read1789', (req, res) => {\n  const p = \"./files/\" + req.query.file1789;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1790,
    "code": "const path1789 = require('path');\napp.get('/read1789', (req, res) => {\n  const base = path1789.join(__dirname, 'files');\n  const safe = path1789.join(base, path1789.basename(String(req.query.file1789 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1791,
    "code": "app.get('/go1791', (req, res) => {\n  res.redirect(req.query.url1791);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1792,
    "code": "app.get('/go1791', (req, res) => {\n  const url = String(req.query.url1791 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1793,
    "code": "const JWT_SECRET_1793 = \"super-secret-1793\";\nfunction sign1793(data){ return \"signed-\" + JWT_SECRET_1793; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1794,
    "code": "const JWT_SECRET_1793 = process.env.JWT_SECRET_1793;\nfunction sign1793(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1795,
    "code": "app.get('/login1795', (req, res) => {\n  res.cookie('sid1795', 'token1795');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1796,
    "code": "app.get('/login1795', (req, res) => {\n  res.cookie('sid1795', 'token1795', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1797,
    "code": "app.post('/vote1797', (req, res) => {\n  const choice = req.body.choice1797;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1798,
    "code": "app.post('/vote1797', (req, res) => {\n  const choice = String(req.body.choice1797 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1799,
    "code": "app.post('/register1799', (req, res) => {\n  console.log(\"New user\", req.body.email1799, req.body.password1799);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1800,
    "code": "app.post('/register1799', (req, res) => {\n  console.log(\"New user\", req.body.email1799);\n  const body = { ...req.body }; delete body.password1799;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1801,
    "code": "app.get('/user1801', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1801 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1802,
    "code": "app.get('/user1801', async (req, res) => {\n  const u = String(req.query.u1801 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1803,
    "code": "app.post('/zip1803', (req, res) => {\n  const archive = \"archive_1803.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1803;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1804,
    "code": "app.post('/zip1803', (req, res) => {\n  const archive = \"archive_1803.zip\";\n  const dir = String(req.body.dir1803 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1805,
    "code": "app.post('/cfg1805', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1805 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1806,
    "code": "app.post('/cfg1805', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1805 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1807,
    "code": "app.use('/api1807', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1808,
    "code": "const allowedOrigins1807 = new Set([\"https://example1807.com\"]);\napp.use('/api1807', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1807.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1809,
    "code": "app.get('/fetch1809', async (req, res) => {\n  const r = await fetch(req.query.url1809);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1810,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1809', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1809 || \"\"));\n    const allowedHosts = new Set([\"example1809.com\",\"api1809.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1811,
    "code": "app.post('/auth1811', async (req, res) => {\n  const ok = await authUser(req.body.u1811, req.body.p1811);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1812,
    "code": "const attempts1811 = new Map();\napp.post('/auth1811', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1811.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1811.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1811, req.body.p1811);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1813,
    "code": "app.post('/upload1813', (req, res) => {\n  req.files.file1813.mv(\"./uploads/\" + req.files.file1813.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1814,
    "code": "const path_up1813 = require('path');\napp.post('/upload1813', (req, res) => {\n  const f = req.files && req.files.file1813;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1813.basename(f.name);\n  f.mv(path_up1813.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1815,
    "code": "router.get('/acct1815', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1815 WHERE id = \" + req.query.id1815)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1816,
    "code": "router.get('/acct1815', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1815 WHERE id = ?\", [req.query.id1815])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1817,
    "code": "app.get('/hello1817', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1817 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1818,
    "code": "const escapeHtml1817 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1817', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1817(req.query.name1817 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1819,
    "code": "app.get('/read1819', (req, res) => {\n  const p = \"./files/\" + req.query.file1819;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1820,
    "code": "const path1819 = require('path');\napp.get('/read1819', (req, res) => {\n  const base = path1819.join(__dirname, 'files');\n  const safe = path1819.join(base, path1819.basename(String(req.query.file1819 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1821,
    "code": "app.get('/go1821', (req, res) => {\n  res.redirect(req.query.url1821);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1822,
    "code": "app.get('/go1821', (req, res) => {\n  const url = String(req.query.url1821 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1823,
    "code": "const JWT_SECRET_1823 = \"super-secret-1823\";\nfunction sign1823(data){ return \"signed-\" + JWT_SECRET_1823; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1824,
    "code": "const JWT_SECRET_1823 = process.env.JWT_SECRET_1823;\nfunction sign1823(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1825,
    "code": "app.get('/login1825', (req, res) => {\n  res.cookie('sid1825', 'token1825');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1826,
    "code": "app.get('/login1825', (req, res) => {\n  res.cookie('sid1825', 'token1825', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1827,
    "code": "app.post('/vote1827', (req, res) => {\n  const choice = req.body.choice1827;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1828,
    "code": "app.post('/vote1827', (req, res) => {\n  const choice = String(req.body.choice1827 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1829,
    "code": "app.post('/register1829', (req, res) => {\n  console.log(\"New user\", req.body.email1829, req.body.password1829);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1830,
    "code": "app.post('/register1829', (req, res) => {\n  console.log(\"New user\", req.body.email1829);\n  const body = { ...req.body }; delete body.password1829;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1831,
    "code": "app.get('/user1831', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1831 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1832,
    "code": "app.get('/user1831', async (req, res) => {\n  const u = String(req.query.u1831 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1833,
    "code": "app.post('/zip1833', (req, res) => {\n  const archive = \"archive_1833.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1833;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1834,
    "code": "app.post('/zip1833', (req, res) => {\n  const archive = \"archive_1833.zip\";\n  const dir = String(req.body.dir1833 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1835,
    "code": "app.post('/cfg1835', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1835 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1836,
    "code": "app.post('/cfg1835', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1835 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1837,
    "code": "app.use('/api1837', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1838,
    "code": "const allowedOrigins1837 = new Set([\"https://example1837.com\"]);\napp.use('/api1837', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1837.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1839,
    "code": "app.get('/fetch1839', async (req, res) => {\n  const r = await fetch(req.query.url1839);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1840,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1839', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1839 || \"\"));\n    const allowedHosts = new Set([\"example1839.com\",\"api1839.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1841,
    "code": "app.post('/auth1841', async (req, res) => {\n  const ok = await authUser(req.body.u1841, req.body.p1841);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1842,
    "code": "const attempts1841 = new Map();\napp.post('/auth1841', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1841.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1841.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1841, req.body.p1841);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1843,
    "code": "app.post('/upload1843', (req, res) => {\n  req.files.file1843.mv(\"./uploads/\" + req.files.file1843.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1844,
    "code": "const path_up1843 = require('path');\napp.post('/upload1843', (req, res) => {\n  const f = req.files && req.files.file1843;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1843.basename(f.name);\n  f.mv(path_up1843.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1845,
    "code": "router.get('/acct1845', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1845 WHERE id = \" + req.query.id1845)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1846,
    "code": "router.get('/acct1845', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1845 WHERE id = ?\", [req.query.id1845])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1847,
    "code": "app.get('/hello1847', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1847 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1848,
    "code": "const escapeHtml1847 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1847', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1847(req.query.name1847 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1849,
    "code": "app.get('/read1849', (req, res) => {\n  const p = \"./files/\" + req.query.file1849;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1850,
    "code": "const path1849 = require('path');\napp.get('/read1849', (req, res) => {\n  const base = path1849.join(__dirname, 'files');\n  const safe = path1849.join(base, path1849.basename(String(req.query.file1849 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1851,
    "code": "app.get('/go1851', (req, res) => {\n  res.redirect(req.query.url1851);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1852,
    "code": "app.get('/go1851', (req, res) => {\n  const url = String(req.query.url1851 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1853,
    "code": "const JWT_SECRET_1853 = \"super-secret-1853\";\nfunction sign1853(data){ return \"signed-\" + JWT_SECRET_1853; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1854,
    "code": "const JWT_SECRET_1853 = process.env.JWT_SECRET_1853;\nfunction sign1853(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1855,
    "code": "app.get('/login1855', (req, res) => {\n  res.cookie('sid1855', 'token1855');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1856,
    "code": "app.get('/login1855', (req, res) => {\n  res.cookie('sid1855', 'token1855', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1857,
    "code": "app.post('/vote1857', (req, res) => {\n  const choice = req.body.choice1857;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1858,
    "code": "app.post('/vote1857', (req, res) => {\n  const choice = String(req.body.choice1857 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1859,
    "code": "app.post('/register1859', (req, res) => {\n  console.log(\"New user\", req.body.email1859, req.body.password1859);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1860,
    "code": "app.post('/register1859', (req, res) => {\n  console.log(\"New user\", req.body.email1859);\n  const body = { ...req.body }; delete body.password1859;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1861,
    "code": "app.get('/user1861', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1861 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1862,
    "code": "app.get('/user1861', async (req, res) => {\n  const u = String(req.query.u1861 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1863,
    "code": "app.post('/zip1863', (req, res) => {\n  const archive = \"archive_1863.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1863;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1864,
    "code": "app.post('/zip1863', (req, res) => {\n  const archive = \"archive_1863.zip\";\n  const dir = String(req.body.dir1863 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1865,
    "code": "app.post('/cfg1865', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1865 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1866,
    "code": "app.post('/cfg1865', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1865 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1867,
    "code": "app.use('/api1867', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1868,
    "code": "const allowedOrigins1867 = new Set([\"https://example1867.com\"]);\napp.use('/api1867', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1867.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1869,
    "code": "app.get('/fetch1869', async (req, res) => {\n  const r = await fetch(req.query.url1869);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1870,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1869', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1869 || \"\"));\n    const allowedHosts = new Set([\"example1869.com\",\"api1869.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1871,
    "code": "app.post('/auth1871', async (req, res) => {\n  const ok = await authUser(req.body.u1871, req.body.p1871);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1872,
    "code": "const attempts1871 = new Map();\napp.post('/auth1871', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1871.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1871.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1871, req.body.p1871);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1873,
    "code": "app.post('/upload1873', (req, res) => {\n  req.files.file1873.mv(\"./uploads/\" + req.files.file1873.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1874,
    "code": "const path_up1873 = require('path');\napp.post('/upload1873', (req, res) => {\n  const f = req.files && req.files.file1873;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1873.basename(f.name);\n  f.mv(path_up1873.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1875,
    "code": "router.get('/acct1875', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1875 WHERE id = \" + req.query.id1875)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1876,
    "code": "router.get('/acct1875', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1875 WHERE id = ?\", [req.query.id1875])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1877,
    "code": "app.get('/hello1877', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1877 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1878,
    "code": "const escapeHtml1877 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1877', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1877(req.query.name1877 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1879,
    "code": "app.get('/read1879', (req, res) => {\n  const p = \"./files/\" + req.query.file1879;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1880,
    "code": "const path1879 = require('path');\napp.get('/read1879', (req, res) => {\n  const base = path1879.join(__dirname, 'files');\n  const safe = path1879.join(base, path1879.basename(String(req.query.file1879 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1881,
    "code": "app.get('/go1881', (req, res) => {\n  res.redirect(req.query.url1881);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1882,
    "code": "app.get('/go1881', (req, res) => {\n  const url = String(req.query.url1881 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1883,
    "code": "const JWT_SECRET_1883 = \"super-secret-1883\";\nfunction sign1883(data){ return \"signed-\" + JWT_SECRET_1883; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1884,
    "code": "const JWT_SECRET_1883 = process.env.JWT_SECRET_1883;\nfunction sign1883(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1885,
    "code": "app.get('/login1885', (req, res) => {\n  res.cookie('sid1885', 'token1885');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1886,
    "code": "app.get('/login1885', (req, res) => {\n  res.cookie('sid1885', 'token1885', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1887,
    "code": "app.post('/vote1887', (req, res) => {\n  const choice = req.body.choice1887;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1888,
    "code": "app.post('/vote1887', (req, res) => {\n  const choice = String(req.body.choice1887 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1889,
    "code": "app.post('/register1889', (req, res) => {\n  console.log(\"New user\", req.body.email1889, req.body.password1889);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1890,
    "code": "app.post('/register1889', (req, res) => {\n  console.log(\"New user\", req.body.email1889);\n  const body = { ...req.body }; delete body.password1889;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1891,
    "code": "app.get('/user1891', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1891 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1892,
    "code": "app.get('/user1891', async (req, res) => {\n  const u = String(req.query.u1891 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1893,
    "code": "app.post('/zip1893', (req, res) => {\n  const archive = \"archive_1893.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1893;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1894,
    "code": "app.post('/zip1893', (req, res) => {\n  const archive = \"archive_1893.zip\";\n  const dir = String(req.body.dir1893 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1895,
    "code": "app.post('/cfg1895', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1895 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1896,
    "code": "app.post('/cfg1895', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1895 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1897,
    "code": "app.use('/api1897', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1898,
    "code": "const allowedOrigins1897 = new Set([\"https://example1897.com\"]);\napp.use('/api1897', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1897.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1899,
    "code": "app.get('/fetch1899', async (req, res) => {\n  const r = await fetch(req.query.url1899);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1900,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1899', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1899 || \"\"));\n    const allowedHosts = new Set([\"example1899.com\",\"api1899.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1901,
    "code": "app.post('/auth1901', async (req, res) => {\n  const ok = await authUser(req.body.u1901, req.body.p1901);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1902,
    "code": "const attempts1901 = new Map();\napp.post('/auth1901', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1901.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1901.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1901, req.body.p1901);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1903,
    "code": "app.post('/upload1903', (req, res) => {\n  req.files.file1903.mv(\"./uploads/\" + req.files.file1903.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1904,
    "code": "const path_up1903 = require('path');\napp.post('/upload1903', (req, res) => {\n  const f = req.files && req.files.file1903;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1903.basename(f.name);\n  f.mv(path_up1903.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1905,
    "code": "router.get('/acct1905', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1905 WHERE id = \" + req.query.id1905)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1906,
    "code": "router.get('/acct1905', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1905 WHERE id = ?\", [req.query.id1905])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1907,
    "code": "app.get('/hello1907', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1907 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1908,
    "code": "const escapeHtml1907 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1907', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1907(req.query.name1907 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1909,
    "code": "app.get('/read1909', (req, res) => {\n  const p = \"./files/\" + req.query.file1909;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1910,
    "code": "const path1909 = require('path');\napp.get('/read1909', (req, res) => {\n  const base = path1909.join(__dirname, 'files');\n  const safe = path1909.join(base, path1909.basename(String(req.query.file1909 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1911,
    "code": "app.get('/go1911', (req, res) => {\n  res.redirect(req.query.url1911);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1912,
    "code": "app.get('/go1911', (req, res) => {\n  const url = String(req.query.url1911 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1913,
    "code": "const JWT_SECRET_1913 = \"super-secret-1913\";\nfunction sign1913(data){ return \"signed-\" + JWT_SECRET_1913; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1914,
    "code": "const JWT_SECRET_1913 = process.env.JWT_SECRET_1913;\nfunction sign1913(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1915,
    "code": "app.get('/login1915', (req, res) => {\n  res.cookie('sid1915', 'token1915');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1916,
    "code": "app.get('/login1915', (req, res) => {\n  res.cookie('sid1915', 'token1915', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1917,
    "code": "app.post('/vote1917', (req, res) => {\n  const choice = req.body.choice1917;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1918,
    "code": "app.post('/vote1917', (req, res) => {\n  const choice = String(req.body.choice1917 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1919,
    "code": "app.post('/register1919', (req, res) => {\n  console.log(\"New user\", req.body.email1919, req.body.password1919);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1920,
    "code": "app.post('/register1919', (req, res) => {\n  console.log(\"New user\", req.body.email1919);\n  const body = { ...req.body }; delete body.password1919;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1921,
    "code": "app.get('/user1921', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1921 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1922,
    "code": "app.get('/user1921', async (req, res) => {\n  const u = String(req.query.u1921 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1923,
    "code": "app.post('/zip1923', (req, res) => {\n  const archive = \"archive_1923.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1923;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1924,
    "code": "app.post('/zip1923', (req, res) => {\n  const archive = \"archive_1923.zip\";\n  const dir = String(req.body.dir1923 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1925,
    "code": "app.post('/cfg1925', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1925 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1926,
    "code": "app.post('/cfg1925', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1925 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1927,
    "code": "app.use('/api1927', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1928,
    "code": "const allowedOrigins1927 = new Set([\"https://example1927.com\"]);\napp.use('/api1927', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1927.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1929,
    "code": "app.get('/fetch1929', async (req, res) => {\n  const r = await fetch(req.query.url1929);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1930,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1929', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1929 || \"\"));\n    const allowedHosts = new Set([\"example1929.com\",\"api1929.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1931,
    "code": "app.post('/auth1931', async (req, res) => {\n  const ok = await authUser(req.body.u1931, req.body.p1931);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1932,
    "code": "const attempts1931 = new Map();\napp.post('/auth1931', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1931.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1931.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1931, req.body.p1931);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1933,
    "code": "app.post('/upload1933', (req, res) => {\n  req.files.file1933.mv(\"./uploads/\" + req.files.file1933.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1934,
    "code": "const path_up1933 = require('path');\napp.post('/upload1933', (req, res) => {\n  const f = req.files && req.files.file1933;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1933.basename(f.name);\n  f.mv(path_up1933.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1935,
    "code": "router.get('/acct1935', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1935 WHERE id = \" + req.query.id1935)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1936,
    "code": "router.get('/acct1935', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1935 WHERE id = ?\", [req.query.id1935])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1937,
    "code": "app.get('/hello1937', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1937 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1938,
    "code": "const escapeHtml1937 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1937', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1937(req.query.name1937 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1939,
    "code": "app.get('/read1939', (req, res) => {\n  const p = \"./files/\" + req.query.file1939;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1940,
    "code": "const path1939 = require('path');\napp.get('/read1939', (req, res) => {\n  const base = path1939.join(__dirname, 'files');\n  const safe = path1939.join(base, path1939.basename(String(req.query.file1939 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1941,
    "code": "app.get('/go1941', (req, res) => {\n  res.redirect(req.query.url1941);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1942,
    "code": "app.get('/go1941', (req, res) => {\n  const url = String(req.query.url1941 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1943,
    "code": "const JWT_SECRET_1943 = \"super-secret-1943\";\nfunction sign1943(data){ return \"signed-\" + JWT_SECRET_1943; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1944,
    "code": "const JWT_SECRET_1943 = process.env.JWT_SECRET_1943;\nfunction sign1943(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1945,
    "code": "app.get('/login1945', (req, res) => {\n  res.cookie('sid1945', 'token1945');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1946,
    "code": "app.get('/login1945', (req, res) => {\n  res.cookie('sid1945', 'token1945', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1947,
    "code": "app.post('/vote1947', (req, res) => {\n  const choice = req.body.choice1947;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1948,
    "code": "app.post('/vote1947', (req, res) => {\n  const choice = String(req.body.choice1947 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1949,
    "code": "app.post('/register1949', (req, res) => {\n  console.log(\"New user\", req.body.email1949, req.body.password1949);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1950,
    "code": "app.post('/register1949', (req, res) => {\n  console.log(\"New user\", req.body.email1949);\n  const body = { ...req.body }; delete body.password1949;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1951,
    "code": "app.get('/user1951', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1951 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1952,
    "code": "app.get('/user1951', async (req, res) => {\n  const u = String(req.query.u1951 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1953,
    "code": "app.post('/zip1953', (req, res) => {\n  const archive = \"archive_1953.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1953;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1954,
    "code": "app.post('/zip1953', (req, res) => {\n  const archive = \"archive_1953.zip\";\n  const dir = String(req.body.dir1953 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1955,
    "code": "app.post('/cfg1955', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1955 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1956,
    "code": "app.post('/cfg1955', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1955 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1957,
    "code": "app.use('/api1957', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1958,
    "code": "const allowedOrigins1957 = new Set([\"https://example1957.com\"]);\napp.use('/api1957', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1957.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1959,
    "code": "app.get('/fetch1959', async (req, res) => {\n  const r = await fetch(req.query.url1959);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1960,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1959', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1959 || \"\"));\n    const allowedHosts = new Set([\"example1959.com\",\"api1959.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1961,
    "code": "app.post('/auth1961', async (req, res) => {\n  const ok = await authUser(req.body.u1961, req.body.p1961);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1962,
    "code": "const attempts1961 = new Map();\napp.post('/auth1961', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1961.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1961.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1961, req.body.p1961);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1963,
    "code": "app.post('/upload1963', (req, res) => {\n  req.files.file1963.mv(\"./uploads/\" + req.files.file1963.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1964,
    "code": "const path_up1963 = require('path');\napp.post('/upload1963', (req, res) => {\n  const f = req.files && req.files.file1963;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1963.basename(f.name);\n  f.mv(path_up1963.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1965,
    "code": "router.get('/acct1965', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1965 WHERE id = \" + req.query.id1965)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1966,
    "code": "router.get('/acct1965', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1965 WHERE id = ?\", [req.query.id1965])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1967,
    "code": "app.get('/hello1967', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1967 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1968,
    "code": "const escapeHtml1967 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1967', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1967(req.query.name1967 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1969,
    "code": "app.get('/read1969', (req, res) => {\n  const p = \"./files/\" + req.query.file1969;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 1970,
    "code": "const path1969 = require('path');\napp.get('/read1969', (req, res) => {\n  const base = path1969.join(__dirname, 'files');\n  const safe = path1969.join(base, path1969.basename(String(req.query.file1969 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1971,
    "code": "app.get('/go1971', (req, res) => {\n  res.redirect(req.query.url1971);\n});",
    "label": "insecure",
    "vulnerability_type": "Open Redirect",
    "explanation": "Redirecting to arbitrary URLs can be abused for phishing. Secure version restricts to relative paths."
  },
  {
    "id": 1972,
    "code": "app.get('/go1971', (req, res) => {\n  const url = String(req.query.url1971 || \"\");\n  if (!/^\\/[^\\s]*$/.test(url)) return res.status(400).send(\"Bad url\");\n  res.redirect(url);\n});",
    "label": "secure",
    "vulnerability_type": "Open Redirect",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1973,
    "code": "const JWT_SECRET_1973 = \"super-secret-1973\";\nfunction sign1973(data){ return \"signed-\" + JWT_SECRET_1973; }",
    "label": "insecure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "Secrets are hardcoded in source. Secure version loads from environment."
  },
  {
    "id": 1974,
    "code": "const JWT_SECRET_1973 = process.env.JWT_SECRET_1973;\nfunction sign1973(data){ /* use library with env secret */ return \"signed\"; }",
    "label": "secure",
    "vulnerability_type": "Hardcoded Secret",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1975,
    "code": "app.get('/login1975', (req, res) => {\n  res.cookie('sid1975', 'token1975');\n  res.send('ok');\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "Cookies without security flags risk theft. Secure version sets httpOnly, secure, and SameSite."
  },
  {
    "id": 1976,
    "code": "app.get('/login1975', (req, res) => {\n  res.cookie('sid1975', 'token1975', { httpOnly: true, secure: true, sameSite: 'lax' });\n  res.send('ok');\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Cookie",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1977,
    "code": "app.post('/vote1977', (req, res) => {\n  const choice = req.body.choice1977;\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "Accepting arbitrary values can corrupt state. Secure version validates against an allowlist."
  },
  {
    "id": 1978,
    "code": "app.post('/vote1977', (req, res) => {\n  const choice = String(req.body.choice1977 || \"\");\n  const allowed = new Set([\"A\",\"B\",\"C\"]);\n  if (!allowed.has(choice)) return res.status(400).send(\"Invalid choice\");\n  saveVote(choice);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insufficient Input Validation",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1979,
    "code": "app.post('/register1979', (req, res) => {\n  console.log(\"New user\", req.body.email1979, req.body.password1979);\n  createUser(req.body);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "Logging passwords leaks secrets. Secure version avoids logging sensitive fields."
  },
  {
    "id": 1980,
    "code": "app.post('/register1979', (req, res) => {\n  console.log(\"New user\", req.body.email1979);\n  const body = { ...req.body }; delete body.password1979;\n  createUser(body);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Sensitive Data Exposure (Logging)",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1981,
    "code": "app.get('/user1981', async (req, res) => {\n  // $where with user input\n  const users = await Users.find({ $where: \"this.username == '\" + req.query.u1981 + \"'\" });\n  res.send(users);\n});",
    "label": "insecure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "Using $where with user-controlled strings enables NoSQL injection. Secure version uses field match with basic sanitization."
  },
  {
    "id": 1982,
    "code": "app.get('/user1981', async (req, res) => {\n  const u = String(req.query.u1981 || \"\").replace(/[^\\w.-]/g, \"\");\n  const users = await Users.find({ username: u }).lean();\n  res.send(users);\n});",
    "label": "secure",
    "vulnerability_type": "NoSQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1983,
    "code": "app.post('/zip1983', (req, res) => {\n  const archive = \"archive_1983.zip\";\n  const cmd = \"zip -r \" + archive + \" \" + req.body.dir1983;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "insecure",
    "vulnerability_type": "Command Injection",
    "explanation": "Shell command built with unsanitized input. Secure version restricts allowed characters."
  },
  {
    "id": 1984,
    "code": "app.post('/zip1983', (req, res) => {\n  const archive = \"archive_1983.zip\";\n  const dir = String(req.body.dir1983 || \"\").replace(/[^\\w\\-\\/]/g, \"\");\n  const cmd = \"zip -r \" + archive + \" \" + dir;\n  require('child_process').exec(cmd, (e, out) => res.send(out));\n});",
    "label": "secure",
    "vulnerability_type": "Command Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1985,
    "code": "app.post('/cfg1985', (req, res) => {\n  const cfg = eval(\"(\" + req.body.cfg1985 + \")\");\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "Evaluating untrusted input enables code execution. Secure version uses JSON.parse with error handling."
  },
  {
    "id": 1986,
    "code": "app.post('/cfg1985', (req, res) => {\n  let cfg;\n  try {\n    cfg = JSON.parse(String(req.body.cfg1985 || \"\"));\n  } catch (e) {\n    return res.status(400).send(\"Invalid config\");\n  }\n  applyConfig(cfg);\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure Deserialization",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1987,
    "code": "app.use('/api1987', (req, res, next) => {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.set('Access-Control-Allow-Credentials', 'true');\n  next();\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "Allowing '*' with credentials violates CORS security. Secure version reflects only allowlisted origins."
  },
  {
    "id": 1988,
    "code": "const allowedOrigins1987 = new Set([\"https://example1987.com\"]);\napp.use('/api1987', (req, res, next) => {\n  const origin = req.get('Origin');\n  if (allowedOrigins1987.has(origin)) {\n    res.set('Access-Control-Allow-Origin', origin);\n    res.set('Access-Control-Allow-Credentials', 'true');\n  }\n  next();\n});",
    "label": "secure",
    "vulnerability_type": "Insecure CORS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1989,
    "code": "app.get('/fetch1989', async (req, res) => {\n  const r = await fetch(req.query.url1989);\n  res.send(await r.text());\n});",
    "label": "insecure",
    "vulnerability_type": "SSRF",
    "explanation": "Fetching arbitrary URLs can hit internal services. Secure version allowlists hosts."
  },
  {
    "id": 1990,
    "code": "const {\"URL\"} = require('url');\napp.get('/fetch1989', async (req, res) => {\n  try {\n    const u = new URL(String(req.query.url1989 || \"\"));\n    const allowedHosts = new Set([\"example1989.com\",\"api1989.example.com\"]);\n    if (!allowedHosts.has(u.hostname)) return res.status(400).send(\"Disallowed host\");\n    const r = await fetch(u.toString());\n    res.send(await r.text());\n  } catch(e) {\n    res.status(400).send(\"Bad URL\");\n  }\n});",
    "label": "secure",
    "vulnerability_type": "SSRF",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1991,
    "code": "app.post('/auth1991', async (req, res) => {\n  const ok = await authUser(req.body.u1991, req.body.p1991);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "insecure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "No throttling allows brute force. Secure version adds a basic per-IP rate limit."
  },
  {
    "id": 1992,
    "code": "const attempts1991 = new Map();\napp.post('/auth1991', async (req, res) => {\n  const ip = req.ip;\n  const now = Date.now();\n  const rec = attempts1991.get(ip) || [];\n  const recent = rec.filter(t => now - t < 60_000);\n  recent.push(now);\n  attempts1991.set(ip, recent);\n  if (recent.length > 10) return res.status(429).send(\"Too many attempts\");\n  const ok = await authUser(req.body.u1991, req.body.p1991);\n  res.send(ok ? \"ok\" : \"no\");\n});",
    "label": "secure",
    "vulnerability_type": "Missing Rate Limiting",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1993,
    "code": "app.post('/upload1993', (req, res) => {\n  req.files.file1993.mv(\"./uploads/\" + req.files.file1993.name);\n  res.send(\"ok\");\n});",
    "label": "insecure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "Accepting any file without checks is risky. Secure version validates MIME type and filename."
  },
  {
    "id": 1994,
    "code": "const path_up1993 = require('path');\napp.post('/upload1993', (req, res) => {\n  const f = req.files && req.files.file1993;\n  if (!f || !/^image\\/(png|jpeg)$/.test(f.mimetype)) return res.status(400).send(\"Invalid file\");\n  const name = Date.now() + \"-\" + path_up1993.basename(f.name);\n  f.mv(path_up1993.join(__dirname, \"uploads\", name));\n  res.send(\"ok\");\n});",
    "label": "secure",
    "vulnerability_type": "Insecure File Upload",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1995,
    "code": "router.get('/acct1995', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1995 WHERE id = \" + req.query.id1995)\n    .then(r => res.send(r));\n});",
    "label": "insecure",
    "vulnerability_type": "SQL Injection",
    "explanation": "Concatenating user input into SQL query introduces SQL injection. Secure version uses parameterized queries."
  },
  {
    "id": 1996,
    "code": "router.get('/acct1995', (req, res) => {\n  db.query(\"SELECT balance FROM accounts_1995 WHERE id = ?\", [req.query.id1995])\n    .then(r => res.send(r));\n});",
    "label": "secure",
    "vulnerability_type": "SQL Injection",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1997,
    "code": "app.get('/hello1997', (req, res) => {\n  res.send(\"<h2>Hello \" + (req.query.name1997 || \"\") + \"</h2>\");\n});",
    "label": "insecure",
    "vulnerability_type": "XSS",
    "explanation": "Unescaped user input is reflected in HTML. Secure version escapes special characters."
  },
  {
    "id": 1998,
    "code": "const escapeHtml1997 = s => String(s).replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;'}[m]));\napp.get('/hello1997', (req, res) => {\n  res.send(\"<h2>Hello \" + escapeHtml1997(req.query.name1997 || \"\") + \"</h2>\");\n});",
    "label": "secure",
    "vulnerability_type": "XSS",
    "explanation": "This is the secure version of the previous example."
  },
  {
    "id": 1999,
    "code": "app.get('/read1999', (req, res) => {\n  const p = \"./files/\" + req.query.file1999;\n  res.sendFile(p);\n});",
    "label": "insecure",
    "vulnerability_type": "Path Traversal",
    "explanation": "User-controlled path may escape directory. Secure version uses basename and fixed root."
  },
  {
    "id": 2000,
    "code": "const path1999 = require('path');\napp.get('/read1999', (req, res) => {\n  const base = path1999.join(__dirname, 'files');\n  const safe = path1999.join(base, path1999.basename(String(req.query.file1999 || \"\")));\n  res.sendFile(safe);\n});",
    "label": "secure",
    "vulnerability_type": "Path Traversal",
    "explanation": "This is the secure version of the previous example."
  }
]